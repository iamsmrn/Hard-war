/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.09.2024 20:38:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003741683904081583, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 14419, -19278, -28910, -33309, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00038357538869604468, 0.00027151417452841997, 0.00022712649661116302, 0.00022778310813009739, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ -17,-21,-68,-14,127,-24,-36,-48,77,-8,83,-4,-27,6,6,-20,-1,-3,-35,17,13,56,49,117,-22,15,-2,75,55,-51,2,9, 
  /* [1][0][][] */ 38,49,-41,8,-85,33,82,26,-19,-34,-50,9,58,-27,73,-66,87,-61,-2,-26,17,-39,-127,-43,-36,-46,26,-59,-21,-58,-9,-2, 
  /* [2][0][][] */ -24,104,37,81,-79,-21,49,44,-46,-72,86,-16,-67,69,-58,44,45,69,56,-43,3,33,-94,-74,36,-30,98,-127,5,25,30,37, 
  /* [3][0][][] */ 77,-51,91,-13,-75,101,38,15,12,-66,46,120,51,5,-87,-18,94,-63,79,17,-84,16,-122,-127,19,-25,-71,7,-56,120,47,32, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0064016976393759251, 0.004531447310000658, 0.0037906372454017401, 0.0038015958853065968, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 107, -117, -1330, -1200, 2412, -412, -450, -659, -1347, -1225, -856, -353, -393, -1266, -420, -374, -40, -1075, -617, -1213, -1800, -1097, 1737, 3360, 325, -1191, -94, 537, -962, -994, -336, -1335, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.6331715313717723e-05, 5.7704146456671879e-05, 4.7359502787003294e-05, 6.165460217744112e-05, 8.8261840573977679e-05, 5.5356555094476789e-05, 4.4197960960445926e-05, 5.6709031923674047e-05, 5.4505511798197404e-05, 5.1639246521517634e-05, 5.1302627980476245e-05, 6.9663590693380684e-05, 5.5121101468103006e-05, 4.4906104449182749e-05, 5.6170058087445796e-05, 7.0319707447197288e-05, 4.7006531531224027e-05, 4.9628801207290962e-05, 5.5477288697147742e-05, 4.9889295041793957e-05, 5.2675386541523039e-05, 5.2021670853719115e-05, 0.00010903499787673354, 0.00010829251550603658, 8.3640908997040242e-05, 5.0621172704268247e-05, 6.1182130593806505e-05, 9.4793387688696384e-05, 4.6618559281341732e-05, 5.6818753364495933e-05, 5.1724993682000786e-05, 5.3301115258364007e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -38,-90,92,22,52,-13,-72,-50,40,-85,-98,13,56,-4,-9,48,-32,-35,-46,-30,-49,-66,-10,73,-115,5,53,-39,71,-5,-44,-58,51,-50,-63,66,-89,-51,-61,27,18,-95,-43,86,36,-111,100,-35,-18,-68,-21,80,-60,-29,-81,85,51,62,59,-127,-58,75,-53,25,-14,-10,73,83,55,108,65,-81,85,-82,38,68,-88,-2,-40,23,46,18,79,16,-47,-75,-95,87,14,89,6,-74,27,96,24,11, 
  /* [1][0][][] */ -54,13,-50,-2,-38,86,29,42,-13,-63,-57,106,53,-32,26,80,98,-9,57,75,-41,19,21,-20,-14,20,-13,87,26,36,103,-18,32,85,-5,40,48,47,22,-3,-29,5,-7,-72,-30,-13,-11,-29,-4,-70,101,70,15,79,-39,-62,46,96,23,127,-30,89,-31,-53,-32,19,81,37,97,26,-16,16,-84,66,-24,34,42,-28,-25,40,-71,37,-28,-77,52,52,-90,-53,49,72,64,15,63,85,25,-2, 
  /* [2][0][][] */ 30,-3,-77,63,-47,-92,48,60,-109,52,-67,107,62,-33,46,-127,-50,-53,15,26,-122,-28,69,29,-51,44,72,-32,-85,36,46,55,-89,-44,-107,-126,-102,69,65,-59,-127,-92,-23,-40,-107,75,-22,-81,81,6,48,-123,-72,43,-14,11,-104,58,-79,-20,-54,25,-66,34,55,2,16,58,-114,50,-12,-100,14,-77,2,-7,-85,-30,-34,-1,5,-87,-41,-74,-13,-113,-28,-33,51,74,-37,-14,-69,-77,-81,-75, 
  /* [3][0][][] */ 20,-10,-5,-46,-51,5,-110,45,1,-15,53,-27,37,32,51,-6,46,37,-46,-15,69,-61,-58,-112,-61,-110,-84,42,36,-81,30,-25,-66,-57,-16,-41,-95,-4,18,5,-43,-99,-92,-31,20,-20,-62,-78,19,-38,15,-30,59,11,34,-100,-107,-106,-127,-31,-84,-5,-59,24,25,-56,-33,-53,-51,-80,-30,60,-14,-51,33,-68,-15,38,61,-79,-94,-114,0,27,-12,-6,-67,-84,-48,2,-31,-104,37,-97,-76,2, 
  /* [4][0][][] */ 74,112,19,33,25,-55,40,-33,106,76,58,-12,29,52,-9,-35,-62,-7,-68,-1,127,-39,70,49,63,40,25,-24,-1,21,-12,-26,77,95,53,-39,23,-5,-48,-29,23,-9,-16,-33,28,115,6,15,5,56,-9,-41,19,18,-19,29,44,-68,87,-4,-3,-47,-25,0,-12,74,-16,-14,10,-88,18,-1,-13,4,96,58,47,17,64,9,43,22,-45,11,13,65,120,-12,47,-14,32,25,43,8,50,36, 
  /* [5][0][][] */ 77,-107,73,79,2,-126,4,69,83,-99,-21,-45,47,78,43,26,45,30,-53,82,21,58,-9,-30,-127,-57,-22,-98,17,3,-52,-97,-42,-3,-39,11,-94,-20,38,9,-112,-99,48,77,-26,-19,74,-61,-116,67,-5,22,5,5,3,0,86,36,-95,-107,-14,-47,-14,-78,-65,47,-9,35,61,34,94,-70,-18,73,-7,-72,-5,-41,15,81,89,17,25,76,-64,17,-43,44,45,-85,110,78,-7,69,31,-58, 
  /* [6][0][][] */ 1,-78,105,75,-104,-124,-11,91,-52,-75,5,-104,87,41,116,-97,38,-6,21,100,-67,-116,92,23,-88,-85,1,-83,-31,-109,34,-85,-100,-122,-42,-96,-1,50,-81,78,60,49,63,-36,-118,65,-61,-27,-82,7,-13,-44,53,-54,102,-39,22,-7,-97,127,-106,-19,52,-75,-49,6,118,-52,83,12,-115,-9,48,-59,-74,-51,-100,-111,-38,-31,31,-46,69,-21,-58,-122,-98,-84,71,121,96,-4,-57,-27,88,-16, 
  /* [7][0][][] */ 81,35,-29,-35,-75,95,-21,34,49,8,-63,48,56,-78,38,77,50,24,26,66,23,53,-16,31,-98,78,37,32,-59,93,-6,38,3,19,51,80,-83,66,14,11,77,-69,69,41,31,-49,117,-85,44,-55,-87,-32,-29,66,17,13,106,-58,-26,13,-12,-10,54,-89,-66,-67,67,22,-75,27,34,55,72,24,57,27,-73,43,-75,30,55,-56,-9,-65,95,-16,-127,63,45,4,63,45,-45,-3,-18,-51, 
  /* [8][0][][] */ -8,-1,-71,-104,22,22,-88,-50,-1,11,6,40,-26,-56,-97,-93,-70,55,-80,-20,-7,-48,38,82,-111,45,5,38,-80,-18,-92,71,57,-48,8,-32,57,-33,-48,32,40,55,-114,-127,-25,-40,-51,53,1,-99,-74,-4,-83,-31,-60,-107,14,56,-99,61,60,4,3,54,-51,-53,-52,45,-99,7,7,-31,23,20,-28,-20,-45,62,36,30,-4,75,-115,-107,-17,13,41,-72,0,-57,-104,56,-88,-117,-60,13, 
  /* [9][0][][] */ -24,-15,65,8,54,-106,-65,-127,10,19,-34,16,-51,-93,-116,-49,-21,53,-110,-86,-24,53,-115,-36,70,-34,-33,-9,-37,-80,-89,56,29,-28,-7,-45,-92,-13,-58,-55,28,-52,24,-108,60,-2,-113,18,80,-32,-97,-35,36,-93,-71,57,49,-80,-36,-26,-109,64,37,-91,-100,-15,57,8,-69,52,67,-106,-24,41,-117,-108,-8,-91,-60,61,0,15,59,24,-66,-26,7,-43,57,1,-54,77,67,-30,24,-53, 
  /* [10][0][][] */ -67,68,51,-77,-19,74,86,-9,105,0,19,-65,57,46,-59,-3,-1,88,-113,-81,-43,-3,54,-15,11,22,-127,-115,-63,37,-78,-72,54,68,73,36,-63,-17,-58,7,-17,116,-101,-61,-98,5,-29,-78,24,-16,4,37,38,20,-67,-43,-88,-37,68,9,-35,44,66,26,76,-81,-114,-35,-11,-51,-96,-83,47,33,-96,82,-24,40,29,-8,41,22,17,123,-91,64,116,-25,6,-21,-30,-77,-67,-50,-63,-76, 
  /* [11][0][][] */ 77,-14,2,69,33,13,9,28,112,44,-77,79,23,-46,29,-32,-27,-84,38,18,13,73,0,-74,-96,-68,-37,19,34,-26,-16,-34,-64,-48,48,5,-72,52,-20,-44,-55,23,-81,-2,-27,-24,-24,-79,18,52,21,-34,-90,-60,-35,35,-64,-40,-40,-127,-84,58,27,-19,-38,38,-36,33,55,50,-27,-67,39,68,-51,17,-51,-26,-24,77,-73,-16,-79,-89,51,-87,-4,11,-68,-61,23,-60,-66,0,-101,-35, 
  /* [12][0][][] */ -6,39,-45,-2,41,29,-42,33,-87,31,-42,-3,-36,-4,56,-88,-92,-54,-45,-48,21,-6,5,56,-90,-51,83,-62,54,12,-92,97,-80,-67,-38,25,21,-73,-19,51,38,-11,-106,-14,-7,-127,-32,74,-62,-121,-47,59,14,17,-85,66,-37,-45,10,-60,68,115,-11,24,82,24,-26,86,51,95,30,52,62,97,-19,-23,-6,33,-90,-73,-50,66,25,-23,-55,4,10,75,-92,-86,71,31,78,25,46,44, 
  /* [13][0][][] */ 95,-33,65,61,73,83,63,21,48,-119,9,-36,51,43,34,-61,-120,-79,-99,-9,37,-60,94,-43,-93,9,-26,-28,-112,-124,85,14,12,67,-54,2,-121,-52,-16,39,-34,112,-72,-30,-69,46,-35,-69,45,100,-69,-54,-114,-1,85,-103,-38,-6,-17,-20,-48,73,-119,-3,-85,-95,-125,55,-74,-46,67,-36,-126,14,-108,-51,-127,47,40,-96,18,-81,56,59,-90,-62,93,119,-40,-80,-104,21,92,-83,34,-23, 
  /* [14][0][][] */ -64,-98,55,39,48,-50,-21,-94,-96,-39,43,38,-36,-72,-84,-81,-80,-61,-8,1,-47,13,-30,21,-86,-63,-44,11,-106,-96,-84,11,70,-31,-36,2,56,73,19,-93,-37,-113,20,60,30,-110,31,-86,76,16,50,34,60,-53,-27,-13,-31,-9,0,33,-28,-78,-44,41,-88,-25,52,-96,-83,-90,-86,61,-10,44,32,-74,12,-115,37,12,24,-46,-102,-67,-107,-110,-127,56,77,-4,52,-58,55,67,-23,34, 
  /* [15][0][][] */ 19,-2,-29,32,65,-37,44,-71,38,0,-22,34,49,-9,-73,-46,94,27,-55,-13,20,-5,50,88,33,36,3,54,13,25,91,-38,1,13,-54,-16,-54,73,59,-45,46,112,-8,-44,5,0,-47,-36,31,-45,4,68,-52,-68,-25,-12,61,33,7,127,-30,-68,9,65,-20,56,-55,-3,-46,-14,26,-49,-12,-22,20,-53,3,15,54,31,-62,56,-76,6,-69,2,-4,75,40,30,-86,-27,31,59,-64,60, 
  /* [16][0][][] */ -64,-23,111,-38,22,97,-58,75,20,49,-101,70,11,-45,-22,-45,102,70,79,71,111,92,-45,26,-78,50,-48,52,-93,27,-11,16,-105,70,68,77,-11,52,-26,-43,1,-97,97,98,64,49,127,-22,-58,-109,14,127,-37,114,65,46,42,96,23,-27,111,117,16,47,47,8,-5,98,61,126,-28,-1,42,93,75,77,-20,97,-84,-8,21,-94,71,41,8,50,49,26,70,28,3,112,85,30,-66,33, 
  /* [17][0][][] */ 20,-61,4,47,-62,-82,-78,-114,65,-95,61,55,61,32,-127,32,38,52,69,73,-107,-37,-10,-3,-1,38,-100,-16,69,-75,-11,71,-44,-43,3,-19,-68,66,-104,-26,-49,-43,-31,-51,4,39,50,-124,81,75,-41,42,-39,46,87,-83,-121,69,-6,-70,-10,-113,37,64,-107,-89,10,-114,-126,-19,75,-1,-9,-119,-85,36,124,-59,8,-77,-15,0,-90,-108,-121,50,69,-48,-7,41,-106,-87,-24,102,-12,-5, 
  /* [18][0][][] */ -68,49,79,-56,-21,-71,-81,10,-69,42,-52,17,-9,14,37,-21,28,-12,46,-64,42,-15,-25,-97,-51,-77,-42,77,22,29,52,46,18,-3,-70,-101,-86,15,-2,63,-6,-27,-100,-35,-87,-54,47,-19,-17,-42,25,7,-111,11,-22,65,-34,33,-80,10,22,69,6,16,-81,-91,-37,75,60,-74,-94,76,-65,-72,-61,-101,2,-12,-13,-85,-69,-25,-75,-73,121,-84,0,32,-127,-123,-66,73,36,-66,-53,-42, 
  /* [19][0][][] */ -11,1,39,7,25,-36,58,52,66,-78,0,-35,-107,4,-73,25,36,-114,67,24,-43,43,-72,-12,44,-93,0,-80,-102,-126,-81,14,45,-97,3,-26,-16,-85,-74,-110,14,-124,-95,-18,-84,2,39,-105,-48,6,-58,31,-55,-11,-22,-35,-3,58,-24,-48,23,-73,59,27,-85,-24,-48,-28,-33,13,41,-68,-80,-127,-73,-94,-36,-52,-13,67,25,-116,-51,49,-100,-19,-14,-31,52,1,-30,29,-53,71,36,-66, 
  /* [20][0][][] */ -44,52,18,41,-48,60,32,17,-25,-28,-100,-25,-41,37,-3,-99,-74,4,-87,-68,-22,-70,-92,-61,46,-95,-126,-1,-18,-33,-36,60,39,-3,-47,13,-22,-60,-46,-120,-83,-32,-90,-105,-38,-83,-88,49,80,-127,-61,50,10,52,72,-36,55,24,19,62,49,-64,-93,-68,-66,-59,-77,-25,-104,-97,-88,27,-88,-106,-12,-27,101,35,56,49,33,-35,34,-49,13,67,-40,13,-20,30,-17,7,-14,-14,19,-31, 
  /* [21][0][][] */ 50,43,32,-113,50,-91,31,-17,20,-82,-87,8,-24,9,-71,-98,-46,-53,-5,-37,63,-66,49,-88,31,-99,-50,42,-15,-25,-32,-46,-22,-10,-101,-127,69,51,-122,-56,-34,-18,-3,-37,-106,-70,-86,59,0,-84,-38,35,4,34,-108,-3,-80,14,-9,74,15,-89,-11,-38,40,0,-61,-87,-115,-12,32,35,4,-47,33,28,-105,-42,31,65,-17,58,4,-95,9,-82,56,-91,-111,41,68,-120,-67,-99,28,-54, 
  /* [22][0][][] */ 103,15,-12,-51,59,-77,29,-7,-8,61,20,-72,72,69,-56,-32,-51,15,-53,-31,75,-5,50,41,80,29,-44,26,25,-33,-8,-79,52,81,90,-2,10,18,-21,-75,-8,25,4,29,7,19,69,2,-26,48,-18,-38,29,-13,-18,72,-16,-52,67,-25,20,-62,-51,-30,-31,52,-67,-31,23,14,63,8,-11,33,69,-30,28,-18,52,80,65,-9,-23,33,53,123,127,-38,54,44,-5,14,15,-22,25,93, 
  /* [23][0][][] */ 70,44,3,27,121,-64,55,-93,53,11,76,-27,6,19,-6,-13,-3,-11,-90,56,127,-56,65,25,71,35,34,45,51,20,52,2,34,69,31,24,59,3,-48,-44,18,58,-11,-25,23,30,4,25,45,56,-9,12,74,35,7,38,-20,-32,70,7,-29,-23,-14,34,49,77,-58,-28,26,-51,75,2,-8,-20,16,5,64,40,78,47,8,66,-16,12,36,87,89,-14,18,36,53,-17,49,-74,54,88, 
  /* [24][0][][] */ -58,-28,-72,-23,-39,-37,-1,-27,-48,74,107,67,87,-17,-42,5,2,64,62,-66,13,-21,-39,-46,-13,23,0,27,81,29,96,-15,-8,35,-1,-5,-127,8,67,12,-9,13,48,-40,5,-15,25,51,-41,-44,-21,-15,29,-7,50,-98,18,68,19,95,17,-30,54,80,-69,26,-13,-19,-48,28,-71,-11,-3,-1,39,68,-8,-124,-96,-68,-80,-41,-43,-96,63,14,7,-114,-31,-120,17,-47,-34,-7,-102,-11, 
  /* [25][0][][] */ -100,-81,-93,-36,50,-96,-118,17,79,-117,-63,-8,31,-28,-123,-51,-76,15,-1,-127,32,44,-43,-45,-13,-71,-122,1,40,-108,6,66,58,-123,9,35,50,-80,-49,-51,-99,54,-111,-30,52,21,28,2,-107,51,-92,-11,7,-48,-80,-16,-42,11,-119,33,64,5,13,9,-30,34,-45,-36,-108,-35,-34,-127,0,-125,31,-12,26,36,-19,-9,13,75,-68,48,-92,-68,-114,-116,-47,-61,61,-11,-112,21,-48,-96, 
  /* [26][0][][] */ 26,-94,-13,-8,-74,33,-4,19,-127,-73,102,82,-59,-47,10,23,98,47,-30,-62,2,70,65,-28,6,52,26,46,34,41,-19,36,-40,-34,-70,-55,-39,57,-1,125,-51,85,45,22,-56,16,-27,88,3,11,14,102,18,-17,19,-97,89,68,23,102,23,-66,74,-3,96,-14,-18,46,-40,57,29,79,55,-78,-52,8,11,-75,-63,-12,-33,29,64,-44,91,-32,-57,4,-69,90,1,5,-47,83,38,60, 
  /* [27][0][][] */ 29,127,-42,-39,0,-28,7,-36,34,57,45,-60,-14,37,29,-32,66,34,11,-36,-20,-29,-20,50,26,31,-78,0,19,-15,-6,8,80,55,-59,-31,-78,-27,-70,21,19,75,33,-5,85,100,11,46,101,100,32,41,-57,-41,33,-23,100,-18,-24,-2,-28,-34,-28,38,7,-3,-64,53,11,-4,-19,-2,6,-32,-12,-16,93,15,39,35,48,40,58,25,-69,83,-7,-6,-25,-3,-13,-20,68,25,61,61, 
  /* [28][0][][] */ 63,41,55,17,-127,-80,-112,-95,-60,-119,37,38,-96,-100,-20,69,62,86,-90,41,-50,-1,-120,-98,-74,54,-101,-77,-89,-93,-15,-39,-119,-5,51,43,-16,-125,-62,4,106,13,-107,22,-124,48,-10,19,2,-78,-96,-3,-103,-2,25,13,46,-35,81,35,-32,-65,-111,-19,29,50,-45,52,-96,-3,-114,-62,41,4,-28,-115,-124,-26,-103,17,-93,-107,77,31,34,-120,74,-105,-118,-94,-57,-85,-60,23,-57,-94, 
  /* [29][0][][] */ 42,27,28,-50,-90,-9,-113,-18,127,-27,-92,-74,72,-73,-53,-54,-60,58,10,-58,-75,-14,37,14,-17,-14,-45,-43,-83,-35,52,-26,19,-17,-61,-67,-22,65,-33,42,24,65,-61,38,-25,81,-28,-23,14,-25,13,-91,32,-81,50,54,-106,20,-20,65,-115,52,-94,-62,-72,-71,16,56,51,-65,47,-85,79,59,27,-1,79,-41,-45,36,-25,-68,-29,-67,51,103,62,63,-43,54,55,43,-99,10,-24,40, 
  /* [30][0][][] */ 36,-58,-60,21,-103,-15,-60,-26,94,-34,46,-29,-90,34,31,5,-23,-19,61,-100,22,-88,-65,7,-116,12,-82,67,-24,-124,-56,-2,-73,-51,-87,-77,-14,-15,-9,-37,107,-44,-43,56,75,-37,89,49,-107,93,-21,-86,73,-49,-37,89,-94,-70,-34,3,-127,-28,-82,-22,-109,-103,-96,67,-64,79,41,-38,-83,85,34,-85,-74,-83,-65,-52,10,19,-116,-15,-75,64,-43,80,-30,-121,59,24,-61,-27,-9,-45, 
  /* [31][0][][] */ 38,-107,-1,53,14,20,-74,-108,-49,-48,-92,-92,52,-127,-69,59,-73,-105,-2,10,20,-4,-55,65,27,-118,-3,3,-90,-91,11,58,-6,-11,-103,-34,48,-52,-85,-121,28,-85,-49,-3,-26,-69,-56,-13,32,-3,46,-48,-122,-78,-94,-5,-119,26,-19,65,-64,-33,37,-87,27,61,-67,-92,28,-126,-124,-20,-104,-56,-25,-26,-78,-41,10,48,-89,-43,20,60,19,55,-99,-17,-12,-70,-102,-69,-19,59,-32,-49, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023940978571772575, 0.0024524261243641376, 0.0020127787720412016, 0.0026203205343335867, 0.0037511282134801149, 0.0023526535369455814, 0.0018784132553264499, 0.0024101338349282742, 0.0023164842277765274, 0.0021946679335087538, 0.0021803616546094418, 0.0029607026372104883, 0.0023426467087119818, 0.0019085094099864364, 0.0023872274905443192, 0.0029885873664170504, 0.0019977774936705828, 0.0021092239767313004, 0.0023577846586704254, 0.0021202950738370419, 0.0022387038916349411, 0.0022109209094196558, 0.0046339873224496841, 0.0046024317853152752, 0.0035547385923564434, 0.0021513998508453369, 0.002600240521132946, 0.0040287189185619354, 0.0019812886603176594, 0.0024147969670593739, 0.0021983121987432241, 0.0022652973420917988, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1930, 103, 3205, 4505, 5627, -3024, 3710, -2507, -1450, -979, 9335, -3011, 3834, 7872, 1626, 1752, -863, -1183, -3477, 6202, 2792, -1444, 2101, -1301, -550, 3823, 1215, 2514, 6625, 2016, 2899, 376, 1649, 5389, 6590, 4001, -683, 2475, 1935, -4879, -1038, 1161, -158, 1692, -1535, 1080, -1444, 119, -7470, 2315, 1087, -4222, 11072, -1361, 999, 1403, 957, 1777, -589, -2844, -93, 1281, 41, 4554, 5297, 3083, 3002, 5345, 6707, -1307, 3903, 4078, 4123, -1271, 4557, 7112, 2053, -4145, 548, 914, 6896, 2895, -732, -2373, 1447, 1108, 2871, -2820, 2907, -735, 3577, 1021, 63, -4067, -102, 1484, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012765792780555785, 0.00018984111375175416, 0.00016063582734204829, 0.00013671055785380304, 0.00011181450827280059, 0.00015879490820225328, 0.00017509683675598353, 0.00014908800949342549, 0.00016547743871342391, 0.00020039668015670031, 8.2713799201883376e-05, 0.00017297998419962823, 0.00011612971138674766, 7.5575473601929843e-05, 0.00014346055104397237, 0.00021528384240809828, 0.00018499934230931103, 0.00017908940208144486, 0.00013515840691979975, 9.2903326731175184e-05, 0.00018903723685070872, 0.00018641946371644735, 0.00013275675883051008, 0.00012331191101111472, 0.00027079804567620158, 0.00014754165022168308, 0.00014160454156808555, 0.00013194042549002916, 0.0001083908136934042, 0.00014034716878086329, 0.00013445971126202494, 0.00019401186727918684, 0.00017306911468040198, 0.00013908452820032835, 0.0001158869345090352, 0.0001110131706809625, 0.0001608404127182439, 0.00015041489677969366, 0.00013133911124896258, 0.00012891061487607658, 0.00011993763473583385, 0.00019451809930615127, 0.00023036827042233199, 0.0001335895067313686, 0.00016960986249614507, 0.00012249936116859317, 0.00016580212104599923, 0.00015082770551089197, 9.953301923815161e-05, 0.00014891638420522213, 0.00011794399324571714, 0.00012158277240814641, 6.7072578531224281e-05, 0.00016598030924797058, 0.0001673057849984616, 0.00017108771135099232, 0.00018177965830545872, 0.00015350092144217342, 0.00022075252491049469, 0.00016447326925117522, 0.00019684078870341182, 0.0001459195336792618, 0.00017126933380495757, 0.00012501869059633464, 0.00012179477198515087, 0.00015888908819761127, 0.00010783773905131966, 0.0001172210686490871, 9.7310745331924409e-05, 0.00013873595162294805, 0.00011796844773925841, 0.00016418051382061094, 8.9275541540700942e-05, 0.00021826883312314749, 0.0001359473099000752, 0.00010751742229331285, 0.00014768844994250685, 0.00015033778618089855, 0.00016114124446175992, 0.00015150297258514911, 0.00011093213106505573, 0.00010648127499734983, 0.0002203736366936937, 0.00016960276116151363, 0.00016687456809449941, 0.00018005429592449218, 0.00019446724036242813, 0.00015854975208640099, 0.00020307485829107463, 0.00021774947526864707, 0.00015990863903425634, 0.00016711119678802788, 0.00015808221360202879, 0.00012100030289730057, 0.00018747065041679889, 0.00019050991977564991, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 2,46,-60,58,76,2,78,68,-6,-21,20,-96,58,127,-12,-28, 
  /* [1][0][][] */ 31,47,-30,-3,25,73,30,-127,64,-46,-45,-69,-10,-11,-71,-34, 
  /* [2][0][][] */ -24,-30,23,64,30,46,-90,127,-12,4,66,-59,-57,-47,-29,56, 
  /* [3][0][][] */ 86,-93,68,13,13,-7,-2,127,22,15,62,22,-18,72,49,-7, 
  /* [4][0][][] */ -55,-69,-17,56,-78,8,-8,-88,42,-15,30,-5,28,80,127,110, 
  /* [5][0][][] */ 93,7,-32,-37,-116,19,25,89,-31,-17,48,92,115,1,-127,18, 
  /* [6][0][][] */ 21,-14,-27,-12,-19,2,5,-36,-19,-54,-20,8,66,46,127,-7, 
  /* [7][0][][] */ -60,17,-21,-76,17,-26,-84,34,-97,74,-42,-45,-127,-26,-13,99, 
  /* [8][0][][] */ 53,71,76,-5,76,39,127,22,44,-39,53,1,-127,-29,-104,15, 
  /* [9][0][][] */ -30,54,51,-11,9,18,50,-6,1,28,-43,1,54,127,54,24, 
  /* [10][0][][] */ 102,70,-17,75,-6,2,47,-44,-25,-66,-64,-127,-112,-40,74,72, 
  /* [11][0][][] */ 59,30,7,-5,-37,-4,-5,101,-127,35,-31,-22,-5,-23,40,116, 
  /* [12][0][][] */ 4,11,-8,19,83,9,127,15,-59,20,0,-47,-2,89,-26,99, 
  /* [13][0][][] */ 69,22,-30,122,112,79,99,84,24,80,-127,-64,32,111,-48,-46, 
  /* [14][0][][] */ -127,97,21,-39,-11,-14,36,24,-52,71,116,4,-113,1,-58,41, 
  /* [15][0][][] */ -7,2,-127,-35,36,-37,-72,-36,-49,-21,-23,-64,34,-73,-36,56, 
  /* [16][0][][] */ 121,-16,-31,-30,11,-60,17,-15,-63,18,127,43,20,-21,-54,48, 
  /* [17][0][][] */ 41,43,-13,-57,18,-24,90,-127,-4,-22,-49,10,19,112,-6,24, 
  /* [18][0][][] */ 32,97,-23,-71,72,-68,-45,-30,-78,127,-1,3,-49,59,-63,30, 
  /* [19][0][][] */ -99,-103,104,-117,36,-119,-16,-17,31,70,105,127,-35,-4,46,-11, 
  /* [20][0][][] */ -1,112,46,10,-36,18,37,-25,51,-18,64,-64,-127,-21,-56,-32, 
  /* [21][0][][] */ -12,29,1,0,22,47,61,49,-127,38,-21,-4,-11,36,-78,12, 
  /* [22][0][][] */ 43,-58,24,35,31,-91,127,-4,8,-59,-39,-86,31,-30,-41,-61, 
  /* [23][0][][] */ -83,-111,45,95,43,-20,49,-64,59,-42,45,-14,-1,97,125,127, 
  /* [24][0][][] */ -5,-18,30,56,47,7,-57,-127,37,19,-25,34,21,-22,-40,-6, 
  /* [25][0][][] */ 25,81,8,-29,-27,-4,4,-67,-41,47,-68,-33,90,127,14,1, 
  /* [26][0][][] */ -85,83,33,19,13,-60,17,-31,40,14,24,127,27,-25,-81,104, 
  /* [27][0][][] */ 12,-109,-120,1,-99,106,2,-82,-36,-46,57,-65,28,-57,-127,-2, 
  /* [28][0][][] */ -18,23,18,80,7,20,-22,-127,-115,40,98,-8,86,18,-9,-25, 
  /* [29][0][][] */ -86,127,-45,-35,-34,35,-108,-95,-85,-54,9,-15,56,-67,-123,91, 
  /* [30][0][][] */ 121,117,-80,85,-24,-121,-56,-48,-70,12,-2,-127,97,3,-25,76, 
  /* [31][0][][] */ 71,15,-5,-20,-127,26,77,7,-20,-37,53,69,55,8,-36,-8, 
  /* [32][0][][] */ -8,-1,127,32,-24,109,52,-15,2,-37,-27,20,18,109,56,43, 
  /* [33][0][][] */ 31,64,-77,-2,-28,19,53,0,12,-49,-49,-108,26,127,-12,20, 
  /* [34][0][][] */ -127,-5,77,42,6,4,114,-32,-72,-14,-9,-62,23,82,-46,-10, 
  /* [35][0][][] */ -40,-8,-34,-11,-89,127,-54,21,-23,120,13,121,-119,85,16,47, 
  /* [36][0][][] */ -33,-49,127,-28,-57,37,-26,-27,30,13,-63,54,26,-81,-36,28, 
  /* [37][0][][] */ 113,5,7,-23,82,-86,-46,18,-95,127,-67,-22,-79,-51,77,9, 
  /* [38][0][][] */ 71,36,27,-54,14,-54,-76,8,-62,13,-95,-64,20,-127,-96,49, 
  /* [39][0][][] */ -35,39,-54,-22,-55,-63,58,-4,-127,4,19,32,38,-9,-13,29, 
  /* [40][0][][] */ 127,84,50,-89,-121,71,31,-57,25,-46,-66,-104,4,66,73,-22, 
  /* [41][0][][] */ 127,-33,-66,-17,28,-35,-62,-26,13,14,-5,-69,89,-79,33,-32, 
  /* [42][0][][] */ -5,-47,-69,108,-13,-105,-127,7,-2,1,-20,34,-64,68,-56,-13, 
  /* [43][0][][] */ -108,-64,-50,-127,-50,30,-12,102,27,-110,-24,40,-66,-16,-24,93, 
  /* [44][0][][] */ -36,55,18,-17,-27,-10,38,83,126,-127,26,59,101,32,8,4, 
  /* [45][0][][] */ 58,98,-110,95,127,-78,-55,-52,96,-65,39,-33,-59,23,-68,43, 
  /* [46][0][][] */ -29,-41,-6,-13,62,-12,52,40,-23,102,-25,-127,8,75,-41,89, 
  /* [47][0][][] */ 80,-43,-2,20,72,-10,-31,-92,22,103,-67,19,30,-127,-105,-30, 
  /* [48][0][][] */ 27,33,-7,-88,10,-25,93,-127,24,-13,-53,20,67,70,22,10, 
  /* [49][0][][] */ 16,126,-79,45,-8,-48,45,25,-1,7,59,-50,-24,64,127,-102, 
  /* [50][0][][] */ 33,73,-39,11,-127,10,-69,-84,36,72,18,16,-45,-42,-4,24, 
  /* [51][0][][] */ 117,-45,-48,-18,-93,127,-121,-8,42,-23,-49,85,-57,-73,-2,28, 
  /* [52][0][][] */ -74,-62,83,65,-90,-84,-64,-23,-16,-64,-68,-64,22,-127,-4,46, 
  /* [53][0][][] */ 14,103,41,-121,-49,127,97,-27,-44,-10,-9,-28,73,-105,-2,77, 
  /* [54][0][][] */ 69,127,8,-2,20,-86,-115,27,35,-43,-63,97,74,91,27,31, 
  /* [55][0][][] */ -64,-20,81,24,46,-5,127,74,-56,-16,-5,-6,85,34,-2,-30, 
  /* [56][0][][] */ 127,24,-8,15,-67,94,-80,-56,-34,38,-92,11,-83,110,-22,35, 
  /* [57][0][][] */ -4,-28,-59,-33,-44,-80,20,-15,-127,-13,58,36,6,18,-23,47, 
  /* [58][0][][] */ 17,-40,60,23,-8,-28,-4,27,39,-19,-127,-40,11,-32,-30,37, 
  /* [59][0][][] */ 85,24,-127,67,-4,3,58,-41,-85,-19,5,-79,-39,-66,-32,67, 
  /* [60][0][][] */ -37,27,8,11,-51,4,-17,20,-24,-72,56,127,-37,-74,-37,6, 
  /* [61][0][][] */ -48,-1,72,-112,-35,43,-9,127,-37,-46,77,91,36,-24,-17,97, 
  /* [62][0][][] */ 88,46,-36,-127,-25,-2,19,-36,-23,31,-28,36,29,-20,-104,-59, 
  /* [63][0][][] */ 26,-11,-23,23,-62,-36,-32,-17,-28,-31,-35,-15,127,22,82,-25, 
  /* [64][0][][] */ -52,-13,51,29,-127,-1,-6,-63,83,88,31,61,50,-70,-24,79, 
  /* [65][0][][] */ -36,11,-18,-5,-53,85,35,-20,63,-105,72,-60,20,67,-127,32, 
  /* [66][0][][] */ -102,43,-80,-87,2,-41,-127,-37,-96,103,67,12,-102,-59,-16,51, 
  /* [67][0][][] */ -5,-37,-110,-127,78,78,5,5,-42,7,67,-5,-2,32,-4,58, 
  /* [68][0][][] */ 28,3,17,-76,-37,45,-1,71,-73,101,127,1,-56,-58,-121,-9, 
  /* [69][0][][] */ 48,-76,29,-63,4,-65,-41,127,-23,86,91,86,-42,60,-44,22, 
  /* [70][0][][] */ 49,-22,69,30,105,-14,127,21,41,-3,-47,41,-46,74,-14,46, 
  /* [71][0][][] */ 2,28,52,-53,-127,-48,2,0,-28,-4,3,-71,-53,-12,-6,20, 
  /* [72][0][][] */ -58,-126,23,-127,96,-16,21,65,-65,25,-100,8,33,125,-78,117, 
  /* [73][0][][] */ -11,-4,41,-9,127,-35,-10,44,-24,78,-57,2,-106,-37,101,-5, 
  /* [74][0][][] */ -99,22,-44,3,63,36,-6,16,-11,-14,-127,-63,-58,23,-21,15, 
  /* [75][0][][] */ 77,-40,25,-53,15,2,-127,-3,-19,-86,61,12,-16,-20,-22,-6, 
  /* [76][0][][] */ -19,-29,-11,95,72,87,89,-76,69,-77,25,65,-16,-92,-127,42, 
  /* [77][0][][] */ -43,-43,114,-23,25,-48,-27,-127,3,23,25,109,61,2,12,4, 
  /* [78][0][][] */ -13,35,34,-16,20,-41,10,-33,49,-36,14,-102,-101,-74,-127,-71, 
  /* [79][0][][] */ -61,-87,-80,54,127,62,33,2,35,-10,-32,15,-25,0,-68,1, 
  /* [80][0][][] */ 28,-83,32,127,1,27,-77,56,41,4,30,-16,-115,84,28,41, 
  /* [81][0][][] */ 125,122,-67,95,-82,39,50,127,33,5,106,63,114,9,126,-60, 
  /* [82][0][][] */ -51,-7,10,-32,7,-94,-127,-48,24,63,-27,-5,-67,92,-38,-12, 
  /* [83][0][][] */ 84,-1,93,-63,-30,-9,-101,4,32,-127,43,-70,-46,6,34,-4, 
  /* [84][0][][] */ 43,-29,-109,29,47,18,41,13,-127,18,-103,-66,75,-60,-60,29, 
  /* [85][0][][] */ -26,16,31,-40,51,-9,21,-60,127,-19,9,-31,-18,-83,1,-39, 
  /* [86][0][][] */ 86,-49,127,51,38,-26,28,47,-37,-49,-95,-33,-7,1,-66,4, 
  /* [87][0][][] */ -3,8,27,-73,71,20,-25,33,39,-47,72,-34,-127,-104,-2,13, 
  /* [88][0][][] */ -66,-48,17,-3,12,29,-68,-45,3,7,-75,-127,-68,-14,-6,-13, 
  /* [89][0][][] */ -43,-18,10,-49,14,-22,-127,18,90,6,-53,4,-9,-64,-6,-21, 
  /* [90][0][][] */ -25,-9,-38,-97,127,29,-77,57,39,76,28,-13,10,20,-70,-22, 
  /* [91][0][][] */ -51,-61,-12,18,-45,-13,-25,70,-49,-22,23,-15,-36,38,-8,127, 
  /* [92][0][][] */ -22,100,-7,-8,-88,85,-127,39,-7,-18,36,-6,-55,115,71,4, 
  /* [93][0][][] */ -6,59,-61,-65,27,79,-109,20,30,73,60,32,-127,3,-27,67, 
  /* [94][0][][] */ -6,66,81,-8,-127,-25,-1,-8,4,21,28,15,-80,-5,-12,-20, 
  /* [95][0][][] */ 6,42,-12,20,14,-1,-92,45,47,14,-103,77,-17,-14,127,-51, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.001392749953083694, 0.0020711694378405809, 0.0017525394214317203, 0.0014915143838152289, 0.0012198979966342449, 0.0017324549844488502, 0.0019103091908618808, 0.0016265524318441749, 0.0018053613603115082, 0.0021863309666514397, 0.0009024088503792882, 0.0018872142536565661, 0.0012669769348576665, 0.00082452961942180991, 0.0015651568537577987, 0.0023487501312047243, 0.0020183457527309656, 0.0019538681954145432, 0.0014745803782716393, 0.0010135767515748739, 0.002062399173155427, 0.0020338392350822687, 0.0014483783161267638, 0.001345334923826158, 0.0029544108547270298, 0.0016096816398203373, 0.0015449076890945435, 0.001439472078345716, 0.0011825454421341419, 0.0015311897732317448, 0.0014669575029984117, 0.0021166724618524313, 0.0018881867872551084, 0.0015174143481999636, 0.0012643282534554601, 0.0012111554387956858, 0.0017547713359817863, 0.001641028793528676, 0.0014329117257148027, 0.0014064167626202106, 0.0013085214886814356, 0.0021221954375505447, 0.0025133213493973017, 0.0014574636006727815, 0.0018504462204873562, 0.0013364700134843588, 0.00180890376213938, 0.0016455326694995165, 0.0010859067551791668, 0.0016246800078079104, 0.0012867707991972566, 0.0013264699373394251, 0.00073176290607079864, 0.001810847781598568, 0.0018253086600452662, 0.0018665696261450648, 0.00198321882635355, 0.0016746973851695657, 0.0024084134493023157, 0.0017944058636203408, 0.0021475360263139009, 0.0015919844154268503, 0.0018685511313378811, 0.0013639559037983418, 0.0013287828769534826, 0.0017334823496639729, 0.0011765114031732082, 0.0012788836611434817, 0.0010616617510095239, 0.0015136114088818431, 0.0012870376231148839, 0.0017912120092660189, 0.00097399752121418715, 0.0023813163861632347, 0.0014831873122602701, 0.0011730167316272855, 0.0016112832818180323, 0.0016401875764131546, 0.0017580535495653749, 0.0016528997803106904, 0.0012102712644264102, 0.0011617123382166028, 0.0024042797740548849, 0.0018503686878830194, 0.0018206040840595961, 0.0019643951673060656, 0.0021216406021267176, 0.0017297802260145545, 0.0022155498154461384, 0.0023756502196192741, 0.0017446057172492146, 0.001823185826651752, 0.0017246793722733855, 0.0013201151741668582, 0.0020453077740967274, 0.0020784661173820496, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 4796, 2021, 5801, -3010, 7321, 10007, -9741, 15841, 15863, 1397, 4503, 15379, -27253, 12817, -4658, 17830, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.7625478550326079e-05, 4.9971065891440958e-05, 5.8250079746358097e-05, 4.9033264076570049e-05, 7.0829788455739617e-05, 5.5494452681159601e-05, 5.7557808759156615e-05, 5.3334711992647499e-05, 9.3380956968758255e-05, 5.8174729929305613e-05, 5.0730446673696861e-05, 4.5448883611243218e-05, 6.1616090533789247e-05, 8.8720313215162605e-05, 6.5650303440634161e-05, 6.0787195252487436e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -127,16,89,-22,-29,-4,-59,17,-74,-7,16,-54,29,28,108,-27,47,-11,43,-11,85,-7,95,17,49,4,-11,1,-42,-90,-74,-2,-3,-11,27,12,9,49,-15,-39,13,30,-80,-13,-9,-16,18,56,12,15,-54,-8,-11,-22,-8,-70,-67,48,-32,39,22,45,7,-4,-13,-9,-18,-7,-27,-66,-6,-12,4,11,7,-6,-1,1,-93,0,-24,28,63,-55,-8,79,-24,10,-18,-13,54,2,-65,-34,-74,-18, 
  /* [1][0][][] */ -6,21,76,-72,-47,-4,-9,37,-50,16,75,-65,5,9,-63,-82,48,-4,-88,13,61,-34,58,-13,18,-41,-10,-67,69,-111,127,-99,57,16,-21,65,15,102,2,-48,32,67,-77,-21,-48,86,-121,-80,-12,-39,22,-25,45,-69,-56,5,-32,41,-60,42,61,83,14,-119,-27,36,-92,-60,38,-70,-94,-25,-61,-11,71,-47,6,76,29,-48,3,-32,-113,8,72,25,-24,11,-69,21,19,58,-35,65,-47,63, 
  /* [2][0][][] */ 127,-18,-50,22,-8,-60,43,20,23,35,-21,35,-68,-10,-30,-46,-116,-30,-24,19,-40,-84,-70,29,-50,-53,-13,-14,-35,24,-12,87,-62,98,-29,-11,18,-53,-19,12,-81,65,61,-11,-85,26,-18,-19,15,-7,-16,-62,20,39,16,72,-18,-44,34,-13,12,-3,-33,10,70,-11,-15,-19,9,60,-7,17,30,33,7,21,37,-46,68,23,52,8,-32,-11,-42,-27,8,53,13,28,-45,-24,-51,37,-2,36, 
  /* [3][0][][] */ 12,-6,-60,-10,22,5,-14,14,-66,127,60,101,26,-14,-50,16,17,-55,16,7,42,116,57,-103,18,43,-32,-6,75,-9,75,-3,-8,63,-50,-25,71,67,30,27,-70,-7,-77,-11,-89,84,54,-49,18,-6,6,-13,44,-45,-40,-47,-26,85,-36,-12,32,5,-12,26,22,86,-76,-32,4,-25,31,-58,-47,-49,37,-11,7,3,-50,-23,10,-5,-62,-23,7,-21,32,-51,9,38,73,-28,1,-6,-45,54, 
  /* [4][0][][] */ 50,-2,-78,-21,5,7,-27,9,6,54,65,12,-18,-39,-4,-36,-5,-46,-26,43,-49,-88,34,71,-56,-17,-127,23,-38,-46,22,-3,-76,-16,37,21,14,23,-2,43,-24,-42,43,-11,-29,-11,-30,33,-27,27,-6,-7,31,3,-28,11,36,-49,0,7,13,-24,-4,38,-26,28,-42,15,-70,36,-47,41,42,-70,-20,-66,34,-26,-2,5,-19,82,-37,-2,-45,-24,21,-57,29,29,7,-24,-57,-15,6,27, 
  /* [5][0][][] */ -4,46,-42,-16,37,9,52,6,-12,58,-5,6,7,-21,-60,-51,-27,-66,6,8,-127,-63,-68,7,-75,9,60,2,15,-58,-15,50,38,100,-20,5,4,3,28,43,-36,87,8,-43,-22,92,34,-40,0,36,-17,7,5,31,36,-82,-1,-53,-51,-37,62,57,-17,-8,74,-46,-58,-50,-26,-24,-13,1,-24,29,-22,-23,16,-33,-3,-14,99,3,-10,-67,-76,-4,16,-4,1,39,-1,-14,-38,9,18,62, 
  /* [6][0][][] */ 68,-9,-105,15,-11,-75,71,127,-62,101,8,109,-105,-76,38,50,3,-75,4,2,0,-14,-26,-101,-46,59,51,-7,25,55,86,-44,22,50,16,-37,38,25,39,90,-35,23,-106,-61,-55,-1,-35,-11,60,-55,2,61,17,19,-20,-44,13,44,-1,13,-52,48,-36,15,22,47,-29,49,54,10,20,-39,-34,39,78,12,33,1,41,-28,25,-22,-61,60,-9,-30,24,-15,-15,61,69,28,-60,13,-30,116, 
  /* [7][0][][] */ 59,68,-38,-36,-43,-40,50,-39,-1,18,-60,-71,-29,19,-16,10,-71,-29,-19,45,-83,73,-36,53,-23,-11,39,33,43,6,49,-36,37,-1,-5,4,-34,-56,-1,35,-46,-41,41,-34,44,-68,19,3,-22,-92,-74,-39,-39,2,18,-9,39,-24,-77,31,-38,58,-11,-43,-17,-38,-10,31,-65,6,-86,53,24,41,-48,34,-38,27,33,-84,-51,-40,52,-47,4,-59,-21,25,-9,55,-127,22,91,-5,-26,12, 
  /* [8][0][][] */ 35,61,-82,38,-24,-14,-66,74,-90,28,7,46,-43,22,5,37,-10,-61,-9,-4,-3,-35,9,-26,-55,63,-8,14,-23,-10,-3,-16,-17,-17,-39,-67,23,15,26,51,3,-8,-3,-19,-71,2,9,-43,-4,2,42,33,-6,40,-42,89,-85,-4,-2,-36,6,-11,16,56,-16,-35,-32,-43,-14,1,18,9,-23,-40,-96,-21,-23,26,-32,-28,5,12,-54,-58,11,-33,14,33,18,60,-50,-31,-95,-127,19,-38, 
  /* [9][0][][] */ -45,11,-19,45,-42,-38,68,-14,16,-16,-42,48,-21,-16,39,127,7,58,63,4,3,37,20,-37,-4,-21,21,12,8,-34,16,38,-27,-40,14,-109,-15,-17,-26,-42,3,1,82,0,42,-38,-9,48,-9,42,8,-14,-45,-96,7,-6,46,-6,64,-24,-87,41,-81,-29,74,-39,-3,36,-85,40,14,15,3,76,-14,-13,-10,23,-44,-15,23,-44,73,13,13,-12,-12,-15,-69,6,-24,16,94,48,-39,-8, 
  /* [10][0][][] */ 92,-14,-18,18,-31,-26,73,-46,49,-48,-40,-23,-85,-22,1,17,-86,-33,21,9,-11,19,-17,48,-55,52,55,-27,-56,-76,-47,-17,43,-80,54,18,27,-68,66,127,9,-78,33,8,4,-113,-34,87,-12,46,-70,-56,-17,5,2,49,25,-70,56,59,-30,15,-66,-65,1,-72,24,68,-15,10,4,69,119,43,25,-69,26,-61,49,-43,-68,6,9,23,-65,-63,-10,43,-61,-17,-16,48,50,76,-23,-2, 
  /* [11][0][][] */ -22,-27,42,-23,16,-34,-1,-94,73,-75,-15,-42,22,31,-23,32,-98,42,51,23,-85,4,-109,-3,-20,1,-15,96,35,-91,13,-7,7,-20,16,-19,-62,19,-100,0,-35,44,30,87,59,-32,-68,16,-29,-67,-65,-49,10,21,72,-39,20,-103,50,-41,-61,-91,-62,-127,33,-109,109,60,80,61,74,0,-6,6,40,-2,105,40,28,-8,-3,11,-6,78,71,-75,-7,28,-56,-95,-109,31,108,51,68,60, 
  /* [12][0][][] */ 40,-20,-2,-34,55,88,-24,86,3,77,41,92,-14,23,17,-6,-18,18,20,50,127,14,83,-99,19,37,-90,-60,-25,85,8,12,39,22,12,-22,69,56,-8,-18,-13,28,7,29,-33,48,33,-24,-20,63,18,38,-31,-32,-9,18,-55,69,2,22,73,-55,60,-51,33,114,-32,-52,35,-30,76,17,-6,58,-14,37,7,38,-68,10,23,35,109,13,7,79,-19,-68,56,3,-13,50,18,10,-25,-70, 
  /* [13][0][][] */ 19,4,-10,-31,-28,-17,1,-26,35,-7,-19,-38,16,-46,-27,3,-23,-18,-52,-7,-127,-6,-3,68,-44,5,49,22,-4,-23,20,32,-19,-46,-48,62,-10,-40,6,-36,81,2,28,18,16,-63,-5,-7,30,-5,-47,21,-2,20,-11,56,34,-49,-20,-14,11,-13,-31,-36,5,15,-22,20,-33,-34,-48,-23,-24,-19,-23,-54,-79,9,35,42,5,53,18,-54,36,-11,12,-8,-17,-36,-62,13,-7,-2,-26,-20, 
  /* [14][0][][] */ 48,23,-99,-31,75,105,-75,48,3,25,79,64,28,-24,-52,-66,-72,18,19,127,-5,-28,19,2,-4,42,-57,74,25,27,-7,19,73,11,-48,13,31,59,57,68,29,42,9,3,-40,-17,60,-60,27,35,-11,-6,41,82,-43,53,-34,37,-86,-25,12,-80,-35,-56,14,0,-47,-44,-53,47,-7,17,-10,-7,-23,-42,36,-3,-43,-15,61,25,1,-33,0,47,-11,6,-23,41,40,3,2,-58,-40,-44, 
  /* [15][0][][] */ -98,-22,73,-28,-7,-45,-16,-123,35,-48,-25,7,15,-8,41,117,-95,-11,20,-49,-5,-19,-48,-24,21,-30,77,-40,-35,-105,-77,27,-43,16,87,-63,-72,-54,28,-63,-3,-44,67,33,61,-38,33,127,-75,-48,5,-35,-19,-3,26,-61,-36,-2,84,21,-66,5,-102,-25,-64,-51,21,43,9,-48,57,-15,55,-51,-9,-12,-1,7,38,-25,-61,57,42,53,-32,-16,-98,-4,-14,-67,-105,38,97,-5,-25,50, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0028740826528519392, 0.0021237703040242195, 0.0024756283964961767, 0.0020839136559516191, 0.0030102659948170185, 0.002358514117076993, 0.0024462067522108555, 0.002266725292429328, 0.0039686905220150948, 0.0024724260438233614, 0.002156043890863657, 0.0019315775716677308, 0.0026186837349087, 0.00377061334438622, 0.002790137892588973, 0.0025834557600319386, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1815, 1090, -5798, -1954, 3633, 964, 1688, 1157, 3419, -1340, 7762, -5090, -5214, 7638, 9797, -2027, 19828, -9497, -10190, -2454, -9720, -5708, -2809, 1582, -1474, -175, -3543, -2898, 2600, -13419, 624, 1352, 10663, 9307, -7520, -939, 1986, -2532, -4140, -3304, 2220, 3143, 1891, -8260, 6096, 19146, 1624, 9408, -6659, 8271, 2093, -7311, 534, 979, -1402, 8755, 4196, 2240, 13620, 2579, 2321, 3149, 2006, -7181, 3340, 1879, -1068, 3707, 2446, -1468, 8151, 4495, 10087, -6948, 1219, 9486, 600, 7246, 5718, 132, -1908, 7062, -3482, 8830, -464, -2118, -1288, -3173, 9256, -6421, 10200, 321, -3003, 233, -5553, 122, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00019266088202130049, 0.00017471819592174143, 0.00012311355385463685, 0.00022463178902398795, 0.00022626464487984776, 0.0002118556440109387, 0.00030718266498297453, 0.00031748777837492526, 0.00024866691092029214, 0.0001522149977972731, 0.00018883183656726032, 0.00018540237215347588, 0.00021688955894205719, 0.00014450307935476303, 0.00018070566875394434, 0.00020257871074136347, 9.6799340099096298e-05, 0.00015681204968132079, 9.0234862000215799e-05, 0.0001052274092216976, 0.00015062470629345626, 0.00021125924831721932, 0.00024837686214596033, 0.00024340357049368322, 0.00022141457884572446, 0.0002245082869194448, 0.00027862036949954927, 0.00015148082457017154, 0.00011321576312184334, 7.1707458118908107e-05, 0.0003030378429684788, 0.00021425499289762229, 0.00023553302162326872, 0.00012689061986748129, 0.00017551859491504729, 0.00017291509720962495, 0.00014251908578444272, 0.0001764972839737311, 0.0001353159750578925, 0.00022017344599589705, 0.0001495982869528234, 0.00023566636082250625, 0.00019901756604667753, 9.4697570602875203e-05, 0.00023736439470667392, 9.7590345831122249e-05, 0.00014289632963482291, 0.00022118545894045383, 0.00011004578846041113, 0.00010351723904022947, 0.00017958115495275706, 7.4588388088159263e-05, 0.00021378327801357955, 0.0001460552157368511, 0.0002063646970782429, 0.00017672886315267533, 0.00016309824422933161, 0.00024696526816114783, 0.00015193359286058694, 0.00012943186447955668, 0.00034616075572557747, 0.00018302685930393636, 0.00011570854985620826, 0.00012842963042203337, 0.00010407323861727491, 0.00030745286494493484, 0.00067131413379684091, 0.00021086278138682246, 0.00019413215341046453, 0.00013705022865906358, 0.00017571264470461756, 0.00016779734869487584, 0.00014046631986275315, 0.00013866827066522092, 0.00019097833137493581, 0.00011280243052169681, 0.00010028939868789166, 9.0349887614138424e-05, 0.00020668689103331417, 0.00012878546840511262, 0.00016113485617097467, 0.00012491158850025386, 0.00018028536578640342, 0.00013084770762361586, 0.00011533147335285321, 0.0001846327941166237, 0.00020637462148442864, 0.00022833260300103575, 0.00017174132517538965, 0.00017362281505484134, 0.00016123360546771437, 0.00033583983895368874, 0.0003592458670027554, 0.00023936985235195607, 7.4861389293801039e-05, 0.00014976132661104202, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 61,59,51,-26,-67,2,45,34,7,-65,-27,55,-1,13,3,-127,-127,93,57,23,51,47,98,74,50,-38,-33,-6,-56,90,32,-55,-91,-17,-22,127,-67,97,43,64,5,-32,35,96,-127,-52,-25,1,-14,-83,-6,-12,77,86,13,-18,-127,-62,-33,-41,-127,30,-106,-41,-78,59,119,6,-61,127,10,-8,-88,53,27,-5,-6,-71,-38,-4,48,-53,63,-86,29,-49,-15,-11,-127,30,-43,73,59,-17,54,-16, -56,-60,22,93,13,86,-79,-8,57,31,-82,48,-10,-3,-21,85,-115,17,51,102,12,-6,127,103,63,-65,9,-9,-38,91,-34,-127,17,91,45,60,-58,-7,18,-109,127,14,93,127,-16,-51,127,4,8,-58,-41,-44,-25,127,-12,-127,-10,25,-108,-27,10,-127,-36,94,-127,72,127,-4,3,105,127,-25,-127,75,-39,-52,21,-74,-53,125,-24,-28,127,-41,-19,-47,127,127,23,127,-76,3,30,6,121,-4, 0,-127,15,-11,-38,-11,-3,81,-14,64,-61,29,6,19,-33,-15,-115,74,29,111,127,71,32,106,38,-6,48,-19,-33,127,-56,-38,-20,-100,-20,64,-43,8,41,127,-17,30,22,73,-61,-83,-3,-62,42,-31,127,59,-66,64,15,-3,16,-60,-44,-127,-118,79,-127,11,-1,26,-7,-48,-18,33,-7,45,-67,-4,-44,33,3,-69,-77,5,-9,-127,44,-114,18,-15,9,27,-113,109,-27,3,38,66,73,-89, 
  /* [0][1][][] */ 33,17,95,109,-5,-60,102,0,-16,-127,-119,71,-16,-45,-55,-10,-74,24,85,-14,-69,13,-84,-35,45,1,-76,127,-127,105,127,66,40,10,46,112,-91,108,7,35,58,-127,30,81,17,-36,-6,-127,-127,-91,-64,36,127,-75,79,4,-106,-48,-85,25,10,-29,90,25,-54,-1,108,-127,-86,10,-63,-127,-98,127,127,-79,86,55,-84,-62,127,-26,13,122,10,-14,-29,-23,-42,18,-80,34,-4,-127,127,-87, -127,9,-74,127,-88,-127,-127,-127,59,31,5,21,-61,-127,8,72,-99,-127,127,127,-50,-127,-31,-4,-71,-14,18,126,-71,-2,-93,12,-57,87,127,-40,15,90,120,53,-35,-2,-23,19,34,-31,-94,49,-14,-87,-59,113,-15,2,17,-53,-4,-13,85,-44,16,-122,-54,127,-9,-127,13,123,-19,45,-123,-51,-14,60,-70,-127,127,116,127,-125,-78,21,-122,63,-93,-74,-2,91,23,90,-56,-127,-127,-50,41,127, 77,-36,86,-78,-39,-68,5,-3,-36,100,-86,100,68,-32,-90,30,-62,-2,31,-7,12,83,-65,-37,45,59,127,9,127,83,9,-66,21,-119,13,80,-127,38,-51,-20,-13,48,53,83,45,-98,-44,-80,104,-127,-119,107,95,-83,-127,27,106,-40,-127,44,-6,8,-63,59,115,-41,47,4,-120,71,-102,-72,-2,-77,-57,62,-41,-111,-69,-127,-123,-59,-101,127,-115,7,-1,-26,-93,-10,-127,42,11,103,19,-77, 
  /* [0][2][][] */ 77,-41,48,-35,18,54,12,50,-42,-80,71,104,6,-38,-127,54,-100,67,-3,50,92,57,56,-72,33,26,22,-33,-68,61,1,-14,-41,-127,1,12,35,27,76,80,-23,-42,-60,-67,-47,-97,6,-38,32,13,50,60,-83,-80,10,19,-43,-15,49,18,54,69,62,-58,-29,21,2,-4,33,3,-25,28,-5,11,22,-24,14,-100,-23,72,92,23,32,-94,127,104,-52,23,4,37,-25,7,27,-5,57,-104, -59,24,127,-30,127,64,-15,-27,-127,-15,-127,66,127,-18,-85,-2,-47,50,54,-48,101,32,16,-127,127,-89,4,17,-36,103,-18,-11,-127,-50,47,126,84,127,70,-127,-38,-25,-127,2,-68,-127,-42,-14,7,-87,-8,127,11,-65,-22,-78,-35,127,-19,86,27,-53,103,47,-59,27,10,68,127,-43,-35,57,-30,25,-50,-116,21,-127,-3,-43,-33,-38,-8,-121,72,127,3,37,111,85,28,56,7,-36,63,-107, 86,10,8,-50,-64,48,-7,66,-84,59,43,127,64,-23,-63,-37,-54,125,19,124,121,60,-28,-67,12,127,38,29,-10,95,-18,-48,-13,-92,10,-40,42,-63,127,24,-23,-41,-27,17,-34,-28,-59,-78,103,30,-48,97,-5,-43,5,35,-31,27,-49,90,25,100,41,-1,103,4,-6,-90,62,5,-11,16,59,34,-37,-69,-39,-98,6,89,10,5,64,-81,53,65,-23,-3,-90,-21,0,13,54,11,-25,-110, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0081880874931812286, 0.0074255228973925114, 0.0052323257550597191, 0.0095468508079648018, 0.0096162473782896996, 0.0090038646012544632, 0.013055263087153435, 0.013493230566382408, 0.010568344034254551, 0.0064691375009715557, 0.008025352843105793, 0.0078796008601784706, 0.0092178061604499817, 0.0061413808725774288, 0.0076799909584224224, 0.0086095947772264481, 0.004113971721380949, 0.0066645117476582527, 0.0038349814713001251, 0.0044721649028360844, 0.0064015500247478485, 0.0089785177260637283, 0.01055601704865694, 0.010344651527702808, 0.0094101196154952049, 0.009541601873934269, 0.011841366067528725, 0.006437934935092926, 0.0048116696998476982, 0.0030475668609142303, 0.01287910807877779, 0.0091058369725942612, 0.01001015305519104, 0.0053928513079881668, 0.0074595403857529163, 0.0073488913476467133, 0.0060570612549781799, 0.0075011346489191055, 0.0057509290054440498, 0.0093573713675141335, 0.0063579273410141468, 0.010015820153057575, 0.0084582464769482613, 0.0040246467106044292, 0.010087986476719379, 0.0041475896723568439, 0.0060730939731001854, 0.0094003817066550255, 0.004676945973187685, 0.0043994826264679432, 0.0076321987435221672, 0.0031700064428150654, 0.0090857893228530884, 0.0062073464505374432, 0.0087704993784427643, 0.0075109764002263546, 0.0069316751323640347, 0.010496023111045361, 0.0064571774564683437, 0.0055008539929986, 0.014711831696331501, 0.007778641302138567, 0.0049176132306456566, 0.0054582590237259865, 0.0044231126084923744, 0.013066746294498444, 0.028530851006507874, 0.0089616682380437851, 0.0082506164908409119, 0.0058246343396604061, 0.0074677872471511364, 0.0071313870139420033, 0.0059698182158172131, 0.0058934013359248638, 0.008116578683257103, 0.0047941030934453011, 0.0042622992768883705, 0.0038398702163249254, 0.0087841926142573357, 0.0054733823053538799, 0.0068482314236462116, 0.005308742169290781, 0.0076621281914412975, 0.0055610272102057934, 0.0049015874974429607, 0.0078468937426805496, 0.0087709212675690651, 0.0097041353583335876, 0.0072990064509212971, 0.0073789693415164948, 0.006852427963167429, 0.01427319273352623, 0.015267948620021343, 0.010173218324780464, 0.003181608859449625, 0.006364856380969286, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7365, 4151, -132, -2136, 7314, 9303, 8351, 6245, 1071, 9251, 2076, -4176, 3563, 4256, 4479, 2755, 1685, 7016, 546, -474, 2311, 10753, 3506, -2920, -2480, -964, 6933, -806, 2206, 775, 23760, -1057, 11314, 6664, 4148, -3053, 527, -2720, -652, 2629, 2722, 3474, 1052, 215, 2008, 1403, 3638, 10172, 2183, 2313, 3648, 6249, -2918, -58, 1600, 4758, 2471, 3992, 10016, 2211, -4515, 8811, 3844, 4741, 3949, 7971, -12029, 2847, 5616, -1067, 4860, 1604, 5351, 1854, 5165, 2589, 716, 3893, 2387, 3698, 7258, 2880, 7279, 789, 1514, 6166, 1607, -1802, 34163, -936, -438, -2888, 5481, 5322, -456, -1144, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.9222510471008718e-05, 9.4066825113259256e-05, 0.00016732784570194781, 0.00015801048721186817, 9.3079172074794769e-05, 8.0952733696904033e-05, 0.00010478076728759333, 8.8402222900185734e-05, 0.00012168082321295515, 7.9707548138685524e-05, 0.00015727980644442141, 0.00011553343938430771, 0.00013522311928682029, 0.00012315613275859505, 8.611595694674179e-05, 9.1198809968773276e-05, 0.00017031091556418687, 9.5743147539906204e-05, 0.00012423531734384596, 0.0001198947720695287, 0.00017866739653982222, 8.2221507909707725e-05, 0.00016093532030936331, 0.00013666211452800781, 0.00017063366249203682, 0.00012546617654152215, 9.6574774943292141e-05, 0.00014690717216581106, 0.00011554039519978687, 0.0001283458259422332, 4.2074887460330501e-05, 0.00020015097106806934, 8.6573891167063266e-05, 9.9212084023747593e-05, 0.00012791965855285525, 0.00015278719365596771, 0.00016525399405509233, 0.00016638483793940395, 0.00013022212078794837, 0.00014134810771793127, 0.00016582537500653416, 0.00013978312199469656, 0.00022439473832491785, 0.00017254492559004575, 0.00019780748698394746, 0.00017516611842438579, 0.00013363247853703797, 7.8478216892108321e-05, 0.00018242579244542867, 0.00015931935922708362, 0.00015283992979675531, 9.7981261205859482e-05, 0.00012587940727826208, 0.00020246485655661672, 0.00016002483607735485, 0.00010460933845024556, 0.00015054602408781648, 0.00013848174421582371, 8.2588085206225514e-05, 0.00015788570453878492, 0.00010853120329556987, 8.963086293078959e-05, 0.00014326800010167062, 0.00013544138346333057, 0.00013813633995596319, 8.1063975812867284e-05, 6.1183978687040508e-05, 0.00018859580450225621, 0.00012224537204019725, 0.00018217995238956064, 0.00014245630882214755, 0.00011097963579231873, 0.00010700536950025707, 0.00016284659795928746, 0.00013020918413531035, 0.00014329087571240962, 0.00010102305532200262, 0.00012158462777733803, 0.00016791404050309211, 0.00017193965322803706, 8.9518725872039795e-05, 0.00012680784857366234, 0.0001119706139434129, 0.00014698435552418232, 0.00015957119467202574, 0.00011682690092129633, 0.00011954872752539814, 0.00013587108696810901, 3.0372291803359985e-05, 0.0001256966934306547, 0.00017279951134696603, 0.00011433124745963141, 9.306953870691359e-05, 0.00011082954006269574, 0.00020122005662415177, 0.00016660364053677768, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -23,-19,17,26,-7,-17,-44,-22,127,-59,6,-76,46,-61,80,-110, 
  /* [1][0][][] */ -127,16,-109,-60,-50,22,5,110,-109,31,27,-5,32,76,12,120, 
  /* [2][0][][] */ 2,-58,-73,-71,-11,-97,-86,-7,-116,83,96,22,-4,-40,-127,68, 
  /* [3][0][][] */ -26,-57,36,-4,-20,36,-41,-116,25,-6,0,-92,-11,-26,-127,-24, 
  /* [4][0][][] */ 121,13,-32,15,-93,-20,-96,-33,24,44,-25,28,48,17,-31,-127, 
  /* [5][0][][] */ -74,62,-2,-54,116,-43,-32,-76,101,-16,-79,4,54,-102,-127,-67, 
  /* [6][0][][] */ -18,-66,-28,9,-52,38,27,14,-6,-69,127,-18,23,24,-59,59, 
  /* [7][0][][] */ 30,127,38,-51,33,83,30,-117,24,-18,-43,-54,56,88,19,9, 
  /* [8][0][][] */ -118,-45,83,-44,34,-5,59,84,-28,-6,-115,-115,34,3,-99,-127, 
  /* [9][0][][] */ 29,9,-20,-32,-40,-96,-125,-26,-26,33,127,18,-99,-85,-24,37, 
  /* [10][0][][] */ -63,-127,11,-52,-44,26,44,-4,-7,-59,-15,11,9,21,-78,24, 
  /* [11][0][][] */ 82,20,-2,81,-127,8,38,-57,92,113,-37,77,44,-31,10,102, 
  /* [12][0][][] */ -83,-59,127,4,43,2,36,17,59,-43,8,54,26,-4,-101,12, 
  /* [13][0][][] */ 38,49,-49,3,15,16,127,22,-82,63,37,-1,-45,105,69,-67, 
  /* [14][0][][] */ 127,-102,89,-38,-17,-35,70,92,74,66,76,7,14,-2,84,-81, 
  /* [15][0][][] */ 44,127,-20,-83,-30,124,-69,45,-103,-55,-20,-10,-72,113,-31,-74, 
  /* [16][0][][] */ -89,67,127,-45,-7,96,64,-7,13,-1,-18,78,93,-62,105,63, 
  /* [17][0][][] */ -16,17,-32,-81,-20,-64,-75,-39,-127,19,-13,93,-123,-41,60,-26, 
  /* [18][0][][] */ -115,22,-72,-68,111,94,-43,-83,-47,108,103,30,16,127,-47,73, 
  /* [19][0][][] */ 73,111,124,127,49,-63,20,-80,42,118,-1,111,79,27,-56,81, 
  /* [20][0][][] */ 95,-6,-76,-27,-86,-53,-61,31,-127,6,-104,-16,72,-10,-52,-6, 
  /* [21][0][][] */ -37,-34,-53,52,-74,11,-127,35,-88,-6,41,19,-51,51,-74,-2, 
  /* [22][0][][] */ -9,13,1,-57,127,19,43,-27,98,27,43,-38,4,-43,-53,63, 
  /* [23][0][][] */ -108,41,-4,-31,-36,16,124,47,-36,127,13,25,-3,-5,-96,-76, 
  /* [24][0][][] */ 55,-69,-46,-52,71,10,-33,-54,-92,43,44,-2,-31,78,-127,-13, 
  /* [25][0][][] */ 127,-46,79,29,-107,20,-16,78,110,-4,-54,-41,119,-115,91,106, 
  /* [26][0][][] */ -28,83,86,42,96,126,-44,96,-3,127,92,111,46,-73,71,15, 
  /* [27][0][][] */ -57,40,-25,51,-29,115,16,-127,48,-35,54,0,68,-98,114,111, 
  /* [28][0][][] */ -21,66,-119,-98,14,-55,44,-127,-107,48,-69,33,-12,111,1,47, 
  /* [29][0][][] */ 112,127,-42,49,-27,49,16,-102,95,29,-5,81,-76,11,3,24, 
  /* [30][0][][] */ -21,74,-127,54,50,18,64,-21,-11,3,-61,-34,43,93,33,109, 
  /* [31][0][][] */ 40,14,15,31,19,-10,-74,6,-39,-8,41,-61,-79,74,52,127, 
  /* [32][0][][] */ -49,6,-34,12,-72,13,-15,73,1,-127,32,-62,-14,12,23,-3, 
  /* [33][0][][] */ -114,24,58,98,80,-3,-79,31,-72,4,22,7,-40,9,6,127, 
  /* [34][0][][] */ -35,15,-69,-78,97,37,14,79,28,23,-25,-84,-7,-26,-26,127, 
  /* [35][0][][] */ 87,16,27,-23,-6,21,-86,-44,-10,-127,-59,26,-43,-58,34,-38, 
  /* [36][0][][] */ 15,77,-86,-42,54,127,7,49,-30,6,55,59,33,14,-96,61, 
  /* [37][0][][] */ 77,-2,34,-58,18,-127,-11,2,-85,44,-22,14,3,96,122,54, 
  /* [38][0][][] */ -83,118,14,-74,38,21,82,-68,47,32,-97,74,-55,-127,-97,72, 
  /* [39][0][][] */ 79,42,-107,-95,40,28,-62,-22,65,58,-1,-28,-10,56,-127,-96, 
  /* [40][0][][] */ -25,35,-74,-50,-11,36,35,-127,-27,1,-16,-13,20,85,-3,30, 
  /* [41][0][][] */ -19,-56,8,85,10,-36,-85,-22,-9,-49,39,-29,-127,-38,-26,-47, 
  /* [42][0][][] */ -59,61,11,-127,7,5,8,8,1,40,-13,47,55,-15,-48,-46, 
  /* [43][0][][] */ -2,38,20,54,127,39,55,-18,45,-11,-31,-81,-61,-18,0,-20, 
  /* [44][0][][] */ 25,12,39,7,13,51,-47,56,19,24,26,-59,127,46,-25,-81, 
  /* [45][0][][] */ -12,-127,-27,37,-8,-73,37,29,50,-103,11,1,-31,50,43,-15, 
  /* [46][0][][] */ -11,-127,15,41,-37,-19,-106,87,5,-60,76,-25,23,28,85,99, 
  /* [47][0][][] */ -40,-17,46,107,-6,46,60,28,79,-34,-127,-68,83,11,-47,-13, 
  /* [48][0][][] */ 12,52,-23,16,13,48,54,-127,58,-45,17,-31,42,-61,18,-31, 
  /* [49][0][][] */ -64,-12,90,-19,22,-7,92,127,-11,-16,-15,37,-22,48,-31,52, 
  /* [50][0][][] */ 0,-18,5,31,67,-49,-26,9,-34,26,-60,15,28,-52,-127,-34, 
  /* [51][0][][] */ -53,96,-23,86,-23,-1,-67,-110,-127,-11,-3,-13,10,58,-22,120, 
  /* [52][0][][] */ -121,24,52,-2,42,47,56,-39,38,-65,-60,-67,-84,-38,-127,-30, 
  /* [53][0][][] */ 2,-15,-16,-127,-72,40,-1,27,18,-119,-39,108,28,60,20,65, 
  /* [54][0][][] */ -18,-77,-17,-2,-24,-21,47,-22,-46,-127,27,52,10,0,-74,54, 
  /* [55][0][][] */ -3,-74,-21,18,69,-51,21,65,-21,-17,-127,-39,60,-17,-61,11, 
  /* [56][0][][] */ 12,7,-69,12,-65,62,-127,28,18,53,-48,-9,49,-91,16,-39, 
  /* [57][0][][] */ -29,36,46,-10,91,46,67,0,-17,53,-24,-13,4,44,-127,-63, 
  /* [58][0][][] */ 29,53,28,-4,63,18,-61,-77,91,-127,-89,-15,-95,-21,-48,10, 
  /* [59][0][][] */ -51,30,-11,-1,-34,55,-60,-20,38,127,-16,59,3,33,-21,57, 
  /* [60][0][][] */ 59,3,-26,5,-112,-60,127,-85,-16,-25,-20,55,67,37,44,48, 
  /* [61][0][][] */ 24,47,-54,12,-26,2,-127,-63,4,-12,70,119,36,-32,103,10, 
  /* [62][0][][] */ 12,-31,32,-38,-81,7,103,76,-127,57,-18,25,80,-10,61,46, 
  /* [63][0][][] */ 32,-108,-24,-1,-85,11,39,-28,17,-1,-22,-46,-41,110,127,-13, 
  /* [64][0][][] */ -1,57,-122,23,37,33,56,-18,3,-36,6,-34,19,-22,-50,127, 
  /* [65][0][][] */ 8,27,88,59,49,18,83,33,17,-42,-114,-127,84,99,-49,-10, 
  /* [66][0][][] */ -110,-102,79,-127,-97,-108,67,-111,-78,-95,3,108,35,1,-101,51, 
  /* [67][0][][] */ 36,-60,-127,28,-67,60,-18,-88,-9,12,-47,-107,-18,-17,-55,8, 
  /* [68][0][][] */ 127,32,-21,-13,-75,-28,-64,-11,-90,-11,-7,3,-5,-42,51,-22, 
  /* [69][0][][] */ 35,21,60,-13,-7,-39,-7,33,23,127,7,45,0,40,72,-47, 
  /* [70][0][][] */ 37,-44,-36,70,-57,29,-16,-25,127,49,23,22,-7,-47,-31,12, 
  /* [71][0][][] */ 64,-78,96,126,-71,-19,62,-1,111,-9,-41,-27,86,-127,-70,26, 
  /* [72][0][][] */ -15,-3,94,121,78,41,-81,59,84,-42,11,4,-38,-35,-127,77, 
  /* [73][0][][] */ 25,36,3,-127,78,-22,-91,34,-52,115,6,-17,-22,-31,0,-45, 
  /* [74][0][][] */ 127,-21,2,57,-120,-77,20,-39,-52,-40,38,-87,22,-74,30,28, 
  /* [75][0][][] */ 39,98,-92,1,33,22,10,-1,-49,-46,55,37,-127,10,33,29, 
  /* [76][0][][] */ -65,-40,-56,-61,-107,15,100,-18,-62,50,127,51,-62,-126,-44,127, 
  /* [77][0][][] */ -11,118,-44,-17,-127,-91,26,96,42,-33,61,103,-43,35,28,93, 
  /* [78][0][][] */ 127,5,-23,34,-59,28,-126,11,-33,-8,-71,-17,-7,-24,30,43, 
  /* [79][0][][] */ -12,-15,98,7,16,-83,-35,-30,-47,46,-4,-25,-34,127,-4,58, 
  /* [80][0][][] */ 32,93,46,-127,-71,79,97,8,69,-20,0,-16,111,-43,-26,-43, 
  /* [81][0][][] */ 48,-73,45,-100,127,75,21,108,119,37,-37,-51,6,26,-93,-83, 
  /* [82][0][][] */ 71,0,29,15,61,-127,-2,20,-51,55,0,22,-46,-14,45,-125, 
  /* [83][0][][] */ 30,127,59,8,94,70,57,87,17,56,-37,-76,3,124,32,-111, 
  /* [84][0][][] */ -45,-127,8,127,-1,-71,-35,3,-55,27,-124,23,-40,56,30,17, 
  /* [85][0][][] */ -69,65,-18,1,-31,-54,-10,-103,13,-5,-25,-74,-77,-113,-127,54, 
  /* [86][0][][] */ -9,116,112,96,93,-37,73,45,-16,26,33,-70,39,127,-127,-40, 
  /* [87][0][][] */ -10,10,117,-32,-127,-68,29,-5,27,-62,13,37,-46,-13,-19,-39, 
  /* [88][0][][] */ -81,-127,-104,0,50,-17,-22,41,-58,-60,-70,-73,84,-4,-41,32, 
  /* [89][0][][] */ 99,47,17,-127,-6,-70,-50,31,116,-39,57,-102,4,-16,35,-96, 
  /* [90][0][][] */ -62,63,26,-17,-46,48,97,105,-12,-66,-1,127,67,-15,-73,100, 
  /* [91][0][][] */ -13,70,20,94,127,71,-58,-106,1,41,-91,38,-73,6,-51,-54, 
  /* [92][0][][] */ -106,19,4,-50,-90,-47,-23,5,-104,22,127,86,-19,-75,-5,-2, 
  /* [93][0][][] */ 36,-16,56,7,-90,-127,53,89,-95,-104,-19,-31,24,-19,-14,35, 
  /* [94][0][][] */ -51,-99,36,-127,-47,21,5,16,77,-37,44,72,-1,12,-17,55, 
  /* [95][0][][] */ -32,-54,-14,-86,127,91,-73,56,60,46,-50,68,2,84,-75,-13, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.001500459504313767, 0.0014224944170564413, 0.0025303598958998919, 0.0023894612677395344, 0.0014075589133426547, 0.0012241809163242579, 0.0015845124144107103, 0.0013368333457037807, 0.0018400779226794839, 0.0012053509708493948, 0.0023784118238836527, 0.0017471160972490907, 0.0020448667928576469, 0.0018623878713697195, 0.0013022599741816521, 0.0013791237724944949, 0.0025754703674465418, 0.0014478439697995782, 0.0018787073204293847, 0.0018130689859390259, 0.0027018385007977486, 0.0012433674419298768, 0.0024336909409612417, 0.0020666276104748249, 0.0025803509633988142, 0.0018973207334056497, 0.0014604199677705765, 0.002221554983407259, 0.0017472213367000222, 0.0019408672815188766, 0.0006362635176628828, 0.0030267166439443827, 0.0013091849396005273, 0.0015003018779680133, 0.0019344226457178593, 0.0023104737047106028, 0.0024989987723529339, 0.0025160994846373796, 0.0019692408386617899, 0.0021374898497015238, 0.0025076393503695726, 0.0021138240117579699, 0.0033933350350707769, 0.0026092533953487873, 0.0029912781901657581, 0.0026488916482776403, 0.002020812826231122, 0.0011867608409374952, 0.0027586736250668764, 0.0024092542007565498, 0.0023112711496651173, 0.0014816891634836793, 0.0019035696750506759, 0.0030617075972259045, 0.0024199225008487701, 0.0015819200780242682, 0.0022765824105590582, 0.0020941442344337702, 0.0012489109067246318, 0.0023875741753727198, 0.0016412271652370691, 0.0013554129982367158, 0.0021665228996425867, 0.0020481674000620842, 0.0020889209117740393, 0.0012258631177246571, 0.00092523440252989531, 0.0028519774787127972, 0.0018486151238903403, 0.0027549560181796551, 0.0021542483009397984, 0.0016782527090981603, 0.0016181531827896833, 0.0024625936057418585, 0.0019690452609211206, 0.0021668686531484127, 0.0015276876511052251, 0.0018386231968179345, 0.0025392244569957256, 0.0026001003570854664, 0.0013537172926589847, 0.0019176095956936479, 0.0016932385042309761, 0.0022227221634238958, 0.0024130623787641525, 0.0017666760832071304, 0.0018078360008075833, 0.00205466547049582, 0.00045929491170682013, 0.0019008065573871136, 0.002613103250041604, 0.0017289363313466311, 0.0014074132777750492, 0.0016759829595685005, 0.0030428834725171328, 0.0025194082409143448, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -29298, -2566, 15472, -8636, 1283, -13367, 20844, -7467, 15563, -10014, 19647, 13995, -6559, -26947, -5089, 1909, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.0887748734094203e-05, 5.4876320064067841e-05, 5.0145023124059662e-05, 5.7676490541780367e-05, 8.3984486991539598e-05, 0.00015513418475165963, 7.0720649091526866e-05, 6.0881597164552659e-05, 7.783628097968176e-05, 9.8635806352831423e-05, 7.0508001954294741e-05, 8.8623564806766808e-05, 6.3544845033902675e-05, 0.00010404107888462022, 7.1353460953105241e-05, 5.8905043260892853e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 53,7,-19,-14,-4,-80,17,1,-43,-39,14,13,41,-57,59,25,-82,-45,17,3,102,60,-85,62,-4,73,111,94,15,49,45,-3,-16,-4,7,-38,17,4,-12,16,67,14,30,3,-49,-50,-27,-30,54,-43,27,-11,-86,24,28,-5,47,-43,17,-1,-34,89,-23,9,1,0,105,108,-28,-28,17,76,15,41,-11,18,33,7,37,45,-63,42,24,18,-95,-22,0,25,15,-26,-94,-29,34,50,127,28, 
  /* [1][0][][] */ 35,3,-79,-31,-25,-48,42,-43,-59,-49,-69,-8,-24,-25,-2,-37,-15,-30,-8,15,0,-58,105,-12,15,-3,36,41,-23,18,-23,1,-20,13,17,12,-50,44,-26,40,36,37,54,8,64,-43,-12,69,-69,-55,53,-118,-18,21,45,31,2,42,-90,-15,-42,17,-11,16,32,11,47,31,-58,-127,17,15,12,68,3,43,-38,-38,68,-3,7,7,51,-35,-41,-72,-16,25,-38,-23,18,44,55,-39,-22,54, 
  /* [2][0][][] */ -21,-19,10,10,1,59,-51,61,-53,-2,21,-3,15,-24,-21,13,30,13,-127,20,-27,-42,-2,32,-17,-3,-68,-8,-59,-39,-9,91,-16,-9,-6,-3,-51,23,-11,-49,64,54,50,9,21,38,15,10,-119,43,23,16,-30,20,-1,-69,-21,10,63,8,-59,-41,4,25,58,-28,-57,-33,-57,13,-30,-86,-19,30,13,56,-62,-6,-44,-62,7,14,29,-11,27,-37,-39,-49,-53,-32,-27,85,2,-70,82,-30, 
  /* [3][0][][] */ 54,-24,-11,-127,-18,-34,92,6,5,82,-68,32,21,-28,-30,36,46,24,9,60,-52,40,23,52,-20,59,64,-37,-25,-28,-41,58,18,-10,48,-47,-3,-37,2,32,22,15,30,2,65,-74,20,38,25,-44,17,-45,62,51,2,-21,-34,6,-33,-53,-56,61,92,13,4,7,73,11,-77,-22,-28,33,27,-42,12,-63,28,-31,68,20,-66,-52,-20,-26,-27,-44,63,66,-77,21,-54,15,16,-50,-18,17, 
  /* [4][0][][] */ -59,94,36,19,1,-13,-20,-10,-30,-43,57,-10,33,60,25,-14,11,-68,-34,-10,39,11,-79,43,-33,-33,4,17,-65,104,-84,-27,11,-65,4,14,75,55,-68,-31,21,57,37,-36,-50,5,71,-27,-2,-27,-47,13,-60,18,79,-13,17,94,-43,28,-127,-36,11,14,68,29,-26,47,-47,-50,30,28,9,32,47,81,-10,16,-24,19,13,68,32,-4,48,-10,-51,-57,-73,-1,-86,8,-39,-4,66,-77, 
  /* [5][0][][] */ -26,-15,13,-1,-12,-27,-13,19,14,-3,-21,18,-25,-22,1,-19,-12,39,-49,-21,-21,11,15,1,33,-38,48,-24,-6,15,14,48,9,-53,14,18,-22,-18,-29,-7,-22,43,-13,7,-7,20,-54,53,-19,19,37,-24,32,-46,5,4,-14,-31,12,-14,18,36,39,47,-32,7,113,-10,-22,-42,20,-3,16,11,23,2,-12,-7,127,15,-20,-10,-9,21,24,22,1,77,-11,2,-16,45,16,-41,-42,29, 
  /* [6][0][][] */ -26,-40,46,9,-72,108,-58,-18,-30,-104,-90,99,-6,15,-54,65,19,32,50,-14,-50,-42,-21,-36,35,-50,-5,34,-111,51,-15,-20,25,86,10,-32,-28,-2,5,-51,-19,57,55,18,28,25,-31,-3,5,27,-50,-127,33,1,-21,-40,-1,6,11,-21,-17,-23,46,10,59,-40,-76,-82,-95,36,13,-115,-24,-47,27,-79,62,-11,-72,26,-31,62,-10,-59,79,-44,-13,22,-99,64,-61,94,81,-28,46,-50, 
  /* [7][0][][] */ -37,-16,-42,55,-27,34,15,-23,-95,-4,95,-15,-7,-47,4,17,18,0,-38,-32,-53,-23,-46,-78,50,35,-34,57,5,23,-19,-9,-53,-113,-20,127,10,3,-48,15,-13,6,-37,-74,-10,70,46,61,-4,45,-7,23,14,-29,47,-32,4,24,-41,11,38,-22,-11,-58,52,-78,118,-42,-23,-36,74,-3,-54,-37,-78,-19,31,-20,115,-42,23,-17,-27,-28,58,45,-43,41,9,17,7,33,19,-59,77,3, 
  /* [8][0][][] */ -8,-56,-3,-1,-30,-17,38,40,-12,-16,20,112,17,21,-68,-30,45,-5,1,45,-12,-36,-25,37,-23,-31,68,-18,-52,21,43,5,2,-2,21,-9,-37,-27,43,-54,-1,71,92,-68,1,-22,19,16,8,-16,68,-13,-16,18,-44,-5,-53,107,-84,-46,-33,-55,-9,-18,-71,-23,-29,33,-61,-14,22,-26,-36,-127,39,-103,14,26,-56,7,-66,-10,-9,59,67,-87,-60,54,-74,77,7,-2,-32,-39,4,-58, 
  /* [9][0][][] */ -27,-40,-16,25,-15,44,-24,0,-39,4,73,21,-15,40,37,-49,38,54,-6,-29,-7,32,-4,-27,-23,15,5,39,45,-14,0,-15,-17,-26,14,84,-22,-17,12,12,-12,-19,-14,-4,-12,45,-9,42,-30,-6,-1,52,122,18,-24,-25,18,-20,33,18,-23,12,52,35,-1,-2,62,-3,54,14,-21,53,16,-127,-20,-120,-29,-16,33,2,10,10,21,-36,28,27,-36,-25,20,117,23,7,23,26,-3,22, 
  /* [10][0][][] */ 26,63,11,15,14,27,-48,-62,45,19,-57,-1,-3,17,-20,-49,-46,-5,7,-27,41,-29,-35,-62,-20,2,-102,68,-19,44,-1,19,4,10,-44,29,29,-9,-10,15,26,-25,34,-68,-61,9,4,-21,56,-2,-9,8,-18,-10,19,45,7,-14,-11,32,26,-73,-22,-20,-22,-30,-78,-71,-25,-27,44,-45,-36,26,14,12,38,-7,-77,12,12,39,-19,-24,-8,7,-60,-127,2,34,4,-5,45,-58,31,15, 
  /* [11][0][][] */ -29,-11,19,28,-42,14,27,-41,60,-20,-9,-62,10,-7,11,5,-16,62,18,-52,-3,8,32,-72,11,9,39,-2,35,-36,-21,18,17,57,-63,35,15,-4,32,3,-31,38,-47,-10,-26,40,-2,8,42,-17,-14,12,20,21,-33,90,9,-11,11,3,48,-14,-17,-72,-14,-49,-121,-127,48,-5,-64,-22,45,12,-1,-16,3,37,-75,-30,12,-3,-13,-22,-11,0,59,69,25,-29,15,-2,2,-15,42,47, 
  /* [12][0][][] */ -5,23,-51,-19,-4,-13,15,87,48,-55,29,36,-17,6,12,-13,-7,-50,-30,20,25,45,51,92,-14,-40,-127,-10,82,-23,31,7,-19,-58,80,10,16,7,-19,-4,11,-23,35,67,61,-20,25,17,-61,13,-27,50,82,-12,26,-56,21,26,-51,-49,26,65,88,44,-10,-1,9,22,91,38,18,18,-7,-2,1,-13,-52,-57,24,-70,-1,-22,27,-27,6,-9,3,-99,-45,20,-44,40,47,64,0,38, 
  /* [13][0][][] */ -11,18,-48,5,23,8,10,10,12,30,18,22,-36,-9,37,-64,-1,6,39,35,-15,0,-11,18,12,44,-17,15,4,14,41,-32,-23,60,9,22,29,-26,-49,-53,12,3,41,0,56,26,-29,51,-20,-17,45,17,-33,-20,90,33,-20,-19,-49,-24,8,53,42,-14,4,37,127,47,-3,-2,-31,16,44,5,-59,55,4,-37,110,-53,-35,-9,51,-9,12,63,-9,-31,-18,-34,-14,39,31,-30,43,15, 
  /* [14][0][][] */ 17,50,12,20,-104,-48,13,34,-63,6,43,71,-92,-3,10,-24,-43,47,-12,51,7,8,-58,56,-50,22,-9,-92,16,-31,15,86,-43,27,45,-25,-13,-55,42,-38,41,-31,86,-45,-14,24,-50,2,29,-53,103,10,2,96,-75,30,-77,28,-18,-20,36,69,18,14,35,-35,45,-36,-5,40,69,6,-60,43,16,-23,9,14,19,20,-92,101,20,-93,65,0,-6,4,-127,7,-15,23,-1,-11,48,21, 
  /* [15][0][][] */ 54,-18,15,20,28,15,4,-55,22,24,-22,-64,58,39,12,3,0,-26,-95,15,-23,-43,-16,-29,32,-29,99,26,13,-21,-57,13,55,36,-30,-56,70,53,25,57,61,25,-48,-21,-34,-95,18,-34,-20,6,-44,34,-3,-10,-2,47,33,-2,29,30,21,-32,-15,31,20,24,-46,31,32,-37,-10,-11,-2,-127,-32,-65,-22,24,-69,25,99,-33,49,6,-67,21,18,-9,67,91,9,-53,-47,-56,20,-46, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0030127291101962328, 0.0023322436027228832, 0.0021311633754521608, 0.0024512507952749729, 0.0035693405661731958, 0.0065932027064263821, 0.0030056275427341461, 0.002587467897683382, 0.0033080419525504112, 0.0041920216754078865, 0.0029965899884700775, 0.0037665015552192926, 0.0027006557211279869, 0.0044217458926141262, 0.0030325220432132483, 0.0025034642312675714, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10300, -832, -9479, 11591, -1628, 2768, 1851, -1547, 2063, -5383, -2165, -5142, -2009, -6139, -4721, -3772, 335, -3657, -17257, 3354, -14026, 2568, -10773, 386, 500, 14601, -2578, -9837, -3893, -2684, 1426, -852, 1941, 447, 1695, -2450, -3426, 3068, 8781, 9853, 3044, 7162, -1329, 3578, 4570, -678, 12331, 193, -10946, -480, 340, 4082, -121, -4556, 1729, 6058, -5436, 3867, -2302, 2106, -4881, -141, 1831, 400, 11204, -7262, 13425, 9490, -3107, -5290, 9942, -509, -185, -1159, -5963, 2033, 8110, 11566, 9494, 7263, 7804, -1698, -3774, 7883, -3831, 1156, 8740, -9311, 5410, 2614, -14406, 2047, -888, 389, 17846, 1356, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012559008609969169, 0.00021063796884845942, 0.00010804093471961096, 0.00010861169721465558, 0.00026144261937588453, 0.00048122936277650297, 9.314194176113233e-05, 0.00012104435882065445, 0.00023889371368568391, 0.00010520475188968703, 0.0003622030490078032, 0.00023246122873388231, 0.00013099747593514621, 9.9350691016297787e-05, 0.00016974120808299631, 0.00022166190319694579, 0.00029195647221058607, 0.00020179330022074282, 8.2494843809399754e-05, 0.00027858428074978292, 8.4417515608947724e-05, 0.00021711156296078116, 7.2332913987338543e-05, 0.00022657064255326986, 0.00065184850245714188, 7.1314694650936872e-05, 0.00031500656041316688, 0.00011182014713995159, 0.00021450904023367912, 8.478719973936677e-05, 0.00016657322703395039, 0.00016323698218911886, 0.00016944731760304421, 0.00025951277348212898, 0.00016394403064623475, 0.00026076912763528526, 0.00025129813002422452, 0.00012732023606076837, 0.00012586526281666011, 0.00012813716602977365, 0.00035444175591692328, 0.0002355370088480413, 0.00027111868257634342, 0.00021997081057634205, 0.00017954350914806128, 0.00030524481553584337, 0.00011014218762284145, 0.00024339568335562944, 0.00011835086479550228, 0.00029484496917575598, 0.00038568960735574365, 0.00022276410891208798, 0.00017186561308335513, 0.00017276055586989969, 0.00021135555289220065, 0.00016637038788758218, 0.00013619269884657115, 0.00035922884126193821, 0.00034219527151435614, 0.00021720494260080159, 0.00020208177738822997, 0.00026440637884661555, 0.00014048798766452819, 0.00017738857422955334, 0.00019590668671298772, 0.00022173734032548964, 0.00013254945224616677, 0.00011655948037514463, 0.00022398645523935556, 0.0001873397413874045, 0.00012748228618875146, 0.00034602597588673234, 0.00060545868473127484, 0.00017700751777738333, 8.5622799815610051e-05, 0.00015616981545463204, 7.4952433351427317e-05, 0.00012722151586785913, 9.5566931122448295e-05, 0.00012804132711607963, 0.0001324240438407287, 0.00019638754019979388, 0.00010999719961546361, 0.00021510475198738277, 5.5925509514054283e-05, 0.00031689146999269724, 0.00016174082702491432, 0.00016369164222851396, 0.00023471831809729338, 0.00018930387159343809, 7.0527443313039839e-05, 0.00019604478438850492, 0.00024885378661565483, 0.00019969815912190825, 0.00010756565461633727, 0.00018500433361623436, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -39,-49,22,-63,66,-14,35,-45,4,-56,7,30,-43,-60,37,-3,-22,38,81,-29,102,8,127,74,22,-45,-12,61,37,-28,17,75,11,20,-38,5,-3,-108,-60,-85,-31,29,50,-44,-64,51,-127,22,11,22,-33,33,-91,15,73,-33,-2,-45,17,-22,39,-34,-15,-77,-35,19,-82,-62,-2,53,-116,26,65,44,3,-38,48,19,127,-127,-34,30,-91,-69,62,-39,-17,118,-46,-19,70,-24,5,-23,-49,-9, -89,81,127,-95,-19,-3,127,-121,5,-127,-29,18,-86,80,-47,70,-9,127,62,-66,77,127,127,79,8,-2,-22,65,113,127,127,-3,-20,-7,-104,-37,29,-10,127,-73,-44,-104,30,3,38,-91,-51,-7,40,17,-1,85,-122,102,-124,-10,-48,-15,8,29,23,-113,-127,46,-56,21,-18,-121,10,65,-45,127,-127,20,-13,-83,-87,-21,20,-120,-71,8,-11,-85,127,48,-66,98,-12,-26,127,3,35,127,-85,-125, -35,10,24,-88,55,-42,97,-79,-41,-68,4,40,52,26,8,-26,-17,20,127,-69,98,16,94,127,-22,-2,-55,-6,22,7,26,85,23,-13,-19,52,-2,-68,-50,-127,-13,64,62,-38,-65,-22,-105,-28,-4,12,-11,39,21,-18,-1,-11,72,-35,32,-42,61,-10,-90,-12,-9,-28,127,-26,-16,94,66,28,-6,7,-60,17,20,32,-48,-33,-97,-1,-104,-61,111,-43,32,-79,-127,-51,17,41,35,78,-91,-23, 
  /* [0][1][][] */ -49,-35,26,-57,13,65,-57,-33,0,58,-13,4,-51,71,5,-27,-13,48,81,8,99,-28,-14,-15,21,-13,127,127,-1,-73,18,-79,-45,-1,30,12,-1,-39,-43,-80,-29,16,65,-45,-127,127,-94,-92,39,30,-11,-71,-66,21,79,-57,65,-42,52,-18,18,14,80,-73,-44,46,-46,18,-2,11,-20,15,76,98,10,-97,-67,-66,-49,13,10,36,44,-48,107,25,-89,85,-36,127,73,-127,127,5,-21,-14, 64,127,87,127,-127,-127,22,-91,127,113,-37,-99,23,127,-25,127,127,-92,81,127,127,-80,-4,-105,-127,-127,29,-60,-127,88,-27,127,31,127,127,-60,127,103,-49,119,127,-55,-127,-77,113,-29,84,97,122,-127,127,-127,79,127,-99,127,-109,127,-127,127,-93,127,70,68,71,127,-19,89,-95,-127,-108,-110,0,127,127,119,9,-81,110,-111,127,127,127,127,59,36,-127,127,78,13,101,-6,-123,19,-127,-41, -127,-42,49,-99,47,24,-23,29,-17,1,16,127,42,73,7,-13,-22,60,40,14,54,10,76,34,29,62,28,64,-54,-68,-6,-80,-127,-36,98,127,7,36,-126,-43,-41,8,37,-29,-100,-12,-13,-127,75,49,-11,-59,127,17,86,-67,72,-30,57,-58,-18,-18,-120,-12,-3,1,-59,35,-39,-6,-127,-47,61,-51,4,127,-53,-127,-63,57,-78,-22,-16,-67,89,26,-25,26,-47,-70,96,100,-44,12,-56,-21, 
  /* [0][2][][] */ -53,-38,-6,-110,55,-10,-49,106,-27,29,29,1,71,65,21,-66,-10,-29,5,-44,41,-42,-2,-61,-15,-68,-27,71,17,-63,6,-16,74,5,-80,5,28,-36,-23,43,-45,3,-1,64,-5,-8,-32,7,42,29,-52,-6,-2,-79,18,-19,84,-12,28,-17,32,21,45,2,-86,22,120,59,37,72,60,-8,3,-19,33,-24,107,-21,-37,43,-99,-2,43,-25,52,2,20,-18,-41,28,18,-66,-40,-35,39,-1, -1,-58,53,-38,-42,21,-2,127,-71,105,127,-5,12,-40,127,80,-21,-41,119,-47,-2,-69,47,-24,1,-65,5,19,38,80,-112,-66,-24,-3,-105,8,-57,-127,-10,-28,-23,-127,-42,127,44,-8,-102,32,127,-28,-3,20,34,-36,-127,-45,-22,-34,43,-85,127,34,83,35,-127,-17,-34,-41,127,48,-87,3,82,0,121,-26,10,-60,8,97,17,-14,17,-12,55,-127,-12,42,21,-3,105,-37,-2,-92,-75,127, 9,20,33,-25,55,6,14,101,-15,30,-19,13,127,-13,-9,-19,-5,-14,-50,-25,36,-39,30,-53,-15,-6,-25,95,56,-26,-56,29,56,-1,18,-28,10,-21,-92,-64,-31,-94,55,-32,-2,3,-55,24,-11,18,-26,-55,18,-54,21,-30,127,4,42,-1,-2,16,-31,127,-12,-12,-24,127,35,8,-32,-24,9,-70,12,-31,127,-34,112,29,-120,-14,-10,55,77,3,31,-11,-41,16,-26,-7,29,-56,4,-34, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0053375787101686001, 0.0089521137997508049, 0.0045917397364974022, 0.0046159969642758369, 0.011111311614513397, 0.020452247932553291, 0.0039585325866937637, 0.0051443851552903652, 0.010152982547879219, 0.004471201915293932, 0.015393628738820553, 0.0098796021193265915, 0.0055673923343420029, 0.0042224042117595673, 0.0072140013799071312, 0.0094206305220723152, 0.012408149428665638, 0.0085762152448296547, 0.0035060306545346975, 0.011839832179248333, 0.0035877441987395287, 0.0092272413894534111, 0.0030741486698389053, 0.0096292523667216301, 0.027703560888767242, 0.0030308745335787535, 0.013387778773903847, 0.0047523560933768749, 0.0091166337952017784, 0.0036034558434039354, 0.0070793619379401207, 0.0069375713355839252, 0.0072015109471976757, 0.011029292829334736, 0.0069676213897764683, 0.01108268741518259, 0.010680170729756355, 0.0054111098870635033, 0.0053492733277380466, 0.0054458295926451683, 0.015063773840665817, 0.01001032255589962, 0.011522543616592884, 0.0093487594276666641, 0.0076305991970002651, 0.012972904369235039, 0.0046810428611934185, 0.010344316251575947, 0.0050299116410315037, 0.012530910782516003, 0.016391808167099953, 0.0094674741849303246, 0.0073042884469032288, 0.0073423231951892376, 0.0089826108887791634, 0.0070707411505281925, 0.0057881898246705532, 0.015267225913703442, 0.014543298631906509, 0.0092312097549438477, 0.0085884751752018929, 0.011237271130084991, 0.0059707392938435078, 0.0075390143319964409, 0.0083260340616106987, 0.0094238370656967163, 0.0056333518587052822, 0.0049537778832018375, 0.0095194242894649506, 0.0079619390890002251, 0.0054179970175027847, 0.014706104062497616, 0.025731993839144707, 0.0075228195637464523, 0.0036389688029885292, 0.0066372170113027096, 0.0031854785047471523, 0.0054069142788648605, 0.0040615946054458618, 0.0054417559877038002, 0.0056280218996107578, 0.0083464700728654861, 0.0046748807653784752, 0.0091419517993927002, 0.0023768341634422541, 0.013467887416481972, 0.0068739852868020535, 0.0069568948820233345, 0.0099755283445119858, 0.008045414462685585, 0.0029974163044244051, 0.0083319032564759254, 0.010576285421848297, 0.0084871714934706688, 0.0045715402811765671, 0.0078626843169331551, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1313, 5203, 1328, 3359, 9326, 9527, 388, 2749, 6148, 976, 10469, 6005, 2035, 1073, 1934, 1392, 8310, 4860, 158, 21572, 2112, 15923, -352, 14151, -6957, 98, 3038, 1736, 6357, 4795, 4526, 3784, 6383, 12525, 6098, 2710, 8270, 1627, 7588, 4082, 29573, 8880, 7369, 1950, 4019, 13317, 5157, 5185, 1922, -815, 3930, 5620, 3362, -3895, 12061, -288, 4085, 24042, 4221, 1107, 2193, 6472, 13724, -233, 33055, 10530, 1121, 3821, 5624, 2546, 3247, 6871, -6582, 8345, 1586, 2028, -364, 11083, 4341, 8720, 3893, 2356, 3278, 23206, -519, 5655, 5442, 3536, -617, 2445, 1590, 5872, 4039, 1918, 6567, 15387, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018181149789597839, 0.00013232199125923216, 0.00016365254123229533, 9.6649746410548687e-05, 0.00010006818774854764, 8.3709586760960519e-05, 0.00014281613402999938, 9.8725642601493746e-05, 0.00012818881077691913, 0.00011656531569315121, 7.5463220127858222e-05, 9.6833107818383723e-05, 0.00013423545169644058, 0.00021617169841192663, 0.00013236061204224825, 0.00011983072181465104, 9.0783149062190205e-05, 0.0001236415992025286, 0.00026619838899932802, 4.2761585063999519e-05, 0.00014768049004487693, 5.3702864533988759e-05, 0.00023003738897386938, 4.4253949454287067e-05, 0.00010682674474082887, 0.00017794380255509168, 0.00015006728062871844, 0.00017957144882529974, 0.00012539609451778233, 7.645722507731989e-05, 0.00010806642967509106, 0.00013102842785883695, 0.000101299854577519, 6.4476218540221453e-05, 9.8910750239156187e-05, 0.00016689294716343284, 6.5314379753544927e-05, 0.00018576305592432618, 6.746708822902292e-05, 8.7094325863290578e-05, 3.4748809412121773e-05, 8.464900020044297e-05, 6.660613144049421e-05, 7.3802424594759941e-05, 0.00012186465028207749, 6.1410930356942117e-05, 0.00012839501141570508, 0.00012699019862338901, 0.00018158012244384736, 0.00019225249707233161, 0.00012197348405607045, 0.00013687253522220999, 0.00014415523037314415, 9.948819933924824e-05, 6.2091086874715984e-05, 0.00017050789028871804, 8.7003521912265569e-05, 4.0617258491693065e-05, 7.7693621278740466e-05, 0.00020322408818174154, 0.00014777031901758164, 0.00010167673463001847, 5.9993242757627741e-05, 0.00021724106045439839, 2.8151973310741596e-05, 8.0281868577003479e-05, 0.0002085534215439111, 8.8459353719372302e-05, 0.0001400686742272228, 0.00014370653661899269, 0.00012491742381826043, 6.7538559960667044e-05, 9.6267911430913955e-05, 9.3040864157956094e-05, 0.00017617437697481364, 0.00016940946807153523, 0.00023080770915839821, 7.6926917245145887e-05, 0.00015266149421222508, 9.587897511664778e-05, 9.3293427198659629e-05, 0.00012787424202542752, 0.00011331977293593809, 4.158592491876334e-05, 0.00017056375509127975, 0.00010730644862633198, 0.00013001091429032385, 0.00014750142872799188, 0.00016788767243269831, 0.00017427826242055744, 0.00011206810449948534, 0.00013328497880138457, 0.00014330151316244155, 0.00023516440705861896, 9.4124392489902675e-05, 4.4475720642367378e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 17,16,24,32,-103,41,112,79,41,72,23,95,40,16,33,127, 
  /* [1][0][][] */ -35,54,-30,27,127,90,-9,-45,8,10,-68,53,-50,50,-1,-21, 
  /* [2][0][][] */ -44,68,84,0,76,86,-5,10,36,0,19,-25,51,-127,-37,-13, 
  /* [3][0][][] */ 115,32,99,40,105,64,71,-28,32,18,-106,-67,35,127,-94,114, 
  /* [4][0][][] */ -18,-3,14,-34,-127,-42,-96,-27,-55,45,15,5,-19,27,-34,72, 
  /* [5][0][][] */ -127,-6,-21,-43,52,48,-13,76,-42,26,-11,30,-84,42,-15,16, 
  /* [6][0][][] */ -127,53,-31,58,23,-66,74,26,24,-34,-67,67,17,28,-20,31, 
  /* [7][0][][] */ 116,93,108,-68,26,95,127,-24,72,-39,-50,-16,0,-60,-82,-69, 
  /* [8][0][][] */ -25,13,-49,19,-11,127,-13,-46,-13,-27,36,33,85,8,-53,49, 
  /* [9][0][][] */ 46,-101,5,86,-81,-46,-67,96,114,43,-5,40,-127,-78,32,-107, 
  /* [10][0][][] */ 23,-29,-4,94,-127,104,-18,-57,115,-124,49,-18,-17,-4,5,-2, 
  /* [11][0][][] */ -15,-59,-55,24,-5,74,49,-21,71,-60,32,-57,7,127,-14,93, 
  /* [12][0][][] */ -36,-94,-101,107,-103,-105,29,127,95,32,12,93,-7,-37,-5,39, 
  /* [13][0][][] */ -68,-26,-52,-12,-25,-10,18,20,-32,127,-13,-34,20,26,10,-17, 
  /* [14][0][][] */ -122,-81,-86,110,-56,31,57,-54,127,-120,61,-21,82,13,61,-12, 
  /* [15][0][][] */ -24,-127,119,-64,-21,-46,-10,66,37,-32,-119,-40,65,-37,-7,-39, 
  /* [16][0][][] */ 19,-49,41,-26,25,18,-41,-51,55,-112,42,-2,-8,1,-86,-127, 
  /* [17][0][][] */ -78,-34,-26,-122,-29,21,39,7,50,-64,85,41,115,-127,-58,-53, 
  /* [18][0][][] */ 13,13,-57,-86,-4,-23,50,-19,25,33,6,38,-22,127,22,-32, 
  /* [19][0][][] */ -61,14,-118,-125,-127,63,-55,-6,7,19,96,-123,-87,-66,-10,-43, 
  /* [20][0][][] */ 12,59,-36,-99,65,-43,-103,88,-127,-87,-8,-97,-91,93,26,-34, 
  /* [21][0][][] */ -52,-123,-50,20,127,-14,46,115,-40,-31,-11,62,73,-80,-44,11, 
  /* [22][0][][] */ 34,-12,40,10,-4,33,58,33,44,94,53,55,-6,41,127,-5, 
  /* [23][0][][] */ -127,-70,-104,34,49,19,-29,45,-89,18,-1,-99,-113,8,38,91, 
  /* [24][0][][] */ 19,-8,-6,33,30,-24,-13,-36,-23,127,-70,81,-38,-44,76,-64, 
  /* [25][0][][] */ 71,-5,84,108,43,-3,81,17,-127,65,41,-30,49,80,44,30, 
  /* [26][0][][] */ -14,37,31,21,-45,64,-33,28,-39,1,-66,54,-5,7,37,-127, 
  /* [27][0][][] */ 32,-13,-41,-73,-60,-5,-108,24,-123,-8,-57,-42,-83,40,9,127, 
  /* [28][0][][] */ -29,-5,14,43,-2,-70,-127,6,-23,-5,-19,-5,-9,12,-51,-68, 
  /* [29][0][][] */ -65,-127,-38,92,1,-4,112,45,48,75,-125,41,-16,-34,-53,90, 
  /* [30][0][][] */ -35,-59,-127,-6,-97,65,74,-24,-37,4,81,14,-53,31,-26,123, 
  /* [31][0][][] */ -127,-40,-22,51,-23,12,-37,40,-43,-27,30,-4,-50,-50,11,96, 
  /* [32][0][][] */ -127,-73,-111,-22,-105,-16,-13,35,103,56,1,-54,-5,42,7,1, 
  /* [33][0][][] */ -64,-6,-81,28,-81,-91,26,14,-114,16,-53,-32,-3,127,47,72, 
  /* [34][0][][] */ 79,37,-40,51,-127,-80,11,19,70,-110,56,37,-102,-8,82,75, 
  /* [35][0][][] */ 26,-31,-15,-33,-127,29,71,6,1,-24,-23,-3,108,-18,58,64, 
  /* [36][0][][] */ -19,3,-108,48,98,-17,87,83,-127,5,-85,-121,51,-52,50,49, 
  /* [37][0][][] */ -127,26,-13,-54,85,-102,-30,-28,24,-2,-86,0,85,-67,28,-100, 
  /* [38][0][][] */ 46,90,11,-52,-86,-22,-78,-53,-26,-49,64,85,-61,-127,109,-20, 
  /* [39][0][][] */ -48,-91,42,92,19,14,126,-11,12,-13,4,-72,8,49,22,127, 
  /* [40][0][][] */ 117,86,44,56,-103,-64,-4,17,-114,48,-44,-6,-26,-47,127,-27, 
  /* [41][0][][] */ -47,-38,-47,31,-79,127,-14,67,-60,-18,-103,-45,-9,11,28,-89, 
  /* [42][0][][] */ -21,-72,-31,3,127,6,110,-15,-37,-65,-27,-108,4,9,4,80, 
  /* [43][0][][] */ -80,-29,-111,5,29,111,80,123,-127,-121,-98,-71,122,-65,-11,52, 
  /* [44][0][][] */ 5,-31,-111,-127,6,58,-3,44,-76,-46,-18,94,-7,60,12,56, 
  /* [45][0][][] */ -49,4,-115,55,-101,127,31,41,50,-96,32,-11,19,11,10,122, 
  /* [46][0][][] */ 20,-77,-15,32,127,-60,-20,85,1,16,-8,56,-42,-42,55,-102, 
  /* [47][0][][] */ -6,-9,-33,67,51,-32,-11,17,-32,127,32,13,-70,61,-39,26, 
  /* [48][0][][] */ 33,-26,-74,-68,76,-121,-13,51,48,-55,-34,-19,-62,40,-49,-127, 
  /* [49][0][][] */ 28,53,3,34,22,10,-8,24,-24,127,-7,58,-58,-33,42,25, 
  /* [50][0][][] */ 2,1,2,-11,-127,-7,-14,-26,26,13,18,53,-31,-56,27,-8, 
  /* [51][0][][] */ -4,26,33,-127,-9,45,18,-18,-17,40,13,-23,26,42,-29,-5, 
  /* [52][0][][] */ 29,-16,-20,-47,68,-66,19,-20,41,-36,83,-40,60,25,-20,127, 
  /* [53][0][][] */ -44,-44,87,-56,-1,-78,28,-127,25,115,-87,122,-23,-18,-18,-118, 
  /* [54][0][][] */ 52,58,31,-23,-124,-50,-71,-127,1,-10,2,70,-6,-51,59,14, 
  /* [55][0][][] */ -49,-2,-16,56,8,14,66,12,25,127,-25,18,19,45,6,56, 
  /* [56][0][][] */ 96,8,-127,65,-84,18,-71,65,-24,77,110,69,-17,-62,114,33, 
  /* [57][0][][] */ 48,10,37,-127,8,-14,-89,11,-25,33,23,108,-27,-27,81,-89, 
  /* [58][0][][] */ 110,-48,-54,-127,-31,85,-69,100,-44,106,68,106,-52,6,96,-34, 
  /* [59][0][][] */ -44,19,42,-14,9,-72,25,-21,4,9,-127,-82,-33,-10,41,-16, 
  /* [60][0][][] */ 47,-127,30,81,-8,-82,-30,-3,19,108,-4,35,-44,-61,-64,-110, 
  /* [61][0][][] */ 73,53,-37,-32,-127,-86,19,-15,-52,-3,8,53,-22,36,64,41, 
  /* [62][0][][] */ 20,101,-50,9,-80,127,-31,2,-47,6,-10,77,6,0,7,-101, 
  /* [63][0][][] */ 66,3,-28,-127,-44,-37,53,-21,8,-60,-20,31,-16,43,40,-19, 
  /* [64][0][][] */ -68,18,-2,2,67,-90,46,95,-116,-62,-67,-103,-14,65,92,127, 
  /* [65][0][][] */ -22,52,-19,-13,64,4,15,-127,-125,-34,30,-66,-90,114,-9,66, 
  /* [66][0][][] */ -48,51,2,40,-30,127,-38,24,-43,-4,-30,49,-32,83,35,-33, 
  /* [67][0][][] */ 79,32,-11,-45,-64,-63,91,-107,69,20,56,127,-36,-51,49,-125, 
  /* [68][0][][] */ 4,-127,-11,73,-21,5,13,19,55,14,21,4,-50,42,21,-15, 
  /* [69][0][][] */ 8,54,83,-89,12,-4,17,18,37,51,9,33,127,-48,38,-72, 
  /* [70][0][][] */ 63,84,50,-41,106,60,-127,-82,-116,-85,-27,81,-26,82,-100,-28, 
  /* [71][0][][] */ -67,-79,45,-97,120,-51,30,25,-107,127,-90,-55,12,54,-72,57, 
  /* [72][0][][] */ -14,-20,74,22,-47,-85,-121,-44,-10,74,-54,11,54,75,-127,-86, 
  /* [73][0][][] */ -51,-38,-37,-36,21,-127,-9,-3,43,85,104,-5,-21,27,-13,127, 
  /* [74][0][][] */ -20,24,-42,77,-30,-9,71,30,39,93,28,127,88,55,-17,38, 
  /* [75][0][][] */ -26,54,-46,81,-46,127,-7,23,-16,30,-39,32,-49,4,37,-92, 
  /* [76][0][][] */ -45,45,-40,86,-48,26,45,-9,58,14,-15,-23,86,-13,-127,47, 
  /* [77][0][][] */ 101,94,-112,103,37,78,60,64,26,14,127,-44,20,-4,61,20, 
  /* [78][0][][] */ 38,-16,6,-48,62,-127,5,-27,34,77,98,6,4,-18,-25,69, 
  /* [79][0][][] */ 10,58,17,31,-57,-56,-18,-49,-124,-23,60,13,127,35,-30,-60, 
  /* [80][0][][] */ -110,40,117,48,124,14,44,-92,-31,22,-127,-43,60,-36,25,62, 
  /* [81][0][][] */ 46,50,-19,-48,0,-44,51,99,-107,127,-37,-55,-93,-12,79,78, 
  /* [82][0][][] */ 70,104,-59,-93,-41,-37,127,-59,41,-15,-39,105,121,-11,120,-22, 
  /* [83][0][][] */ 14,-53,9,26,-15,44,-15,-100,86,-29,127,36,26,-77,-14,-115, 
  /* [84][0][][] */ -118,-127,-22,-41,-38,89,106,33,74,36,122,121,81,4,-114,-10, 
  /* [85][0][][] */ 8,-87,68,-24,62,-53,-4,127,-48,98,-104,22,59,69,70,33, 
  /* [86][0][][] */ -64,52,-51,-13,-19,59,13,17,50,11,127,5,-34,37,3,-17, 
  /* [87][0][][] */ 17,-40,27,-46,63,-127,25,-30,39,12,65,-24,35,-33,-44,68, 
  /* [88][0][][] */ -70,45,54,27,127,-9,35,-3,-33,-88,40,-96,82,82,56,-126, 
  /* [89][0][][] */ -39,39,-54,65,-4,127,-34,41,-59,34,-45,35,-29,37,34,-91, 
  /* [90][0][][] */ 48,-61,69,62,127,-4,49,-4,35,-96,-69,-7,12,-12,-42,29, 
  /* [91][0][][] */ -45,-4,-4,-28,3,-23,-91,-7,-45,7,-54,-8,-127,-31,-8,-9, 
  /* [92][0][][] */ 65,24,27,-1,-127,-72,1,1,-28,15,4,-16,1,-44,36,5, 
  /* [93][0][][] */ 9,-98,-16,21,-27,-26,-31,23,127,20,30,84,-11,36,-35,-14, 
  /* [94][0][][] */ 122,21,127,-22,45,9,-16,42,31,114,-3,102,0,15,84,-41, 
  /* [95][0][][] */ -115,-75,-28,31,127,-18,50,119,-13,-12,-119,-71,16,71,-59,72, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0038810893893241882, 0.0028246478177607059, 0.0034934543073177338, 0.0020631605293601751, 0.0021361331455409527, 0.0017869297880679369, 0.0030486639589071274, 0.0021074742544442415, 0.0027364178095012903, 0.0024882936850190163, 0.0016108965501189232, 0.0020670746453106403, 0.0028654942288994789, 0.0046145687811076641, 0.002825472503900528, 0.00255799968726933, 0.0019379275618121028, 0.0026393495500087738, 0.0056824772618710995, 0.00091282196808606386, 0.0031525024678558111, 0.0011463830014690757, 0.0049105565994977951, 0.00094467919552698731, 0.002280406653881073, 0.0037985264789313078, 0.0032034525647759438, 0.0038332715630531311, 0.0026768024545162916, 0.0016321152215823531, 0.0023068699520081282, 0.0027970345690846443, 0.0021624253131449223, 0.0013763594906777143, 0.0021114256232976913, 0.0035626264289021492, 0.0013942514779046178, 0.0039654425345361233, 0.0014402047963812947, 0.0018591830739751458, 0.00074177508940920234, 0.001806983258575201, 0.0014218261931091547, 0.0015754438936710358, 0.0026014174800366163, 0.00131092534866184, 0.0027408194728195667, 0.0027108313515782356, 0.003876150120049715, 0.004103971179574728, 0.0026037406641989946, 0.0029217873234301805, 0.0030772495083510876, 0.0021237523760646582, 0.0013254445511847734, 0.0036397937219589949, 0.0018572447588667274, 0.00086704752175137401, 0.0016585083212703466, 0.0043381792493164539, 0.0031544198282063007, 0.0021704705432057381, 0.0012806623708456755, 0.0046373964287340641, 0.00060095387743785977, 0.0017137590330094099, 0.0044519430957734585, 0.0018883220618590713, 0.0029900146182626486, 0.0030676713213324547, 0.0026665842160582542, 0.0014417305355891585, 0.0020550095941871405, 0.0019861224573105574, 0.0037607550621032715, 0.0036163460463285446, 0.0049270004965364933, 0.0016421417240053415, 0.0032588306348770857, 0.0020467070862650871, 0.0019915138836950064, 0.0027297029737383127, 0.0024190119002014399, 0.00088772544404491782, 0.00364098628051579, 0.0022906467784196138, 0.0027753140311688185, 0.0031486798543483019, 0.0035838605836033821, 0.0037202790845185518, 0.0023922927211970091, 0.0028452046681195498, 0.0030590253882110119, 0.0050200019031763077, 0.0020092523191124201, 0.00094941322458907962, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -2190, 7907, -24314, -3060, 8598, -15360, -36764, 2246, -7029, 6731, -12298, -16263, 1804, -7279, -3386, -3504, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 7.8882039815653116e-05, 9.5031587989069521e-05, 0.00011806917609646916, 0.0001338333822786808, 9.6169605967588723e-05, 0.00012105689529562369, 0.0001126534043578431, 7.6479373092297465e-05, 9.1378860815893859e-05, 8.3093647845089436e-05, 0.00013130262959748507, 0.00011929265019716695, 0.00011049171735066921, 8.9412649685982615e-05, 8.9764325821306556e-05, 9.5441806479357183e-05, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 11,44,14,-69,38,48,-71,51,-1,112,-1,33,-34,15,-34,38,51,63,31,-27,-82,80,-6,28,56,44,49,61,-32,-38,-10,66,-23,-6,-86,73,54,-127,-38,-11,-14,-44,64,-11,-40,-66,-51,22, 
  /* [1][0][][] */ -50,24,-84,-62,2,127,-79,28,-11,-50,-63,18,65,-18,-10,-26,-4,-27,8,41,-93,64,-93,-97,-38,-54,60,75,-22,-43,38,-58,14,-95,-61,74,31,-37,119,-60,2,50,-32,-24,39,71,44,36, 
  /* [2][0][][] */ 0,3,84,-32,-10,-98,35,15,84,59,-70,31,116,-68,127,91,-72,-3,-20,36,73,-70,-24,-102,7,-35,55,-82,37,47,-41,13,55,-34,54,47,-48,16,-10,-28,35,71,69,-21,22,-86,111,-31, 
  /* [3][0][][] */ 54,4,-19,-22,47,127,32,-14,67,-43,30,-16,-43,-10,-16,45,-60,-65,8,-126,12,-1,-27,1,-49,100,126,63,-31,-33,11,29,78,-15,107,44,-34,-77,17,63,39,20,-5,2,61,20,-5,-24, 
  /* [4][0][][] */ 87,-14,6,-48,94,76,47,18,39,-11,-75,69,52,-37,44,-14,-103,-119,9,-91,-1,7,-59,3,-77,120,-98,108,-52,-33,39,84,32,-59,22,-34,19,18,-21,23,-55,28,-9,36,-27,127,-56,-83, 
  /* [5][0][][] */ 15,12,-64,11,-26,75,14,-41,81,58,34,89,67,-31,36,-18,-64,127,-35,54,6,13,-67,-27,43,-9,-71,-53,-14,50,17,-43,-37,18,26,27,-34,25,-106,-13,107,-31,11,38,-19,-2,-37,46, 
  /* [6][0][][] */ 47,10,41,83,6,-31,99,-24,-5,52,81,77,35,8,-30,49,30,-17,-70,49,40,-53,-21,18,-67,69,71,4,69,37,-39,3,89,-59,-94,-18,86,25,12,-5,10,68,64,-8,86,127,21,-13, 
  /* [7][0][][] */ -98,-29,-46,40,-90,-56,28,24,79,119,-56,-69,-114,45,-17,-29,-99,96,-20,127,-65,38,11,60,-37,-103,-62,-97,49,54,10,10,-48,38,26,-39,-33,-44,127,28,3,36,-14,-11,51,53,-68,-23, 
  /* [8][0][][] */ -7,-82,62,-67,97,-60,82,-42,6,-100,15,15,-38,-1,23,31,-24,28,-93,104,16,37,-21,30,61,-3,-62,-42,-116,-12,-68,-116,22,-78,5,91,5,18,113,17,29,7,98,127,9,-57,-44,87, 
  /* [9][0][][] */ 28,-29,4,-48,30,78,-53,41,0,-40,-27,-26,11,-24,115,-31,18,-99,29,55,-80,39,73,-33,-36,-82,-46,87,93,82,-42,-36,-64,30,7,127,-46,-11,-49,-27,-44,12,6,91,52,75,-67,17, 
  /* [10][0][][] */ -4,26,-28,-5,30,44,-89,-52,41,58,69,-8,-68,13,42,-68,-53,127,-22,76,-4,-15,9,24,-51,39,11,85,48,16,-49,-35,81,24,-9,30,-18,-66,-55,22,-83,-45,13,-35,-23,23,48,54, 
  /* [11][0][][] */ -14,54,-10,41,43,70,9,-7,35,25,-127,-76,74,16,-11,-49,16,50,-76,-31,-12,11,107,-6,35,12,-17,35,27,46,1,35,29,19,-34,44,23,88,119,3,42,-18,63,-18,-62,-36,99,17, 
  /* [12][0][][] */ -66,8,48,43,-66,-50,3,18,-34,-24,-127,8,64,-126,20,17,49,118,73,-122,-31,38,-31,-90,-7,-32,35,-17,22,19,-26,75,59,62,43,-41,-65,-28,40,-3,-26,47,76,0,44,20,-33,-35, 
  /* [13][0][][] */ -91,-90,-66,-89,-19,22,36,-14,-111,42,98,-45,40,41,98,-10,127,11,-5,-80,70,-72,80,-41,-57,19,-23,-8,-44,-46,-71,4,16,-13,-66,37,19,-19,71,-91,-15,58,20,20,42,6,76,-86, 
  /* [14][0][][] */ 77,31,-67,7,-71,65,-107,-41,-12,53,59,28,-28,-51,-26,-63,80,-104,-30,40,93,-68,44,-27,-24,121,-88,14,-60,-23,-89,-30,127,52,98,-4,-95,20,-16,72,-18,-53,103,-47,-46,-49,-40,71, 
  /* [15][0][][] */ -89,7,24,52,77,12,2,33,-8,102,-13,71,67,-27,-43,-33,16,37,-20,-40,18,-38,-65,-72,67,-67,-56,85,-19,18,30,2,-58,19,127,-52,-82,31,94,-16,-55,-23,0,-9,-39,-7,-13,7, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0033524865284562111, 0.0040388423949480057, 0.005017939954996109, 0.0056879185140132904, 0.004087208304554224, 0.0051449178718030453, 0.0047877696342766285, 0.0032503732945770025, 0.0038836016319692135, 0.0035314799752086401, 0.005580361932516098, 0.0050699375569820404, 0.0046958979219198227, 0.0038000375498086214, 0.0038149836473166943, 0.0040562767535448074, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 14286, 2616, 22549, -115, 13140, -1093, 45078, 1159, 7141, 29105, 1562, 26556, 1185, 8368, 31175, 22533, 436, -7638, 4992, 61977, 2160, 13876, 1058, 21178, 14643, 34594, 1160, -106, -1544, 13097, 15222, -192, 410, -3122, 1371, 11185, 8976, 23888, 202, 20300, 27117, 1539, 707, 5147, -2162, 1875, 31512, 16013, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00013237698294688016, 8.1538841186556965e-05, 7.0172485720831901e-05, 0.00024661136558279395, 0.00010066998220281675, 0.00015559951134491712, 5.0636419473448768e-05, 0.00012712183524854481, 0.00010356728307669982, 7.4834482802543789e-05, 6.8831606768071651e-05, 7.6634372817352414e-05, 7.2794093284755945e-05, 0.00014968946925364435, 5.0921269576065242e-05, 0.00010608132288325578, 0.00023517462250310928, 7.3528768552932888e-05, 0.00015000243729446083, 3.5656081308843568e-05, 6.529532402055338e-05, 7.502333028241992e-05, 8.7425200035795569e-05, 9.6759198640938848e-05, 7.1486043452750891e-05, 6.0696322179865092e-05, 9.1925976448692381e-05, 5.4091429774416611e-05, 0.0002448792802169919, 0.00010264965385431424, 9.3224873126018792e-05, 0.00035521775134839118, 0.00014296510198619217, 0.00013238309475127608, 0.00010442078928463161, 0.00015738460933789611, 8.8713524746708572e-05, 6.3130704802460968e-05, 0.00013700705312658101, 0.00017114060756284744, 6.1645710957236588e-05, 0.00024824764113873243, 0.0002656945725902915, 0.00011755996092688292, 0.00017965391452889889, 5.0988262955797836e-05, 5.9598954976536334e-05, 9.5541254268027842e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -46,15,-65,127,-125,115,-53,-86,-75,-40,61,-63,106,-97,-51,-19,76,86,59,-73,115,-127,89,-115,-96,-10,69,127,-78,-40,-104,42,64,-82,89,-86,-36,-44,54,-127,-54,-6,90,-79,90,91,-96,-78, -127,69,-127,96,-127,75,-118,42,-85,-58,85,-43,127,-104,-65,-47,60,127,104,-127,127,-115,80,-121,-127,-48,58,107,45,-24,-71,53,71,-100,108,-127,-62,-81,36,-78,-55,119,108,-86,-26,82,-127,-53, -62,27,-37,-19,-70,31,-64,-75,-38,32,22,-28,43,-4,31,40,3,82,126,-120,55,-96,47,-65,-58,-17,30,12,124,-27,-39,-3,60,-98,4,-66,-57,-75,-11,-86,-39,-38,56,-114,-66,127,-56,-38, 
  /* [0][1][][] */ -98,30,-111,100,-67,127,-83,71,-92,-89,98,-73,68,-103,-113,-127,94,105,-28,-85,2,-41,127,-119,-108,-69,127,63,-127,-88,-100,45,71,13,55,-10,-106,-127,66,-127,-118,-127,97,-81,55,118,-118,-17, -106,127,-55,113,-67,46,-127,121,-127,-127,127,-72,110,-127,-127,-70,127,92,-71,-126,124,-58,71,-115,-106,-127,82,66,0,-127,-127,127,127,54,127,-2,-127,-82,127,-87,-111,82,127,-3,-59,96,-27,-19, -54,55,-74,-2,-50,-34,-43,86,-45,-43,81,-34,79,30,-39,-25,28,96,-3,-63,109,-68,74,-55,-71,-71,12,100,80,-25,-19,114,2,0,24,4,-61,-9,16,-1,-58,-119,39,11,-68,48,-47,-77, 
  /* [0][2][][] */ -49,48,-49,43,70,93,-120,127,-67,-57,49,-79,53,-74,-32,-90,41,51,-84,7,45,-9,7,-67,-46,-50,24,24,-61,-32,-4,39,35,127,17,-21,-39,-43,40,-14,-127,-57,34,-60,127,84,-3,-127, -20,30,-42,60,-79,31,-117,124,-43,-69,12,-94,99,-107,-59,-35,63,34,-113,-20,-14,16,-19,-127,-5,-75,20,58,-23,-87,-38,-22,-1,116,51,-53,-54,-22,49,-15,-56,104,19,19,10,92,7,-44, -18,31,-69,80,-59,-15,-37,25,10,-30,34,-127,9,-22,10,-47,5,30,-127,-59,49,-52,5,-7,-21,-56,9,25,36,19,-29,-11,22,44,39,-30,-39,0,11,29,-24,-63,50,127,-46,45,-29,-42, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0056260214187204838, 0.0034654007758945227, 0.0029823305085301399, 0.010480982251465321, 0.0042784740217030048, 0.0066129793412983418, 0.0021520478185266256, 0.005402678158134222, 0.0044016093015670776, 0.0031804654281586409, 0.0029253431130200624, 0.0032569607719779015, 0.003093749051913619, 0.0063618025742471218, 0.0021641538478434086, 0.004508456215262413, 0.0099949212744832039, 0.0031249725725501776, 0.0063751032575964928, 0.0015153833664953709, 0.0027750511653721333, 0.0031884913332760334, 0.0037155710160732269, 0.0041122660040855408, 0.0030381567776203156, 0.0025795935653150082, 0.0039068539626896381, 0.0022988857235759497, 0.010407369583845139, 0.0043626101687550545, 0.003962057176977396, 0.015096753835678101, 0.0060760164633393288, 0.0056262812577188015, 0.0044378833845257759, 0.0066888458095490932, 0.0037703248672187328, 0.0026830548886209726, 0.0058227996341884136, 0.0072734756395220757, 0.0026199426501989365, 0.010550525039434433, 0.011292018927633762, 0.0049962983466684818, 0.0076352912001311779, 0.0021670011337846518, 0.0025329554919153452, 0.0040605030953884125, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 3522, -1542, 542, -2578, 2437, -1043, 5903, -3148, 556, 1171, 1386, 3335, 704, -652, 204, 6650, -2180, 3122, 4983, 326, -1300, 1649, -875, 4543, 1480, 1809, 776, -728, 7172, 220, 1953, -1291, -573, 4489, -1062, 4036, 691, 673, -356, 8419, 1518, 16992, -2704, 741, 7415, 486, 2386, 2079, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00018222301150672138, 0.00023965077707543969, 0.00038808345561847091, 0.00019734613306354731, 0.00028859564918093383, 0.00022588226420339197, 0.00014280292089097202, 0.00017372537695337087, 0.00041429701377637684, 0.00024683991796337068, 0.00028998145717196167, 0.00023002864327281713, 0.00027535011759027839, 0.00031907408265396953, 0.00033433991484344006, 0.00013901150668971241, 0.00024204836518038064, 0.00026845201500691473, 0.00018650709534995258, 0.00043310178443789482, 0.0001876415335573256, 0.00024056818801909685, 0.00024142993788700551, 0.00016443185450043529, 0.00024533900432288647, 0.00024156997096724808, 0.0002582944871392101, 0.0003566093510016799, 0.00012901519949082285, 0.00034565449459478259, 0.00025666129658930004, 0.00023062751279212534, 0.00016280497948173434, 0.00017378479242324829, 0.00027128969668410718, 0.00017656045383773744, 0.00031742634018883109, 0.00034289152245037258, 0.00025008711963891983, 0.0001159908642875962, 0.00037848987267352641, 6.288512668106705e-05, 0.0002151746884919703, 0.00048073753714561462, 0.00011862965766340494, 0.00028120118076913059, 0.00026552664348855615, 0.00025897714658640325, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 45,22,127,-30,65,60,-77,-70, 
  /* [1][0][][] */ 2,-75,-127,4,52,39,29,2, 
  /* [2][0][][] */ -127,14,-53,-28,36,15,-54,-32, 
  /* [3][0][][] */ 90,60,127,-60,-1,-75,14,-50, 
  /* [4][0][][] */ -127,3,-67,0,31,21,-31,-36, 
  /* [5][0][][] */ -125,17,-58,-19,31,16,-64,-127, 
  /* [6][0][][] */ -61,-127,-117,36,95,-13,22,36, 
  /* [7][0][][] */ -90,-127,-97,-83,-112,-84,29,84, 
  /* [8][0][][] */ 63,12,-3,14,76,-20,-127,32, 
  /* [9][0][][] */ -24,41,-55,76,-71,-42,127,-41, 
  /* [10][0][][] */ -24,101,51,41,127,-38,-17,49, 
  /* [11][0][][] */ -77,-18,-11,-9,-68,115,127,-6, 
  /* [12][0][][] */ 68,43,-127,26,-17,-43,-66,-10, 
  /* [13][0][][] */ 32,-2,-64,12,3,-127,-13,-25, 
  /* [14][0][][] */ 34,-79,81,9,127,-115,-60,43, 
  /* [15][0][][] */ -69,-42,3,127,85,90,-78,34, 
  /* [16][0][][] */ 110,16,-26,22,94,-122,-127,-26, 
  /* [17][0][][] */ 69,127,54,83,50,43,33,-106, 
  /* [18][0][][] */ 32,-17,-22,38,127,27,14,-7, 
  /* [19][0][][] */ 16,127,13,20,-94,20,3,-11, 
  /* [20][0][][] */ -42,78,80,-127,40,52,-37,121, 
  /* [21][0][][] */ -27,86,74,-127,30,22,2,82, 
  /* [22][0][][] */ -77,-45,-73,27,-118,127,112,-18, 
  /* [23][0][][] */ 127,66,-117,66,-7,-30,-104,-9, 
  /* [24][0][][] */ -65,29,22,9,0,59,-127,91, 
  /* [25][0][][] */ -127,-56,-121,21,-62,-51,51,93, 
  /* [26][0][][] */ 51,-21,-55,-59,110,-44,127,-60, 
  /* [27][0][][] */ 127,-64,0,80,5,30,-13,101, 
  /* [28][0][][] */ 3,8,67,0,127,-51,9,-92, 
  /* [29][0][][] */ -25,-29,-38,-47,-51,4,127,-44, 
  /* [30][0][][] */ 20,-127,-54,-52,-85,19,36,-25, 
  /* [31][0][][] */ 14,26,-32,-12,-127,-10,-26,4, 
  /* [32][0][][] */ 40,-93,-78,100,14,-102,127,-117, 
  /* [33][0][][] */ 88,127,52,27,83,-59,-79,-16, 
  /* [34][0][][] */ -71,-6,127,5,8,58,42,2, 
  /* [35][0][][] */ -3,53,127,-15,-42,-80,-31,28, 
  /* [36][0][][] */ -111,26,57,-15,-25,127,47,42, 
  /* [37][0][][] */ -45,-121,-14,-127,-1,-91,53,35, 
  /* [38][0][][] */ 50,-15,86,-52,26,54,-127,-19, 
  /* [39][0][][] */ 12,99,-127,-32,-34,6,18,57, 
  /* [40][0][][] */ 40,-38,5,31,3,6,4,127, 
  /* [41][0][][] */ -42,121,127,47,26,76,-91,46, 
  /* [42][0][][] */ 61,-127,-77,-16,-51,8,-14,-61, 
  /* [43][0][][] */ 1,-37,14,-37,127,-29,20,35, 
  /* [44][0][][] */ -14,127,112,-15,-12,32,-56,36, 
  /* [45][0][][] */ -46,45,-2,82,-114,27,-127,30, 
  /* [46][0][][] */ -70,-36,47,71,-126,-127,-48,-1, 
  /* [47][0][][] */ 6,45,33,-86,-127,13,-22,50, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0017712560947984457, 0.0023294691927731037, 0.003772274125367403, 0.0019182567484676838, 0.0028052262496203184, 0.0021956355776637793, 0.001388082280755043, 0.0016886567464098334, 0.0040270769968628883, 0.0023993495851755142, 0.0028186968993395567, 0.0022359394934028387, 0.0026764762587845325, 0.0031014848500490189, 0.0032498727086931467, 0.0013512287987396121, 0.0023527743760496378, 0.0026094249915331602, 0.0018128985539078712, 0.0042098644189536572, 0.0018239255296066403, 0.0023383866064250469, 0.0023467631544917822, 0.0015983212506398559, 0.0023847601842135191, 0.0023481242824345827, 0.0025106910616159439, 0.0034663374535739422, 0.00125406205188483, 0.0033598535228520632, 0.0024948159698396921, 0.0022417607251554728, 0.0015825076261535287, 0.0016892343992367387, 0.0026370079722255468, 0.0017162144649773836, 0.0030854684300720692, 0.003332996740937233, 0.0024309132713824511, 0.001127462019212544, 0.0036790219601243734, 0.00061126012587919831, 0.0020915551576763391, 0.0046728965826332569, 0.0011531118070706725, 0.0027333502657711506, 0.0025809893850237131, 0.0025173267349600792, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1603, 2388, 24543, -4308, 11255, -11504, 7387, -10541, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.4777504778467119e-05, 0.00011507749877637252, 0.00012515492562670261, 0.00010818988084793091, 0.00012437278928700835, 9.0352834376972169e-05, 7.9254590673372149e-05, 0.00010268743062624708, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -55,-74,-35,-121,-6,5,115,86,-114,-121,-37,32,-60,-9,-63,60,-79,12,43,109,55,-10,4,78,89,84,45,-30,-97,-66,-76,-66,-81,118,68,-79,19,-51,127,-26,73,-30,-9,-116,24,-36,-43,-66, 
  /* [1][0][][] */ -44,32,-16,-50,-77,73,-11,-29,-53,44,-23,38,28,37,-42,6,-12,-104,85,-42,96,27,-83,23,61,12,-81,10,38,-14,64,26,-30,-14,11,-32,1,73,-7,-30,76,23,0,-17,127,-29,-61,48, 
  /* [2][0][][] */ -41,-50,117,-37,63,-38,-7,-2,-6,-12,-17,53,-8,-44,-37,-127,-46,-86,-19,14,-75,30,-58,-14,-40,18,-3,-55,-28,11,-37,-15,-6,5,33,-18,33,-30,-37,12,28,-47,33,-62,-13,-48,-55,-54, 
  /* [3][0][][] */ 53,8,26,32,5,-43,-9,14,-25,-4,67,-61,-51,27,-12,52,90,13,6,56,-87,-79,127,27,-14,-13,-74,-27,-70,71,73,-66,40,-112,-10,18,11,-76,-23,70,-60,-51,28,5,-91,-50,69,-18, 
  /* [4][0][][] */ 7,-22,50,-31,5,-22,-4,-31,-64,-16,-7,-13,29,-46,41,-127,32,24,-12,-33,7,10,-7,-1,-24,5,43,-16,17,10,-125,2,-36,-15,28,-7,40,10,29,1,-28,-20,-61,14,-38,-87,-14,1, 
  /* [5][0][][] */ 21,-38,61,71,24,5,-4,-20,-61,4,-61,22,44,-19,-2,-58,74,90,-23,-24,111,-91,127,-107,-52,42,-14,96,15,18,-50,-58,-20,-51,-73,-12,71,47,71,-19,-123,53,23,19,71,7,107,-7, 
  /* [6][0][][] */ -46,64,-96,77,8,-4,12,-12,-2,-13,46,-86,-79,-9,-24,8,-127,9,-20,63,25,50,-68,-120,-33,3,15,77,-42,-30,-34,-3,28,69,-52,-60,-41,-4,90,15,64,69,-122,-43,-49,115,-15,-61, 
  /* [7][0][][] */ 32,63,-68,38,26,88,77,67,42,102,-89,31,-42,5,-50,-52,7,46,96,79,77,9,100,35,90,101,-64,89,-74,1,23,-59,29,-71,-23,54,43,88,-71,71,-76,52,5,-34,127,-35,39,-55, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.003178043756633997, 0.0048907934688031673, 0.0053190845064818859, 0.0045980699360370636, 0.0052858432754874229, 0.0038399954792112112, 0.0033683199435472488, 0.0043642157688736916, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1247, -72, -433, -2543, -157, -1564, 4608, 9577, -6148, 1496, -8047, 206, -4635, -2173, -4079, 4572, 12354, 7612, -1108, -2666, -7762, -138, 11986, -3281, 784, -1767, 4218, -7313, -972, -1373, -10460, 7674, 4340, 904, 5015, 319, -193, -477, 23216, 3755, 3889, 141, -3021, 9496, 2341, 10137, 29, 1639, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00021964199549984187, 0.00014550866035278887, 0.00047596369404345751, 0.00023375025193672627, 0.00016033866268116981, 0.00018263467063661665, 0.00019164936384186149, 0.00022739628911949694, 6.4740939706098288e-05, 0.00022571471345145255, 0.00015617006283719093, 0.00088336970657110214, 0.00038856430910527706, 0.00028792285593226552, 0.00022564544633496553, 0.00054811494192108512, 0.00011358093615854159, 7.2875955083873123e-05, 0.0001980987872229889, 0.00026250589871779084, 0.00023018152569420636, 0.00027740115183405578, 0.00010110290895681828, 0.00043977308087050915, 0.00023260439047589898, 0.00033297066693194211, 0.00040228752186521888, 0.00017597498663235456, 0.00021673482842743397, 0.00040076064760796726, 0.00014230771921575069, 0.00013820138701703399, 0.00010515670874156058, 0.00032340505276806653, 0.00017325756198260933, 0.00027652751305140555, 0.0013347470667213202, 0.00027987465728074312, 7.3992348916362971e-05, 0.00017671179375611246, 0.00028492810088209808, 0.00016727740876376629, 0.00025204548728652298, 0.00014408287825062871, 0.00025086849927902222, 7.0506233896594495e-05, 0.00014851006562821567, 0.00015299518418032676, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 61,-58,14,25,-19,-104,-50,-12,-1,34,-10,6,57,0,6,12,122,-57,84,3,-16,-9,-60,10,-78,-10,14,-5,-50,77,37,-101,97,-36,-80,-93,-1,-53,-20,-105,2,85,45,-26,-12,65,127,20, -127,-98,-20,127,-75,58,-87,81,94,18,-2,-37,54,24,9,-31,-43,2,32,-3,6,127,17,127,80,-36,-26,48,37,-101,12,-46,120,-12,-60,-127,23,5,-99,-95,-127,-4,-123,-108,78,87,30,75, -44,58,14,19,-15,127,36,49,52,-90,23,-7,-22,11,-2,14,-105,14,-83,-56,-5,-25,127,14,-37,5,17,36,10,35,38,34,37,-21,-63,122,-15,16,-11,85,37,-26,69,-82,-19,66,-17,-53, 
  /* [0][1][][] */ 21,11,-22,5,41,-119,91,-127,1,19,62,49,127,21,17,-22,-35,-68,60,40,59,-53,52,3,-75,127,-76,3,127,-71,14,-127,-44,-19,-80,9,47,-51,-62,0,109,127,72,-127,-89,-79,-20,127, 93,-127,127,8,127,30,-72,-71,61,127,127,-127,-78,127,127,127,127,127,109,127,127,91,-2,2,114,-97,-127,107,37,127,127,-17,-127,127,127,104,-127,127,-127,-127,20,1,-127,-16,127,-127,-53,66, 3,73,-42,0,-52,125,-127,90,127,-115,49,62,-25,12,20,-54,15,33,-127,-22,19,-106,-52,-10,127,-2,-31,127,-61,-23,30,-10,-36,7,95,-2,40,9,-10,-73,104,-13,92,36,-119,87,47,-78, 
  /* [0][2][][] */ 0,77,9,-39,-7,-117,-30,-46,4,-16,34,26,0,-8,-10,-21,-55,-12,-10,-39,2,-4,81,-14,-97,19,27,-11,15,-1,17,2,-3,-16,-63,27,53,-15,-15,73,-24,-27,18,-26,-57,20,-7,-12, 49,30,-42,-33,22,3,95,-127,123,-36,-26,16,-42,-23,-21,-90,-34,117,-15,24,25,15,-45,-25,-77,52,52,-18,-110,7,-10,-15,-58,-1,-78,-9,88,-24,-35,97,-114,-19,-15,29,57,54,-13,-116, -20,86,2,-14,-17,-5,-8,-67,-50,-66,-34,30,43,-26,1,-3,61,36,-32,-21,-5,-33,-78,-16,17,-10,19,-8,0,0,0,16,9,-16,-53,-50,-3,6,14,11,-13,-18,37,6,-45,-12,41,-96, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0093347849324345589, 0.0061841178685426712, 0.02022845670580864, 0.0099343853071331978, 0.0068143927492201328, 0.0077619734220206738, 0.0081450976431369781, 0.0096643418073654175, 0.0027514898683875799, 0.0095928749069571495, 0.0066372272558510303, 0.037543211132287979, 0.01651398278772831, 0.012236720882356167, 0.00958993099629879, 0.023294884711503983, 0.0048271897248923779, 0.0030972280073910952, 0.0084191979840397835, 0.011156500317156315, 0.009782714769244194, 0.011789548210799694, 0.0042968736961483955, 0.018690355122089386, 0.0098856864497065544, 0.014151252806186676, 0.017097219824790955, 0.0074789370410144329, 0.0092112300917506218, 0.017032327130436897, 0.0060480781830847263, 0.0058735585771501064, 0.0044691599905490875, 0.013744714669883251, 0.007363446056842804, 0.011752419173717499, 0.056726749986410141, 0.011894672177731991, 0.003144674701616168, 0.0075102508999407291, 0.012109443545341492, 0.0071092899888753891, 0.010711932554841042, 0.0061235222965478897, 0.010661911219358444, 0.002996515017002821, 0.0063116778619587421, 0.0065022949129343033, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3071, 4335, 6299, 1572, 889, -1422, 5026, 19237, 2243, -1262, 4009, -1476, 16010, -1182, 1127, 9125, 159, 2304, 32, 3140, 4994, 3489, 631, 23234, 6557, 1896, 8079, 1269, 2546, 1450, 672, 950, 328, 2908, -543, 27, -2404, -667, 1727, 5667, 5442, 1792, 2700, 5583, 3977, 2224, 2563, 3150, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.000195216343854554, 0.00018025525787379593, 0.00013196859799791127, 0.00020182436855975538, 0.00033648454700596631, 0.00026724379858933389, 0.00018238526536151767, 5.5060292652342469e-05, 0.00023064525157678872, 0.00023671824601478875, 0.00020630157086998224, 0.00028353577363304794, 6.4873034716583788e-05, 0.00028142120572738349, 0.00030438197427429259, 0.00010340354492655024, 0.00042346815462224185, 0.00020975281950086355, 0.00023363572836387902, 0.00023377405887003988, 0.00015457098197657615, 0.00022157745843287557, 0.00035160648985765874, 4.9309994210489094e-05, 0.00014867800928186625, 0.00023848928685765713, 0.00011875301424879581, 0.00027236557798460126, 0.00028969455161131918, 0.00026797119062393904, 0.00043387783807702363, 0.0004945846158079803, 0.00032696902053430676, 0.00020232249516993761, 0.00031188828870654106, 0.00030366677674464881, 0.00028892597765661776, 0.00023558471002615988, 0.00025894306600093842, 0.00012958516890648752, 0.00016396674618590623, 0.0002166448684874922, 0.00021057449339423329, 0.00015264868852682412, 0.00019871312542818487, 0.00024464528542011976, 0.00026502879336476326, 0.00024082834715954959, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 83,109,-82,-70,39,97,16,127, 
  /* [1][0][][] */ 55,-106,58,-127,-77,72,-72,-48, 
  /* [2][0][][] */ -45,127,127,53,72,-4,5,20, 
  /* [3][0][][] */ 98,10,-92,69,22,-123,-127,-33, 
  /* [4][0][][] */ -4,63,33,6,-11,127,108,66, 
  /* [5][0][][] */ 32,115,-127,-34,53,81,5,-8, 
  /* [6][0][][] */ 15,127,71,87,67,7,-19,-107, 
  /* [7][0][][] */ 127,2,-61,10,17,26,96,-17, 
  /* [8][0][][] */ 14,98,127,67,127,110,99,-77, 
  /* [9][0][][] */ 59,89,-92,-127,-7,55,58,75, 
  /* [10][0][][] */ -55,-76,32,-81,40,-48,-71,127, 
  /* [11][0][][] */ 5,-88,-127,6,2,-14,24,-14, 
  /* [12][0][][] */ 20,-127,-92,-27,-123,16,0,-21, 
  /* [13][0][][] */ -7,2,-107,86,-127,-27,15,-21, 
  /* [14][0][][] */ -45,-33,-127,-20,56,-5,-32,-49, 
  /* [15][0][][] */ 41,-77,-127,11,-89,-20,23,-22, 
  /* [16][0][][] */ 127,-27,-13,63,-37,3,28,83, 
  /* [17][0][][] */ -31,100,127,-7,-48,-36,-27,-28, 
  /* [18][0][][] */ 9,-122,59,127,-40,-104,39,-109, 
  /* [19][0][][] */ 127,-49,-38,55,-77,20,26,92, 
  /* [20][0][][] */ -25,-127,73,97,-50,-113,-14,-89, 
  /* [21][0][][] */ -31,-63,-12,-82,127,-9,58,13, 
  /* [22][0][][] */ -127,28,-82,60,56,31,-87,-127, 
  /* [23][0][][] */ -93,-77,28,-12,-112,95,127,-41, 
  /* [24][0][][] */ -48,4,-48,14,-57,98,127,-54, 
  /* [25][0][][] */ 12,-127,-124,-75,-39,-14,-9,-53, 
  /* [26][0][][] */ -7,93,-6,127,-78,20,-41,-12, 
  /* [27][0][][] */ 31,-94,41,75,18,-63,-13,-127, 
  /* [28][0][][] */ 47,127,3,36,83,-18,46,-59, 
  /* [29][0][][] */ 127,34,-97,-68,49,-125,-3,4, 
  /* [30][0][][] */ 11,-10,49,-127,20,3,25,-23, 
  /* [31][0][][] */ 43,-40,19,74,3,16,4,127, 
  /* [32][0][][] */ -75,-32,15,-44,-78,127,33,89, 
  /* [33][0][][] */ -25,12,21,-33,1,127,-81,79, 
  /* [34][0][][] */ 34,127,-81,-23,25,34,-72,8, 
  /* [35][0][][] */ -26,-123,60,61,-18,-127,21,-93, 
  /* [36][0][][] */ -10,-25,-63,-38,-127,-30,27,45, 
  /* [37][0][][] */ -57,-107,127,91,-49,-104,-26,-71, 
  /* [38][0][][] */ -65,25,61,-75,-127,-55,-23,64, 
  /* [39][0][][] */ 39,-119,22,95,-47,-111,-20,-127, 
  /* [40][0][][] */ 0,67,-25,62,-127,-41,-69,65, 
  /* [41][0][][] */ 126,122,-127,-124,91,40,-6,5, 
  /* [42][0][][] */ -8,-55,-82,43,102,81,127,-12, 
  /* [43][0][][] */ 80,0,118,-13,-64,21,60,127, 
  /* [44][0][][] */ 42,95,-13,-28,58,-86,-127,28, 
  /* [45][0][][] */ 69,4,85,89,121,-127,-24,-69, 
  /* [46][0][][] */ 110,-27,-39,127,72,84,27,87, 
  /* [47][0][][] */ -31,-8,6,65,-47,-25,127,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0025014381390064955, 0.0023097316734492779, 0.0016910022823140025, 0.0025861111935228109, 0.0043116025626659393, 0.0034243743866682053, 0.0023370250128209591, 0.00070552452234551311, 0.0029554124921560287, 0.003033229848369956, 0.0026434806641191244, 0.0036331345327198505, 0.00083126174286007881, 0.0036060390993952751, 0.0039002506528049707, 0.0013249791227281094, 0.0054261819459497929, 0.0026877038180828094, 0.002993731526657939, 0.0029955040663480759, 0.0019806218333542347, 0.0028392209205776453, 0.0045053702779114246, 0.00063184206373989582, 0.0019051111303269863, 0.0030559233855456114, 0.0015216621104627848, 0.0034900032915174961, 0.0037120508495718241, 0.0034336948301643133, 0.0055595682933926582, 0.0063374447636306286, 0.0041896738111972809, 0.0025924940127879381, 0.0039964341558516026, 0.0038910864386707544, 0.0037022028118371964, 0.0030187051743268967, 0.0033180115278810263, 0.0016604618867859244, 0.0021010159980505705, 0.0027760162483900785, 0.0026982324197888374, 0.0019559902139008045, 0.0025462447665631771, 0.0031348045449703932, 0.0033959918655455112, 0.0030858954414725304, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 5712, 10976, -5320, 3660, -5611, 4291, -9660, -13950, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021618537721224129, 0.00010576510976534337, 0.00011438912770245224, 0.00012701086234301329, 0.00013744608440902084, 9.0398767497390509e-05, 0.00012037632404826581, 0.00010813050903379917, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -44,-11,23,21,-33,-2,16,11,-31,0,-49,-44,-32,-50,1,-20,39,-33,36,33,-13,38,-41,12,-8,-37,49,-8,3,-10,11,10,70,27,38,-127,1,-3,-19,-37,18,-16,43,47,24,26,24,11, 
  /* [1][0][][] */ -1,47,66,10,-2,51,-13,-9,-9,27,-21,-90,23,126,-27,43,-12,23,-28,-54,-19,-82,-62,19,-65,-12,-1,-104,-62,-12,24,-78,23,60,-35,14,127,-13,22,46,-26,87,-100,-34,122,-23,-34,-28, 
  /* [2][0][][] */ 2,-12,-67,36,6,69,26,-18,-11,51,-29,32,92,-90,18,-65,29,-76,12,43,-61,57,-27,-11,-1,65,-13,-69,-2,24,22,-71,-71,-96,35,5,107,23,-1,-56,1,20,86,23,127,7,9,27, 
  /* [3][0][][] */ 0,33,-65,54,18,-56,-83,-76,0,-9,-34,-15,3,23,31,80,-19,9,-49,23,23,-86,52,-43,-66,-20,127,-18,-40,-8,-48,14,15,-61,1,-21,-17,-43,-15,89,-50,-28,5,11,31,9,-33,35, 
  /* [4][0][][] */ -42,-56,-4,12,48,-22,-10,-10,46,-45,70,-82,3,27,11,10,-14,-27,18,-20,0,-46,15,-25,10,-4,49,52,37,24,-15,30,-13,-2,-4,9,-65,110,44,-20,42,-48,-22,-28,-81,8,127,15, 
  /* [5][0][][] */ 33,-22,-14,-12,41,-48,43,-127,29,-24,-12,112,-69,90,27,-59,10,-110,4,14,-49,50,-20,-42,-77,99,-21,-4,-23,55,-31,-59,32,57,63,-11,-40,-9,-66,-59,-10,-68,-42,0,-13,79,117,12, 
  /* [6][0][][] */ 47,-5,27,-21,-34,-32,-42,14,-55,-5,-52,127,-42,-41,-16,54,9,51,-6,49,28,-76,-25,21,14,47,-73,12,2,-43,12,47,14,18,-1,1,5,17,2,1,-24,-35,28,64,0,-41,76,-11, 
  /* [7][0][][] */ 4,-3,-9,60,10,44,8,26,14,9,48,-12,103,109,58,46,51,34,-21,17,4,-16,-59,-22,12,1,-26,50,29,-9,-26,-20,21,3,30,-77,-52,18,28,35,-12,35,68,127,-40,-7,-70,72, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0091878781095147133, 0.0044950172305107117, 0.0048615378327667713, 0.0053979614749550819, 0.0058414586819708347, 0.0038419475313276052, 0.0051159937866032124, 0.004595546517521143, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11762, 4636, 8061, 5398, -5658, -4077, 211, 30159, -166, -4042, 4329, 57012, -1457, 703, -896, 8546, -6545, 18251, 1292, 5660, 8834, 219, 8332, -7079, 9126, 1929, 4838, 15589, 1188, -3839, -4870, 11853, 2877, 101, -113, 6597, -13203, 7119, 2931, 24888, -762, -4438, 8313, -2319, -3797, -667, 3895, -4907, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.8171051680110395e-05, 0.00013109711289871484, 0.00012249303108546883, 0.00015770737081766129, 0.00044120821985416114, 0.00016924136434681714, 0.00016385583148803562, 0.00010468402615515515, 0.00011740117042791098, 6.6850770963355899e-05, 6.3875842897687107e-05, 4.733547757496126e-05, 8.2712991570588201e-05, 6.0707490774802864e-05, 0.00021156224829610437, 0.00017843552632257342, 0.00010810922685777768, 0.00028747346368618309, 0.00010454803123138845, 0.00019719800911843777, 0.00010164859850192443, 0.00047902337973937392, 9.5275601779576391e-05, 0.00023802854411769658, 0.00011072155757574365, 0.00011960275878664106, 5.2744162530871108e-05, 8.1934886111412197e-05, 0.00021008354087825865, 0.00079097913112491369, 0.00022871600231155753, 8.7005857494659722e-05, 0.0001177895101136528, 0.00014721338811796159, 0.0001943922252394259, 8.4007348050363362e-05, 6.4510306401643902e-05, 5.7305402151541784e-05, 0.00013705945457331836, 5.2733466873178259e-05, 0.00015298687503673136, 0.00017702601326163858, 4.6843237214488909e-05, 0.00010040849883807823, 6.5215026552323252e-05, 0.00030968425562605262, 6.3045707065612078e-05, 0.00012865262397099286, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 22,-67,-44,-18,123,-85,53,-46,-126,-48,4,-48,118,86,78,-71,53,-40,2,-22,-87,13,-10,24,4,91,45,-77,45,-61,51,-51,-47,-91,34,95,63,59,89,-127,-123,-15,127,72,50,-127,121,97, -71,-40,-85,17,-121,119,29,-56,-111,50,71,-126,118,95,127,-71,-55,-96,30,-39,-71,73,-114,127,-43,127,104,-49,65,-36,-29,-127,-27,-77,60,127,127,127,62,-77,-127,-58,120,81,123,119,118,119, -66,-53,-30,48,-38,-5,-6,-16,27,23,47,-63,44,82,-49,-40,-65,-39,39,-3,-17,29,-51,-9,-80,80,61,-127,24,39,78,-97,28,27,-35,25,122,60,26,-32,-44,118,42,58,74,38,43,-104, 
  /* [0][1][][] */ -127,-75,-30,-77,-65,-52,65,-70,-109,-127,127,-106,127,99,-93,-74,127,-127,-61,-89,-127,82,-74,8,5,27,76,-84,-95,-62,7,-47,-37,-127,-127,65,55,96,7,-121,40,-30,57,127,115,106,127,-95, -104,-127,-127,-127,-10,127,127,-127,59,114,123,-127,80,127,40,-127,64,-114,-127,-127,-68,127,-106,63,-105,69,127,-93,-127,127,-50,-124,-127,-63,48,70,94,58,-11,-110,71,-61,118,121,127,-15,109,127, -95,-49,-96,93,104,-44,54,-50,96,4,6,-25,32,76,56,-45,21,-21,-26,-40,-56,49,-127,-22,-127,48,79,-114,-58,31,127,-98,-104,26,81,37,96,68,-5,-101,14,127,86,23,93,-54,-2,63, 
  /* [0][2][][] */ -120,-68,34,6,-5,0,50,-17,58,-57,42,-78,50,41,-30,19,-90,-23,78,-9,4,93,-113,-21,20,11,89,-56,60,83,-10,-29,35,-62,-38,17,71,-2,-74,-86,42,20,94,31,29,47,21,-23, -66,-24,-65,-117,127,67,47,-28,127,61,-35,-78,43,12,-106,-38,53,-3,47,-33,-29,-11,-62,31,-45,-30,106,-35,35,19,-69,-38,-58,-28,-56,42,-15,36,-127,-56,72,-24,115,69,73,-111,10,24, 9,-43,-45,-86,12,-9,-18,-27,-26,32,-32,-9,-3,29,28,-13,58,11,7,-14,-15,48,-48,-22,-17,-8,84,-54,31,-67,-3,9,-107,15,39,33,17,49,-57,-35,12,61,-20,-14,19,-22,19,64, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0028972697909921408, 0.0055716270580887794, 0.0052059534937143326, 0.0067025632597506046, 0.018751349300146103, 0.0071927579119801521, 0.006963872816413641, 0.0044490708969533443, 0.0049895495176315308, 0.0028411576058715582, 0.0027147233486175537, 0.0020117578096687794, 0.0035153022035956383, 0.0025800683069974184, 0.0089913951233029366, 0.0075835096649825573, 0.0045946422033011913, 0.012217622250318527, 0.0044432911090552807, 0.0083809150382876396, 0.0043200654909014702, 0.0203584935516119, 0.0040492131374776363, 0.010116213001310825, 0.0047056660987436771, 0.0050831171683967113, 0.0022416268475353718, 0.0034822325687855482, 0.0089285504072904587, 0.03361661359667778, 0.0097204297780990601, 0.0036977487616240978, 0.005006053950637579, 0.0062565691769123077, 0.0082616694271564484, 0.0035703121684491634, 0.0027416879311203957, 0.0024354795459657907, 0.0058250268921256065, 0.0022411723621189594, 0.006501941941678524, 0.0075236051343381405, 0.0019908375106751919, 0.0042673610150814056, 0.0027716385666280985, 0.013161581009626389, 0.0026794425211846828, 0.0054677366279065609, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1108, -422, 60, 893, 13756, 1588, -643, 5703, 1660, 1282, 138, 3765, 528, 271, -372, 536, 3156, 10020, 2591, -1058, 787, -1694, 21, 3461, -375, -838, 1636, -290, 2821, 22332, 4828, -303, 358, -321, 2000, -475, 149, -234, 1418, 1116, 1473, 1084, 60, -229, 1094, 1486, 1053, -382, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0004713489324785769, 0.00041076357592828572, 0.00054816919146105647, 0.00045732039143331349, 7.4785581091418862e-05, 0.00040522406925447285, 0.00055288727162405849, 0.00018421006097923964, 0.00029880853253416717, 0.00056495238095521927, 0.00037555003655143082, 0.00023019046057015657, 0.00027450724155642092, 0.00049678841605782509, 0.00037792441435158253, 0.00032389975967817008, 0.00025814358377829194, 9.6239920821972191e-05, 0.00028735489468090236, 0.00030972462263889611, 0.00047479922068305314, 0.00017922563711181283, 0.00057668320368975401, 0.00023738012532703578, 0.00038129760650917888, 0.00067944277543574572, 0.00032081591780297458, 0.00052812480134889483, 0.0002814147446770221, 4.724178506876342e-05, 0.0001913944142870605, 0.00055569841060787439, 0.00052136584417894483, 0.00030474390950985253, 0.00039035722147673368, 0.00035165439476259053, 0.00044474366586655378, 0.00064369273604825139, 0.0003018434508703649, 0.00056184199638664722, 0.000441722571849823, 0.00051998195704072714, 0.0004825650539714843, 0.00047303413157351315, 0.000391863111872226, 0.00033563535544089973, 0.00031085900263860822, 0.00032700086012482643, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 11,9,29,1,-94,-65,-127,33, 
  /* [1][0][][] */ 91,-70,-46,-31,127,-80,107,5, 
  /* [2][0][][] */ -90,73,-20,-127,30,-49,-2,29, 
  /* [3][0][][] */ 38,23,15,-27,67,70,127,-11, 
  /* [4][0][][] */ -42,-127,115,16,-65,-104,24,-50, 
  /* [5][0][][] */ 127,-3,107,44,-77,-17,-21,-14, 
  /* [6][0][][] */ 40,30,127,-20,68,-34,-39,33, 
  /* [7][0][][] */ 14,-3,-127,-20,-43,73,85,-63, 
  /* [8][0][][] */ 17,127,-17,37,36,121,40,47, 
  /* [9][0][][] */ 22,127,-19,102,-39,-84,78,112, 
  /* [10][0][][] */ 9,-101,-28,-22,-71,-127,-26,-72, 
  /* [11][0][][] */ -127,-95,109,64,-56,-109,81,58, 
  /* [12][0][][] */ -40,61,-109,77,39,-33,-42,127, 
  /* [13][0][][] */ 65,-127,89,85,1,26,25,-45, 
  /* [14][0][][] */ -15,127,-32,-123,7,-79,-14,-67, 
  /* [15][0][][] */ 56,127,9,-20,45,-90,99,-98, 
  /* [16][0][][] */ -116,-113,-86,83,-11,50,48,127, 
  /* [17][0][][] */ -16,-126,-127,76,-76,50,-37,121, 
  /* [18][0][][] */ -92,-67,-17,127,-31,90,-13,78, 
  /* [19][0][][] */ 112,-120,127,-116,4,-69,39,-46, 
  /* [20][0][][] */ -9,63,13,14,3,127,75,11, 
  /* [21][0][][] */ 45,127,46,-32,51,-83,108,-124, 
  /* [22][0][][] */ 35,17,96,2,-8,127,50,-46, 
  /* [23][0][][] */ -66,-54,51,-73,68,88,-40,-127, 
  /* [24][0][][] */ -94,-95,27,-58,81,127,-38,-97, 
  /* [25][0][][] */ 127,-2,-80,8,6,44,-65,0, 
  /* [26][0][][] */ -127,-44,-99,-38,-59,-76,-10,-14, 
  /* [27][0][][] */ 83,48,-16,-48,-127,-3,112,121, 
  /* [28][0][][] */ -96,-68,17,34,-23,-127,-4,-12, 
  /* [29][0][][] */ 95,127,-14,-117,97,31,-100,17, 
  /* [30][0][][] */ -63,-58,53,-62,65,69,-25,-127, 
  /* [31][0][][] */ 47,53,-17,127,10,-76,7,13, 
  /* [32][0][][] */ -14,127,2,19,27,56,4,10, 
  /* [33][0][][] */ -54,127,-121,12,25,-59,-48,22, 
  /* [34][0][][] */ -87,-127,-43,109,44,-30,3,95, 
  /* [35][0][][] */ -75,124,-49,-5,60,127,66,91, 
  /* [36][0][][] */ 58,44,-8,-25,-127,-28,83,80, 
  /* [37][0][][] */ -59,117,34,27,-112,127,3,-73, 
  /* [38][0][][] */ 5,66,68,-8,127,121,125,100, 
  /* [39][0][][] */ -31,-47,22,-17,25,41,-95,127, 
  /* [40][0][][] */ -52,-19,-45,127,-15,30,3,31, 
  /* [41][0][][] */ 127,0,55,52,-37,-9,29,-19, 
  /* [42][0][][] */ -58,15,-54,-127,69,-77,11,83, 
  /* [43][0][][] */ 25,-7,92,-4,61,111,127,11, 
  /* [44][0][][] */ -19,-4,-72,127,51,2,-38,-32, 
  /* [45][0][][] */ 10,98,86,-88,-66,-81,49,-127, 
  /* [46][0][][] */ -25,-127,-35,47,-29,51,-61,117, 
  /* [47][0][][] */ 83,25,109,30,53,127,125,-28, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045353397727012634, 0.003952384926378727, 0.0052745076827704906, 0.0044003566727042198, 0.00071959011256694794, 0.0038990834727883339, 0.0053199054673314095, 0.0017724771751090884, 0.0028751485515385866, 0.0054359962232410908, 0.0036135588306933641, 0.0022149025462567806, 0.0026413204614073038, 0.004780119750648737, 0.0036364051047712564, 0.00311657739803195, 0.0024838687386363745, 0.00092602468794211745, 0.0027649411931633949, 0.0029801838099956512, 0.0045685386285185814, 0.0017245168564841151, 0.0055488706566393375, 0.0022840818855911493, 0.0036688621621578932, 0.0065376278944313526, 0.0030869045294821262, 0.0050816396251320839, 0.0027077849954366684, 0.0004545625124592334, 0.0018416054081171751, 0.0053469543345272541, 0.0050166049040853977, 0.002932259114459157, 0.003756033955141902, 0.0033836339134722948, 0.0042793429456651211, 0.0061936392448842525, 0.0029043508693575859, 0.0054060681723058224, 0.0042502735741436481, 0.0050032888539135456, 0.0046432618983089924, 0.0045515550300478935, 0.0037705237045884132, 0.0032294979318976402, 0.0029910989105701447, 0.0031464165076613426, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -9451, -4237, 10586, -10133, 20712, 4460, -11023, 12905, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00016764705651439726, 0.00024166516959667206, 0.00018269548309035599, 0.00022554428142029792, 0.00020976080850232393, 0.00019744709425140172, 0.00018359576642978936, 0.00018728332361206412, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -3,-3,-24,-99,-21,-34,11,-45,40,42,-19,12,121,127,-6,-120, 
  /* [1][0][][] */ 127,-54,-41,-4,-34,70,-67,-58,-50,98,-31,-38,-7,10,-66,-14, 
  /* [2][0][][] */ -22,-95,48,28,53,-72,-70,-22,34,-91,16,-127,45,-16,-84,27, 
  /* [3][0][][] */ 30,18,13,11,-29,73,-64,-14,127,56,10,6,11,-13,4,24, 
  /* [4][0][][] */ -79,-12,-34,-127,-15,31,48,-104,30,-23,-28,-39,-107,29,-36,-12, 
  /* [5][0][][] */ 87,66,41,-29,30,-43,-127,-112,-19,-79,76,58,-51,22,66,-27, 
  /* [6][0][][] */ 94,47,-127,-65,25,-51,6,-67,-40,35,-117,82,91,-84,11,62, 
  /* [7][0][][] */ -127,0,119,-29,-53,6,-15,-67,-60,64,96,-21,56,-31,21,36, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0071250000037252903, 0.010270769707858562, 0.0077645578421652317, 0.0095856320112943649, 0.0089148338884115219, 0.0083915013819932938, 0.0078028198331594467, 0.0079595409333705902, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 22185, 424, -380, 4666, 3443, 16, 11082, 593, -120, 221, 5, 3196, 2296, 401, -963, -797, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010992978059221059, 0.00029094811179675162, 0.00017731080879457295, 0.00019227531447540969, 0.00061400950653478503, 0.00091834901832044125, 0.00013986567500978708, 0.0010321503505110741, 0.00038081049569882452, 0.00092105387011542916, 0.000260739034274593, 0.00025364966131746769, 8.3099068433512002e-05, 0.00020340282935649157, 0.00024896470131352544, 0.00057747465325519443, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 5,-9,10,1,-28,7,-10,15,2,-8,1,-26,-14,-10,-1,-1, 10,-19,18,0,8,-4,-6,-26,-11,11,-8,92,3,20,-4,0, 5,-14,12,-6,-11,-16,-20,11,1,5,-10,-10,21,-8,-2,1, 
  /* [0][1][][] */ 12,-29,5,2,127,-23,-127,-19,127,127,-6,-47,117,-27,-1,-21, -127,127,127,-4,-107,-89,-20,-98,5,-105,127,127,127,127,127,127, 24,-12,-8,-1,-30,127,-2,-8,-6,-12,-12,-17,26,-7,-14,-9, 
  /* [0][2][][] */ 4,-17,-10,-24,-32,18,68,9,-11,-10,-37,-31,-3,-2,-2,-17, 27,-31,-16,-127,-4,-12,-3,127,-15,0,-18,-45,-18,-62,-11,-43, 10,-8,-9,-18,-17,-1,2,0,-9,1,-25,-16,15,-9,1,-17, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0046720155514776707, 0.012365294620394707, 0.0075357095338404179, 0.0081717008724808693, 0.026095403358340263, 0.039029832929372787, 0.0059442911297082901, 0.043866388499736786, 0.016184445470571518, 0.039144787937402725, 0.011081408709287643, 0.010780110955238342, 0.0035317102447152138, 0.008644619956612587, 0.010580999776721001, 0.02454267255961895, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 2641, 1779, -485, 3082, 88123, 40032, 3016, 83, 4590, 1983, 1753, 458, 6070, -1398, 3050, 42376, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00029966593137942255, 0.0010605192510411143, 0.00042689236579462886, 0.00019805107149295509, 1.7721004041959532e-05, 4.1903011151589453e-05, 0.00021814745559822768, 4.4005744712194428e-05, 0.00016636385407764465, 0.00011449818703113124, 0.00060512061463668942, 0.00097960431594401598, 0.00040801102295517921, 3.4192606108263135e-05, 0.00058910116786137223, 5.0641512643778697e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -89, -112, -32, 
  /* [0][1][][] */ 64, -39, 16, 
  /* [0][2][][] */ 31, 127, 18, 
  /* [1][0][][] */ 104, -94, -13, 
  /* [1][1][][] */ -127, 101, 18, 
  /* [1][2][][] */ 12, -3, -17, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 37, 96, 127, 
  /* [2][2][][] */ -12, -95, -81, 
  /* [3][0][][] */ 116, 121, 56, 
  /* [3][1][][] */ -1, -24, -16, 
  /* [3][2][][] */ -102, -127, -45, 
  /* [4][0][][] */ -2, -66, 25, 
  /* [4][1][][] */ 9, -127, 8, 
  /* [4][2][][] */ -12, -121, -20, 
  /* [5][0][][] */ -67, 38, 14, 
  /* [5][1][][] */ -127, 34, 16, 
  /* [5][2][][] */ -85, 4, -3, 
  /* [6][0][][] */ -17, 80, 127, 
  /* [6][1][][] */ -52, 54, -17, 
  /* [6][2][][] */ -35, -54, -90, 
  /* [7][0][][] */ 36, 9, -16, 
  /* [7][1][][] */ 127, 36, -11, 
  /* [7][2][][] */ 40, 12, -10, 
  /* [8][0][][] */ -20, -29, 54, 
  /* [8][1][][] */ -54, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -37, 58, -37, 
  /* [9][1][][] */ -41, 127, -30, 
  /* [9][2][][] */ -18, 78, -36, 
  /* [10][0][][] */ 23, 86, 11, 
  /* [10][1][][] */ -38, -127, -30, 
  /* [10][2][][] */ 11, 39, 17, 
  /* [11][0][][] */ 7, -20, 9, 
  /* [11][1][][] */ 64, -94, 34, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -42, 46, -10, 
  /* [12][1][][] */ -127, 110, 4, 
  /* [12][2][][] */ -80, 75, 3, 
  /* [13][0][][] */ 71, 13, -15, 
  /* [13][1][][] */ 127, 60, -38, 
  /* [13][2][][] */ 44, 46, -14, 
  /* [14][0][][] */ -33, -31, 43, 
  /* [14][1][][] */ 40, 93, -127, 
  /* [14][2][][] */ -18, -70, 77, 
  /* [15][0][][] */ -66, -24, 10, 
  /* [15][1][][] */ -113, -127, -7, 
  /* [15][2][][] */ -30, -84, -21, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.080088518559932709, 0.28343367576599121, 0.11409097909927368, 0.052930999547243118, 0.0047361040487885475, 0.011198971420526505, 0.058301948010921478, 0.011760946363210678, 0.044462293386459351, 0.030600709840655327, 0.16172413527965546, 0.26180842518806458, 0.10904476046562195, 0.0091382935643196106, 0.15744279325008392, 0.013534417375922203, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10392802953720093, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.078041642904281616, } };
const TfArray<1, int> quant50_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.05367935448884964, } };
const TfArray<1, int> quant53_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10287784785032272, } };
const TfArray<1, int> quant54_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.046845480799674988, } };
const TfArray<1, int> quant58_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.04611513763666153, } };
const TfArray<1, int> quant61_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.066128082573413849, } };
const TfArray<1, int> quant62_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.053645871579647064, } };
const TfArray<1, int> quant65_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.091658897697925568, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.059917759150266647, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.19516590237617493, } };
const TfArray<1, int> quant69_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
