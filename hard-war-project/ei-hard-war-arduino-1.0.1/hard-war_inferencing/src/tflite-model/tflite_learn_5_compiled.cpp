/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 19.09.2024 19:29:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0034072126727551222, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 20713, -31049, -26203, -29895, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00024267315166071057, 0.00019123937818221748, 0.0002335113676963374, 0.00019089355191681534, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 38,-37,-81,-86,116,-29,-24,-56,127,36,95,59,-52,-9,49,25,3,11,-120,58,11,85,-29,116,20,78,-8,45,71,-55,35,-16, 
  /* [1][0][][] */ 61,69,-59,-16,-73,42,112,45,-29,-93,-91,27,89,-51,104,-115,118,-127,5,-24,25,-52,-83,-52,-7,-82,57,-81,-29,-84,-26,-23, 
  /* [2][0][][] */ -21,81,30,68,-56,-8,62,36,-51,-127,68,-51,-72,60,-96,40,41,31,44,-119,-4,25,-46,-37,28,-75,56,-96,-1,29,55,48, 
  /* [3][0][][] */ 72,-68,80,7,-30,102,29,-5,12,-127,22,100,75,-16,-99,-19,110,-106,110,-2,-99,19,-1,-54,64,-7,-99,81,-66,116,36,62, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0042426544241607189, 0.0033434377983212471, 0.0040824790485203266, 0.0033373918849974871, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 74, 181, -850, -242, 2502, 59, -64, -40, -649, 403, 413, -100, -112, -442, -1662, -1101, 233, 562, -228, -122, -1162, -898, 1742, 1498, -609, -223, 114, -875, -870, -462, -589, -372, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.1600389017257839e-05, 4.4610471377382055e-05, 4.6803874283796176e-05, 5.8934179833158851e-05, 6.3015861087478697e-05, 7.5314186688046902e-05, 5.5594467994524166e-05, 5.7834837207337841e-05, 6.8556531914509833e-05, 7.3172595875803381e-05, 5.1675047870958224e-05, 5.476305159390904e-05, 6.2128121498972178e-05, 6.6335836891084909e-05, 5.2253279136493802e-05, 4.8682766646379605e-05, 4.7900852223392576e-05, 5.8728073781821877e-05, 4.629073737305589e-05, 7.1606860728934407e-05, 5.2684063120977953e-05, 5.6236214732052758e-05, 6.4095736888702959e-05, 7.3346767749171704e-05, 6.0255271819187328e-05, 8.2565609773155302e-05, 6.0740454500773922e-05, 5.4009789892006665e-05, 4.553768303594552e-05, 6.7009743361268193e-05, 4.3416181142674759e-05, 6.110082904342562e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -48,-58,70,13,64,-6,-62,-56,6,-66,-82,-1,39,3,-24,40,-39,-25,-32,-33,-48,-73,-14,76,-127,8,64,-42,56,2,-27,-51,44,-46,-71,50,-63,-50,-50,28,46,-97,-67,79,53,-106,82,-8,22,-56,-16,53,-57,-42,-60,60,-7,50,75,-102,-51,65,-31,25,-3,8,57,64,41,81,53,-75,76,-71,38,53,-76,13,-26,25,40,8,70,-36,-51,-68,-99,77,23,94,-6,-81,2,62,19,14, 
  /* [1][0][][] */ -13,35,-53,-4,-35,54,35,43,-9,-82,-78,113,82,-5,35,97,101,-25,47,104,-73,22,29,10,-55,42,-28,69,32,34,121,-86,19,122,18,1,30,53,13,-66,-23,-11,-29,-100,-55,55,6,-59,-28,-65,72,49,27,93,-67,-30,-47,111,30,99,-88,97,-68,-57,-71,28,96,62,109,35,-15,20,-80,77,-19,52,0,-63,-29,78,-76,37,-21,-127,67,50,-62,-63,100,78,107,27,78,84,-31,-22, 
  /* [2][0][][] */ 43,50,-68,50,-19,-45,78,87,-99,75,-27,118,85,-70,74,-107,-67,-42,27,6,-113,-85,65,16,-99,58,70,32,-87,70,74,95,-69,-8,-127,-100,-102,62,59,-9,-109,-115,-13,-2,-84,86,-23,-103,71,-14,83,-100,-65,82,-18,-30,-99,88,-49,10,-38,65,-65,38,84,59,28,81,-80,30,-63,-68,4,-92,17,-14,-23,-50,-1,-46,13,-112,-44,-96,-51,-102,-61,-63,56,71,-59,15,-56,-93,-83,-100, 
  /* [3][0][][] */ 80,3,39,-35,-50,40,-84,56,-22,23,59,11,80,78,59,31,55,74,-23,-23,67,-59,-55,-83,-82,-68,-55,87,46,-52,83,4,-73,-9,6,-22,-114,-24,47,41,2,-78,-78,5,46,33,-1,-77,15,-54,13,-27,80,29,53,-72,-126,-75,-95,-37,-112,31,-42,62,40,-8,-31,-9,-15,-71,-45,82,36,-97,58,-41,-10,28,80,-63,-70,-127,50,16,43,-16,-37,-104,-43,18,8,-62,74,-87,-115,-6, 
  /* [4][0][][] */ 66,124,31,72,8,-28,63,24,115,100,54,55,54,37,27,-22,-13,2,-13,63,121,4,115,24,71,39,53,-25,10,37,-37,-22,127,98,50,-9,1,60,-42,20,-24,16,-19,-49,14,92,27,94,23,58,11,-55,-35,62,-36,78,110,-62,65,70,37,-54,13,-6,-11,37,35,10,33,-54,12,-36,-17,81,119,66,89,-3,32,33,44,36,-60,12,57,113,125,51,-34,-10,74,32,61,95,-16,65, 
  /* [5][0][][] */ 43,-47,45,51,22,-51,16,47,28,-68,0,-45,17,50,23,28,41,37,-28,54,17,18,2,-15,-127,-38,1,-45,8,24,5,-48,-34,6,-47,14,-56,-19,39,23,-56,-53,23,68,0,-8,33,-29,-61,35,21,12,21,9,23,-31,36,34,-35,-25,18,-28,25,-47,-13,64,-9,19,50,11,38,-33,-20,38,-6,-48,13,-33,21,45,63,16,21,14,-51,12,-45,23,43,-46,67,56,-18,26,33,-57, 
  /* [6][0][][] */ 25,-47,95,65,-68,-41,-9,77,-77,-55,3,-69,76,52,94,-71,29,13,14,78,-62,-79,72,39,-113,-49,8,-52,-23,-70,40,-58,-127,-83,-26,-81,-6,30,-63,69,76,16,24,2,-73,82,-41,-33,-61,3,-21,-65,51,-42,84,-27,-30,3,-65,65,-81,9,56,-53,-37,58,92,-27,68,10,-99,6,63,-59,-51,-30,-113,-82,-25,-15,30,-42,55,-41,-32,-109,-57,-66,78,85,85,21,-35,-35,42,-28, 
  /* [7][0][][] */ 107,53,-20,-33,-57,89,-21,26,16,7,-63,18,52,-57,40,77,40,24,10,77,30,40,-11,51,-127,87,42,38,-54,98,-4,25,-27,31,63,65,-87,58,12,-13,85,-81,66,63,45,3,104,-88,31,-40,-91,-59,-12,70,18,22,18,-55,-15,-40,-7,0,58,-78,-52,-32,65,29,-73,26,19,72,83,7,63,43,-103,28,-61,34,68,-62,6,-77,88,-29,-94,70,74,9,73,59,-53,-30,-27,-66, 
  /* [8][0][][] */ -10,5,-48,-64,31,19,-56,-36,56,24,11,49,-14,-45,-73,-67,-25,56,-57,4,7,-35,35,119,-9,47,13,36,-56,-8,-72,66,90,-35,12,-8,73,-11,-34,35,45,63,-84,-95,-16,-23,-35,57,49,-76,-47,28,-57,-16,-27,-80,96,52,-68,50,61,22,16,54,-32,-38,-35,46,-73,12,27,-20,28,36,-16,6,0,127,33,34,6,64,-90,-2,-3,76,39,-53,4,-40,-74,49,-35,-66,-30,51, 
  /* [9][0][][] */ 39,89,64,26,75,-75,-4,-100,74,67,-4,15,-4,-29,-57,-44,-9,-10,-66,-57,11,78,-61,-51,127,9,-30,42,18,-50,-38,74,84,30,20,16,-69,2,-46,-53,27,-23,17,-79,43,51,-74,25,43,31,-52,0,29,-11,-37,108,99,-52,-27,57,-78,57,53,-41,-65,22,36,39,-37,36,87,-77,-5,38,-72,-56,4,-48,-35,63,14,57,36,29,-14,15,50,-30,49,6,-17,61,95,12,49,-22, 
  /* [10][0][][] */ -23,81,95,-78,2,101,102,54,-18,40,42,-34,101,76,-15,46,-35,70,-47,-104,-38,24,51,-53,-32,66,-87,-74,-14,91,-50,-60,60,106,121,66,-85,10,-3,42,-10,109,-102,-20,-67,-25,35,-72,-27,14,31,-14,75,31,-59,-24,-127,4,39,-19,-37,73,44,54,111,-44,-55,6,35,-60,-122,-39,99,64,-42,90,-18,39,70,-23,72,-15,50,50,-58,25,90,-44,55,-22,-1,-34,-35,-100,-69,-83, 
  /* [11][0][][] */ 68,24,-23,85,87,56,35,11,98,59,-75,89,-4,-94,21,-68,-30,-70,42,36,37,20,2,-80,-127,-85,-6,68,40,-7,5,-2,-57,-53,25,35,-34,48,-19,-37,-30,49,-76,15,-5,-69,-97,-80,73,49,91,35,-90,-61,14,5,-81,-40,-25,-79,-50,83,75,-14,24,78,-63,18,75,54,-67,-51,28,47,-94,39,-26,31,-10,49,-86,-13,-69,-56,-6,-62,-20,-32,-96,-2,-4,-80,-78,-18,-44,-46, 
  /* [12][0][][] */ -40,24,-46,13,58,28,-27,20,-58,30,-60,-3,-42,-41,38,-74,-49,-19,-36,-42,29,-45,-38,76,-99,-53,88,-65,15,10,-43,95,-72,-51,-71,21,16,-72,-16,46,60,-9,-66,-7,16,-84,-59,68,-8,-127,-36,78,11,-25,-40,23,-46,-32,4,-4,64,98,12,8,85,30,-37,78,48,94,-4,58,49,48,-27,-2,-6,40,-77,-89,-34,73,27,-5,-68,-9,-10,81,-103,-73,55,33,64,17,32,34, 
  /* [13][0][][] */ 101,-21,70,33,66,57,47,60,-21,-55,23,-5,73,57,59,-10,-95,-45,-31,-20,19,-7,74,-46,-103,43,-5,18,-33,-32,78,-4,3,85,9,1,-102,-31,22,48,-10,34,-54,-7,-53,24,22,-30,-9,75,-53,-93,-59,36,40,-46,-77,31,-34,-37,-67,63,-67,20,-43,-35,-38,77,-18,-31,8,0,-47,14,-38,-41,-127,6,46,-60,15,-115,72,-21,-29,-93,61,58,15,-43,-45,38,74,-54,-25,-51, 
  /* [14][0][][] */ -66,-109,76,59,28,-51,-42,-127,-77,-43,22,13,-71,-64,-88,-97,-84,-82,16,26,-32,40,-21,3,-90,-74,-8,0,-89,-69,-108,6,69,-56,-24,-15,93,87,39,-121,-38,-122,24,56,36,-101,35,-50,110,23,40,20,38,-38,-5,13,-67,-23,12,47,-34,-98,6,9,-105,-36,42,-125,-108,-66,-70,35,5,62,10,-57,24,-95,37,61,16,-24,-73,-35,-88,-99,-62,90,80,34,90,-80,13,99,-54,68, 
  /* [15][0][][] */ 14,2,-47,42,79,-108,44,-110,3,-12,-78,42,69,-21,-101,-120,54,-26,-106,-4,16,-7,42,97,16,41,3,60,26,27,58,-111,-5,-14,-75,-22,-94,75,72,-67,19,84,-64,-50,-10,-87,-59,-95,-35,-83,-26,16,-109,-70,-70,-20,59,23,-69,113,-70,-90,-26,73,-54,63,-84,-15,-72,-16,24,-87,-9,-35,28,-113,-42,78,67,43,-95,37,-119,-10,-127,-95,-83,8,52,36,-122,-57,55,109,-83,77, 
  /* [16][0][][] */ -57,10,101,-45,41,121,-44,67,-13,49,-84,71,2,-35,-36,-31,106,82,84,58,99,81,-39,50,-126,60,-42,68,-97,33,41,25,-127,83,60,59,-26,51,-19,-44,24,-71,72,103,84,80,120,-9,-50,-102,14,89,-29,108,71,29,-21,96,49,17,102,113,37,60,58,26,-14,96,55,108,-53,8,49,76,80,76,-15,81,-73,-7,21,-92,71,-41,30,45,58,14,86,27,-2,114,59,-10,-87,12, 
  /* [17][0][][] */ 73,-38,40,44,-10,-107,-25,-59,52,-51,126,53,96,66,-54,68,18,51,78,73,-72,13,45,-35,20,70,-82,40,127,-15,25,59,-8,5,75,6,-70,86,-66,-20,-43,21,-12,-31,-26,41,75,-90,61,109,-33,10,24,76,58,-35,-61,78,-68,-36,-4,-85,29,100,-65,-45,61,-54,-80,-29,79,34,17,-66,-20,50,83,-28,16,-36,9,-9,-51,-62,-33,69,110,-21,45,36,-68,-68,-4,60,9,24, 
  /* [18][0][][] */ -95,100,89,-68,-6,-78,-98,-14,-17,63,-106,-59,-34,-2,53,-63,20,-20,3,-50,94,-88,-22,-72,-37,-106,-11,115,2,35,-5,52,45,-20,-123,-92,-35,-24,-39,67,-36,-26,-73,5,-76,-4,-18,-56,0,-80,73,28,-116,-18,-10,67,-57,34,-79,-121,75,114,6,19,-60,-96,-45,81,69,-78,-100,100,-94,-90,-90,-106,66,36,11,-127,-57,-5,-55,-125,49,-53,15,12,-125,-106,-79,101,73,-53,46,-76, 
  /* [19][0][][] */ 16,38,34,15,59,-53,96,35,120,-15,21,31,-65,15,-47,19,49,-27,59,28,-1,39,-33,38,115,-44,-9,-30,-47,-85,-30,56,127,-40,12,9,-2,-44,-47,-83,55,8,-68,-16,-45,61,29,-64,15,31,-1,44,-27,69,27,6,71,38,9,2,19,-26,48,35,-51,4,-33,-9,-26,2,65,-40,-54,-76,-46,-33,55,-50,1,55,27,-11,-35,100,-61,67,43,8,44,7,-14,24,15,82,98,-31, 
  /* [20][0][][] */ -26,35,29,47,-90,48,-5,16,6,-16,-94,-21,-33,42,1,-86,-60,-54,-95,-61,-14,-68,-89,-69,127,-91,-117,16,-1,-17,-56,68,66,12,-48,21,3,-60,-45,-115,-90,-46,-89,-108,-48,-57,-97,48,101,-114,-110,85,13,56,40,-2,78,34,49,52,68,-70,-91,-49,-51,-76,-72,-10,-98,-96,-83,33,-82,-96,-2,-1,74,112,59,62,44,-5,28,34,28,91,-19,29,-15,42,-10,30,15,4,-32,-4, 
  /* [21][0][][] */ 45,60,32,-100,55,-82,33,-12,58,-36,-79,64,-22,5,-62,-92,-37,-50,2,-31,64,-62,32,-26,96,-91,-48,36,-12,-22,-30,10,38,-11,-95,-39,66,54,-113,-50,22,0,0,-35,-97,-78,-85,53,-42,-76,-23,116,4,69,-96,-6,-7,14,-58,67,21,-81,-13,-34,41,-1,-51,-77,-103,-24,28,35,1,-31,31,32,-59,27,24,59,-12,127,3,-41,-6,-14,28,-81,-103,38,62,-111,-5,2,35,-40, 
  /* [22][0][][] */ 53,-8,-8,-34,81,-12,101,54,-7,80,-12,-46,106,-19,-46,-33,42,63,-28,-13,93,2,60,38,127,23,-57,101,2,-28,-22,-44,91,70,46,49,23,48,-10,-65,6,43,34,86,67,-44,84,28,-36,9,25,9,-15,-33,-12,67,48,-6,35,32,99,-33,-26,-45,-21,31,-51,-2,98,90,41,17,-21,64,83,-37,90,-24,73,125,107,-23,-39,-70,105,103,113,3,2,60,0,61,41,44,-5,125, 
  /* [23][0][][] */ 48,-15,13,36,70,-75,14,-88,108,-29,87,48,16,-23,21,-38,46,-35,-62,79,93,-1,97,-12,74,0,39,10,61,14,35,-26,38,29,27,48,68,32,-71,-23,-83,38,-2,-74,-44,-30,54,40,42,-3,-33,-24,53,-9,-27,85,19,-31,80,66,-59,-55,-33,2,21,13,-72,-62,25,-22,127,-49,-15,19,1,-53,60,7,73,117,-14,17,-10,-35,90,77,102,13,-30,39,74,-13,69,-35,36,92, 
  /* [24][0][][] */ -64,-42,-86,-72,-78,-108,-63,-59,-5,76,56,16,69,38,-39,-86,-99,14,23,-60,52,-62,-58,-54,-19,-29,35,27,64,32,-8,-61,-28,-4,29,5,-80,-68,47,-34,-59,-92,43,-11,-16,-46,39,30,-93,-38,-34,-11,39,35,16,-73,-36,40,-28,-10,35,-24,10,55,-86,54,-39,-76,-84,-5,-90,-27,-35,9,68,50,19,-97,-69,-83,-72,-103,-65,-127,2,-3,-38,-107,24,-98,-5,-73,-42,-7,-91,-19, 
  /* [25][0][][] */ -26,-37,-41,-15,41,-52,-63,12,93,27,-26,76,38,73,-54,-26,-48,23,104,-63,54,113,-1,-10,80,-22,-68,10,64,-60,9,48,121,-63,67,29,95,64,-26,-25,-51,39,-72,-14,39,20,114,27,-10,119,-52,-9,12,55,-47,77,69,13,41,37,50,10,15,14,-13,30,-22,-13,-60,-20,61,-72,11,34,25,3,44,118,1,38,15,26,-9,127,-23,40,23,22,-4,63,51,0,17,-5,-2,47, 
  /* [26][0][][] */ 72,-95,-1,-4,-79,-4,-23,2,-127,-84,69,69,-43,-20,10,13,82,28,-56,-49,3,70,64,14,-19,62,21,19,26,27,-42,-1,-58,-29,-53,-91,-57,49,-18,64,-59,76,53,23,-52,77,-7,70,-14,18,-23,76,23,-45,13,-61,46,58,19,14,2,-63,50,2,79,-4,-26,56,-53,66,43,69,77,-81,-43,21,3,-85,-66,16,-13,48,84,-33,90,-26,-26,13,-46,81,22,16,-32,82,31,53, 
  /* [27][0][][] */ -13,32,-88,-123,-104,-46,-64,-42,70,38,33,-112,-40,11,27,-35,55,-2,15,-107,-107,-27,-17,-41,-53,-2,-104,18,17,1,-41,-3,22,47,-106,-78,-53,-81,-125,78,-92,-2,5,46,85,39,18,49,82,19,69,-52,-89,-96,-31,-61,47,-16,-114,-67,-22,-42,-17,21,35,-28,-127,71,23,-28,-121,-1,9,-65,-24,-104,54,-75,79,47,45,-41,57,-68,-89,-61,-59,37,-70,-37,-64,-30,4,-6,86,18, 
  /* [28][0][][] */ 67,-22,60,20,-127,-80,-112,-94,7,-119,36,44,-95,-98,-18,73,69,85,-89,46,-47,4,-121,-92,-80,57,-101,-77,-85,-94,-21,-37,-100,-4,56,48,-9,-124,-62,7,78,19,-114,26,-126,-26,-6,24,4,-75,-98,-56,-103,4,28,22,92,-32,57,33,-31,-62,-112,-16,33,49,-43,56,-95,0,-100,-62,45,10,-26,-115,-67,-38,-105,22,-92,-105,77,-53,39,-60,84,-103,-120,-93,-55,-84,-57,26,-62,-91, 
  /* [29][0][][] */ 24,46,24,-59,-50,24,-72,0,49,-15,-46,-59,68,-127,-32,-37,-73,56,-6,-69,-65,-77,4,6,-71,-9,-44,-1,-87,-8,66,7,29,4,-96,-30,-18,49,-37,78,32,39,-38,60,-5,40,-61,-37,-4,-29,47,-66,32,-60,44,-6,-75,40,-29,77,-78,70,-85,-47,-33,-28,21,57,67,-74,-32,-44,48,39,30,-7,92,-56,-27,-16,-13,-73,-38,-104,-3,68,-15,24,-49,29,12,59,-81,-3,-10,13, 
  /* [30][0][][] */ 17,-64,-67,16,-105,21,-68,-14,109,-29,0,-44,-111,1,47,9,-14,35,76,-119,34,-102,-112,5,-113,10,-78,116,-19,-107,-95,1,-99,-79,-127,-67,15,-36,-4,25,89,-78,-11,98,86,-47,89,54,-70,53,15,-103,91,-52,-26,86,-84,-57,-80,-54,-105,-6,-72,-33,-115,-86,-103,78,-64,95,29,-38,-97,92,35,-87,-63,-78,-74,-67,19,3,-105,-22,-105,17,-109,106,-37,-114,60,51,-43,-12,7,-92, 
  /* [31][0][][] */ 57,-61,22,61,33,55,-42,-68,-45,-19,-57,-70,72,-104,-37,80,-61,-74,4,-7,30,-19,-48,67,-23,-81,24,41,-64,-45,34,82,4,22,-72,-4,44,-68,-45,-70,42,-70,-46,32,15,-67,-30,-23,30,-15,64,-45,-90,-41,-77,2,-107,52,-35,75,-42,7,36,-59,47,90,-40,-53,57,-117,-127,7,-63,-78,8,-9,-36,-64,42,29,-61,-45,9,-21,31,38,-104,-41,5,-78,-71,-34,0,57,-23,-71, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002618016442283988, 0.0018959450535476208, 0.0019891646225005388, 0.0025047026574611664, 0.0026781740598380566, 0.0032008527778089046, 0.0023627649061381817, 0.0024579805321991444, 0.0029136526864022017, 0.0031098353210836649, 0.0021961894817650318, 0.0023274295963346958, 0.0026404452510178089, 0.0028192731551826, 0.0022207642905414104, 0.0020690176170319319, 0.0020357861649245024, 0.0024959431029856205, 0.0019673563074320555, 0.003043291624635458, 0.0022390726953744888, 0.0023900391533970833, 0.0027240687049925327, 0.0031172377057373524, 0.0025608490686863661, 0.0035090383607894182, 0.0025814692489802837, 0.0022954160813242197, 0.0019353515235707164, 0.0028479141183197498, 0.0018451876239851117, 0.0025967853143811226, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1168, -73, 3538, 6050, 5706, -3479, 5400, -1809, -3138, -1012, 7313, -3654, 4227, 6774, 2177, 2251, -841, -480, -1828, 6009, 2956, -795, 3658, -684, -420, 3892, 1247, 1552, 5730, 2670, 5414, 1309, 1489, 5336, 3249, 3488, -443, 2538, 2212, -6329, -790, 855, 59, 1947, -1542, 332, -1064, 815, -7449, 1650, 1351, -2683, 5871, -693, 2554, 1095, 860, 2739, -520, -3448, 312, 1740, 345, 5106, 7067, 3522, 2871, 5787, 4824, -826, 3318, 6945, 4152, -1715, 4966, 6569, 643, -3229, 631, 993, 11685, 2378, -592, -1952, 851, 738, 1356, -4421, 3375, -1089, 5102, 1358, 17, -4873, -601, 1780, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00011169364006491378, 0.00015767912555020303, 0.00015918820281513035, 0.00011083395656896755, 0.00010212523193331435, 0.00011979369446635246, 0.000108934378658887, 0.00014264901983551681, 0.00012052984675392509, 0.0002026974834734574, 8.6970278061926365e-05, 0.00013919718912802637, 0.0001274847163585946, 8.0755606177262962e-05, 0.00013177380606066436, 0.00018732492753770202, 0.00016416264406871051, 0.00018723876564763486, 0.00019677431555464864, 0.00010264320735586807, 0.00014471659960690886, 0.00016054659499786794, 9.5731251349207014e-05, 0.00017153591034002602, 0.00022963379160501063, 0.00016006917576305568, 0.00014603640011046082, 0.00016130684525705874, 0.00011303457722533494, 0.00013221050903666764, 9.2559726908802986e-05, 0.0001238118129549548, 0.00023820751812309027, 0.00011944240395678207, 0.00021067450870759785, 0.00013578603102359921, 0.00017677707364782691, 0.00016276675160042942, 0.00013297385885380208, 8.4840547060593963e-05, 0.00016032451821956784, 0.00018814869690686464, 0.00021173476125113666, 0.00014054520579520613, 0.00014452519826591015, 0.0001725004258332774, 0.00020301630138419569, 0.00016076621250249445, 0.00010050670243799686, 0.00016537097690161318, 0.00017107388703152537, 0.00018127472139894962, 0.00011299319157842547, 0.00024107200442813337, 0.00010965528053930029, 0.0001620594848645851, 0.0001774496486177668, 0.00013067848340142518, 0.00021120064775459468, 0.00011270181130385026, 0.00022818619618192315, 0.0001417826279066503, 0.00021839824330527335, 0.00010490031854715198, 9.1609152150340378e-05, 0.00012836921087000519, 0.00013342969759833068, 0.00011973366054007784, 0.00013955033500678837, 0.0001615646033314988, 0.0001424691581632942, 8.8448330643586814e-05, 0.00010370242671342567, 0.00015956131392158568, 0.00012236440670676529, 0.00011982710566371679, 0.00014110170013736933, 0.00017294555436819792, 9.1417081421241164e-05, 0.00013587437570095062, 7.0644404331687838e-05, 0.0001269723434234038, 0.0001713270612526685, 0.00017648056382313371, 0.00016077133477665484, 0.00010594073683023453, 0.00020421906083356589, 0.00012078818690497428, 0.0001826245425036177, 0.00012591814447659999, 0.00011723106581484899, 0.00016138450882863253, 0.00014191381342243403, 0.00011063901911256835, 0.00019317521946504712, 0.00015380975673906505, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -13,95,-85,30,45,-21,94,52,-47,-4,37,-110,83,127,-91,33, 
  /* [1][0][][] */ -30,-3,-80,-41,-23,83,47,-127,84,-55,-27,-47,-46,-63,-67,1, 
  /* [2][0][][] */ -32,-21,21,60,14,34,-101,127,-27,8,62,-72,-26,-63,-53,70, 
  /* [3][0][][] */ 96,-59,101,2,26,-11,-35,127,-43,56,65,63,-2,75,18,-4, 
  /* [4][0][][] */ -22,-25,19,66,-118,51,9,-122,47,-37,48,34,5,53,127,106, 
  /* [5][0][][] */ 127,6,-34,-53,-73,-3,3,94,26,-5,67,90,107,16,-95,22, 
  /* [6][0][][] */ 22,-2,-39,-31,-43,10,-15,-58,-71,-16,-34,10,105,37,127,-22, 
  /* [7][0][][] */ -75,17,-62,-102,-2,-52,-76,30,-110,53,-93,-115,-127,-29,-6,115, 
  /* [8][0][][] */ 50,59,74,1,43,37,85,20,59,-22,46,5,-127,-25,-90,15, 
  /* [9][0][][] */ -24,58,42,-30,-33,3,42,-11,-9,39,-33,32,36,127,35,24, 
  /* [10][0][][] */ 127,93,-45,86,-36,-31,44,-112,-126,-59,-56,-118,-112,-74,36,122, 
  /* [11][0][][] */ 51,23,66,23,1,-9,16,89,-127,5,-40,-17,1,2,79,112, 
  /* [12][0][][] */ -65,-14,-11,-3,22,12,127,32,-93,35,-22,-49,-3,81,-44,119, 
  /* [13][0][][] */ 23,53,-24,26,119,7,84,51,-94,96,-61,-127,108,122,-113,12, 
  /* [14][0][][] */ -127,101,-10,-46,-10,-13,38,22,-25,45,108,-25,-103,25,-84,62, 
  /* [15][0][][] */ -7,-11,-127,-41,80,-54,-87,-46,-56,-25,-14,-79,18,-66,-41,47, 
  /* [16][0][][] */ 120,-18,-17,-20,39,-43,27,-21,-57,4,127,42,44,31,-28,21, 
  /* [17][0][][] */ -5,15,-48,-95,-21,-50,127,-118,-18,-25,-82,-4,37,73,-9,55, 
  /* [18][0][][] */ 25,124,15,-42,66,-69,-25,-58,-50,127,-50,-35,-35,45,-35,-41, 
  /* [19][0][][] */ -81,-101,93,-100,56,-127,5,-10,20,57,61,47,-1,-13,40,-22, 
  /* [20][0][][] */ -24,80,45,0,6,4,26,-6,61,-3,77,-34,-127,-24,-69,-11, 
  /* [21][0][][] */ -61,39,1,18,48,44,68,51,-127,18,-15,16,3,38,-72,-2, 
  /* [22][0][][] */ 4,-76,28,18,35,-109,127,-18,-5,-53,-69,-113,25,-85,-69,-58, 
  /* [23][0][][] */ -58,-94,30,50,13,-26,18,-33,29,-35,83,31,-10,73,76,127, 
  /* [24][0][][] */ 0,-18,20,58,38,12,-48,-127,80,14,-25,19,2,-12,-22,-15, 
  /* [25][0][][] */ -33,40,5,-49,-27,-3,12,-63,-66,55,-60,-45,64,127,32,12, 
  /* [26][0][][] */ -52,84,26,22,20,-87,4,-28,42,26,25,109,-17,0,-86,127, 
  /* [27][0][][] */ -6,-111,-43,19,-47,114,-10,-78,-1,-67,62,-69,55,-34,-127,-31, 
  /* [28][0][][] */ -26,13,43,91,32,23,-39,-127,-106,42,99,-3,82,31,-21,-37, 
  /* [29][0][][] */ -116,103,-37,-51,-48,49,-114,-90,-18,-51,-4,-15,-8,-72,-127,76, 
  /* [30][0][][] */ 38,62,-61,55,-103,-69,-63,-5,-51,0,-11,-127,103,26,-23,95, 
  /* [31][0][][] */ 127,46,-38,-3,-39,47,105,20,-42,-19,59,66,52,36,-4,-16, 
  /* [32][0][][] */ -40,5,127,13,2,79,53,21,-46,-1,-32,-1,12,63,70,18, 
  /* [33][0][][] */ -36,37,-93,-31,17,32,106,4,-28,12,-11,-97,127,86,-32,32, 
  /* [34][0][][] */ -78,-3,67,27,34,-62,69,-37,-127,30,18,-53,47,38,-18,-37, 
  /* [35][0][][] */ -15,36,-20,0,-44,96,-36,-5,-27,127,-12,69,-74,65,29,24, 
  /* [36][0][][] */ -10,-73,127,-36,-45,6,-44,-28,14,8,-47,82,10,-90,-25,35, 
  /* [37][0][][] */ 65,16,48,-17,127,-28,-30,22,-74,97,-81,-21,-63,-22,103,-15, 
  /* [38][0][][] */ 74,54,35,-71,-1,-48,-89,23,-75,32,-102,-72,-23,-127,-81,40, 
  /* [39][0][][] */ -95,-3,-85,-51,-111,-87,53,27,-127,-55,37,101,25,0,-25,90, 
  /* [40][0][][] */ 127,13,22,-97,-72,12,10,-15,-5,-31,-17,-34,-5,61,31,45, 
  /* [41][0][][] */ 61,-81,-38,-21,2,12,-58,-39,36,-19,4,-62,127,-60,41,-24, 
  /* [42][0][][] */ -26,-85,-62,127,-4,-110,-124,46,-12,17,-2,38,-113,82,-79,-8, 
  /* [43][0][][] */ -92,-38,-53,-127,-71,9,-9,85,38,-100,-42,28,-29,-40,-38,91, 
  /* [44][0][][] */ -73,29,58,-54,1,-50,45,127,119,-49,54,118,108,25,-12,-20, 
  /* [45][0][][] */ 16,77,-92,93,127,-77,-55,-58,73,-66,51,-107,-16,32,-91,73, 
  /* [46][0][][] */ -40,-45,-15,-16,68,-34,16,32,-18,127,-44,-114,15,38,-43,52, 
  /* [47][0][][] */ 114,-69,-44,-10,65,-30,-42,-76,18,127,-15,69,0,-124,-85,7, 
  /* [48][0][][] */ 16,42,-23,-90,16,-36,125,-127,-17,1,-49,24,57,46,21,24, 
  /* [49][0][][] */ -16,86,-78,30,1,-43,69,48,-8,21,32,-55,-38,43,127,-80, 
  /* [50][0][][] */ 6,31,-27,-4,-127,17,-50,-44,46,58,29,20,-36,-36,-9,39, 
  /* [51][0][][] */ 127,-36,-42,-16,-35,58,-64,-29,52,-9,-31,58,-45,-48,9,26, 
  /* [52][0][][] */ -12,-25,31,50,-16,-70,-127,-10,-76,-40,-43,-84,62,-10,18,55, 
  /* [53][0][][] */ 16,102,34,-127,28,79,62,-33,-36,-7,-17,-76,86,-83,5,49, 
  /* [54][0][][] */ 26,127,-9,-26,-5,-83,-118,49,-20,-18,-43,96,92,119,21,76, 
  /* [55][0][][] */ -7,-3,63,45,34,14,127,95,-29,-24,15,46,85,56,1,-13, 
  /* [56][0][][] */ 127,28,19,38,-28,114,-56,-70,-3,45,-91,11,-48,106,8,23, 
  /* [57][0][][] */ -44,-21,-57,-36,-63,-73,43,-22,-127,-17,34,19,16,39,-19,60, 
  /* [58][0][][] */ 29,-56,37,13,-4,-60,-19,12,26,-8,-127,-18,3,-48,-41,34, 
  /* [59][0][][] */ 100,32,-118,127,38,72,70,-43,-89,-61,39,-94,-106,-44,58,114, 
  /* [60][0][][] */ -2,43,5,5,-6,-43,-31,16,-18,-64,56,127,-58,-118,-31,-8, 
  /* [61][0][][] */ -27,12,50,-105,-74,44,19,114,10,-91,46,52,62,4,-18,127, 
  /* [62][0][][] */ 71,37,-12,-127,-20,2,8,-30,-2,26,-33,31,13,-4,-90,-67, 
  /* [63][0][][] */ 21,-11,21,12,-70,-49,-43,-14,-41,-19,-31,-22,127,2,67,-18, 
  /* [64][0][][] */ 25,-25,-27,22,-115,-40,-14,-56,70,95,46,-4,20,-32,-65,127, 
  /* [65][0][][] */ -28,2,-14,-27,-79,66,24,-5,76,-104,88,-47,49,68,-127,57, 
  /* [66][0][][] */ -126,71,-69,-103,49,-46,-127,-42,-125,102,66,-31,-96,-46,12,38, 
  /* [67][0][][] */ 1,-39,-127,-119,53,69,9,-14,-8,-9,51,-22,16,40,3,59, 
  /* [68][0][][] */ 38,2,-21,-61,-75,25,7,53,-35,65,103,-11,-25,-44,-127,7, 
  /* [69][0][][] */ 59,-71,41,-61,4,-110,-35,127,8,61,70,62,-43,71,-39,13, 
  /* [70][0][][] */ 40,46,63,56,101,7,127,10,18,12,-52,21,-48,71,-41,38, 
  /* [71][0][][] */ 19,40,112,-95,-127,-104,-7,2,-63,-17,27,-115,-64,34,0,35, 
  /* [72][0][][] */ -55,-105,13,-127,53,-20,0,45,-48,13,-107,-7,41,118,-71,126, 
  /* [73][0][][] */ 8,22,14,-6,127,-74,-46,29,-40,91,-92,9,-94,-46,95,-21, 
  /* [74][0][][] */ -94,-18,-90,-35,57,-25,-23,34,-14,38,-127,-35,-55,-82,-15,42, 
  /* [75][0][][] */ 80,-25,35,-48,18,-6,-127,-16,-20,-89,51,-21,-10,-15,-10,-4, 
  /* [76][0][][] */ 19,-23,-13,127,64,95,68,-68,71,-75,40,88,41,-79,-37,11, 
  /* [77][0][][] */ -50,-62,127,-28,34,-47,-33,-112,19,25,42,108,56,43,36,3, 
  /* [78][0][][] */ -30,20,38,-19,19,-53,63,-38,51,-38,13,-92,-86,-111,-127,-80, 
  /* [79][0][][] */ -53,-28,-11,54,127,63,14,-1,23,-13,-15,48,-9,-5,-63,-14, 
  /* [80][0][][] */ -21,-122,35,110,-26,-35,-119,127,37,70,49,-7,-103,-23,-22,74, 
  /* [81][0][][] */ 127,63,-8,84,22,14,16,110,10,18,85,45,108,36,85,-33, 
  /* [82][0][][] */ -65,18,-2,-46,18,-116,-122,-77,-20,74,-40,-67,-24,127,-91,-10, 
  /* [83][0][][] */ 87,-10,83,-29,-34,-19,-127,-4,28,-103,-4,-48,-25,-37,18,-33, 
  /* [84][0][][] */ 17,-63,-70,34,127,45,13,29,-95,8,-80,-25,53,1,-64,8, 
  /* [85][0][][] */ -1,110,63,-35,122,23,43,-107,127,-20,-1,-32,56,-127,19,-20, 
  /* [86][0][][] */ 108,-12,127,59,7,-28,83,33,-40,-45,-85,-30,27,21,-38,5, 
  /* [87][0][][] */ 15,14,26,-57,50,-28,-31,13,49,-38,54,-15,-88,-127,-6,-4, 
  /* [88][0][][] */ -50,-20,17,-11,7,22,-48,-33,-19,11,-55,-127,-25,-10,-28,-4, 
  /* [89][0][][] */ -85,36,19,-71,53,18,-127,13,66,9,-64,-34,0,-73,-70,-10, 
  /* [90][0][][] */ -23,-19,-53,-105,127,10,-72,58,35,62,27,-24,15,22,-101,-14, 
  /* [91][0][][] */ -47,-73,-5,20,-51,-11,-14,90,-3,-50,18,-22,-18,61,-7,127, 
  /* [92][0][][] */ -30,89,4,-18,6,62,-94,53,-29,-1,49,-8,-34,127,48,17, 
  /* [93][0][][] */ -2,85,-69,-50,93,97,-73,-6,95,44,54,65,-127,20,-9,47, 
  /* [94][0][][] */ 46,61,90,-6,-127,-51,1,-10,35,-36,23,1,-64,7,15,-27, 
  /* [95][0][][] */ -8,44,17,-18,127,-14,-96,105,39,-3,-82,124,7,21,81,-48, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013405886711552739, 0.0018925236072391272, 0.0019106360850855708, 0.0013302704319357872, 0.0012257450725883245, 0.0014378085033968091, 0.0013074709568172693, 0.0017121266573667526, 0.001446644077077508, 0.0024328506551682949, 0.0010438496246933937, 0.0016706964233890176, 0.0015301191015169024, 0.00096925883553922176, 0.0015815983060747385, 0.0022483435459434986, 0.0019703411962836981, 0.0022473093122243881, 0.0023617586120963097, 0.0012319620000198483, 0.0017369425622746348, 0.001926940050907433, 0.0011490021133795381, 0.0020588377956300974, 0.0027561502065509558, 0.0019212098559364676, 0.0017527833115309477, 0.00193606480024755, 0.0013566830893978477, 0.0015868397895246744, 0.0011109362822026014, 0.0014860354131087661, 0.0028590552974492311, 0.0014335921732708812, 0.0025285938754677773, 0.0016297545516863465, 0.0021217442117631435, 0.0019535871688276529, 0.0015960016753524542, 0.0010182878468185663, 0.0019242746056988835, 0.0022582306992262602, 0.0025413194671273232, 0.0016868759412318468, 0.0017346452223137021, 0.0020704143680632114, 0.0024366772267967463, 0.0019295759266242385, 0.0012063188478350639, 0.001984843984246254, 0.0020532924681901932, 0.0021757266949862242, 0.0013561863452196121, 0.0028934360016137362, 0.0013161235256120563, 0.0019450982799753547, 0.0021298166830092669, 0.0015684518730267882, 0.0025349087081849575, 0.0013526891125366092, 0.0027387756854295731, 0.0017017278587445617, 0.002621297026053071, 0.0012590526603162289, 0.0010995271150022745, 0.0015407350147143006, 0.0016014729626476765, 0.0014370880089700222, 0.0016749349888414145, 0.0019391585374251008, 0.0017099678516387939, 0.0010615898063406348, 0.0012446751352399588, 0.0019151142332702875, 0.0014686632202938199, 0.0014382095541805029, 0.0016935551539063454, 0.0020757569000124931, 0.0010972218587994576, 0.0016308148624375463, 0.00084790046093985438, 0.0015239693457260728, 0.0020563311409205198, 0.0021181853953748941, 0.0019296373939141631, 0.0012715401826426387, 0.0024511131923645735, 0.0014497447991743684, 0.0021919277496635914, 0.0015113165136426687, 0.001407050876878202, 0.0019369969377294183, 0.0017033024923875928, 0.0013279307167977095, 0.0023185608442872763, 0.0018460819264873862, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 4684, 7919, -10493, -3495, -1234, -2440, -10543, 12817, 17549, -3267, 2081, 9163, -14453, 14359, -4211, 17464, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.9459758884040639e-05, 5.3868661780143157e-05, 5.7337252655997872e-05, 5.7492565247230232e-05, 7.0197558670770377e-05, 6.0302420024527237e-05, 5.2999628678662702e-05, 4.5334891183301806e-05, 8.2200793258380145e-05, 7.2998300311155617e-05, 3.9128644857555628e-05, 5.6776007113512605e-05, 4.6191402361728251e-05, 6.0762991779483855e-05, 7.6383170380722731e-05, 5.3159619710640982e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -89,61,30,-45,-23,-30,-87,29,-33,32,12,7,12,24,29,-29,1,13,77,16,3,-42,127,63,64,36,-11,56,-31,-79,-67,-5,-34,-13,35,33,-17,31,-12,38,-8,-1,-72,13,-70,-4,3,73,4,29,-31,-24,-21,-2,22,-24,-66,-1,6,61,61,34,-15,15,-26,-62,-32,9,-50,-61,33,-51,14,-12,-87,-60,-54,-1,-56,14,-54,35,77,-40,24,64,13,54,30,-29,-22,8,-41,-28,-61,26, 
  /* [1][0][][] */ 20,25,36,-24,-73,-13,-8,24,-50,-10,75,-96,41,-14,-83,-29,-4,0,-72,29,19,-93,16,21,-13,-60,5,-59,77,-112,127,-54,77,47,-17,73,57,83,-4,-46,47,17,-22,7,16,35,-125,-50,-98,-47,-24,2,63,-16,-46,34,-27,30,-47,27,50,66,24,-80,-6,-25,-75,6,29,-50,-116,26,-49,4,27,-72,7,43,58,-72,-10,-9,-91,-11,24,-24,-39,3,-56,15,-36,57,28,42,-51,73, 
  /* [2][0][][] */ 112,-12,3,-4,67,-112,48,33,-4,33,11,31,-56,-24,23,-50,-102,-52,-43,25,-13,-38,-18,53,45,-86,-12,-6,-6,64,-51,102,-62,127,-19,24,-31,6,-17,14,-109,86,94,11,-41,15,-4,-14,66,16,-22,-72,37,-30,-25,77,80,13,56,-8,22,38,-45,-4,62,-4,18,-22,10,72,-35,-39,48,47,79,37,16,-87,50,80,89,-37,-9,46,-46,44,6,90,10,13,-22,42,-34,57,-21,45, 
  /* [3][0][][] */ 4,22,-47,-14,41,-32,-19,-27,-15,90,76,87,4,-29,-70,62,5,-25,36,24,9,127,40,-41,40,41,-22,17,104,-21,75,-19,-7,67,-31,-23,11,33,24,24,-96,-40,-41,43,-41,54,50,-12,5,-31,11,-38,40,-82,-32,-28,48,87,-16,-3,16,7,-38,5,38,40,-43,-3,0,-11,22,-98,-26,-59,6,-29,5,3,-32,-14,-32,-35,-37,31,3,-30,36,-18,-3,27,17,8,42,51,-44,82, 
  /* [4][0][][] */ 55,25,-48,4,56,-4,-43,18,0,86,80,11,2,10,21,-70,5,4,-33,26,19,-37,75,101,-45,-14,-127,21,-31,-57,9,-15,-65,-27,13,49,11,29,11,18,-28,-44,40,-23,-8,13,-45,47,-21,42,6,26,30,-23,-68,15,50,-9,13,-9,25,-5,13,5,-57,4,-20,-6,-63,45,-19,11,40,-79,-19,-44,13,-55,-32,-2,-44,62,-47,17,-5,37,24,-43,58,3,26,12,-32,-8,13,38, 
  /* [5][0][][] */ -89,38,25,-35,42,-28,41,5,-35,52,23,-19,4,-44,-43,-11,-1,-35,68,53,-119,-30,-74,34,-21,7,39,10,62,-61,-11,61,80,116,-10,44,-26,25,37,0,-28,88,69,-11,-6,82,94,-14,20,32,6,-4,7,-19,27,-64,69,-60,-43,-65,90,96,-37,-19,106,-48,-68,-79,-18,-39,-46,12,-11,37,-48,-58,16,-16,-8,17,127,-25,22,-56,-62,39,44,-9,-70,39,27,15,-14,31,35,93, 
  /* [6][0][][] */ 16,1,-92,13,-18,-122,96,127,-82,62,12,90,-87,-87,39,74,-2,-71,3,28,-13,5,-47,-66,-31,58,58,25,55,52,98,-22,43,50,14,-58,-1,20,41,79,-4,-8,-72,-8,17,-43,-32,18,53,-91,-19,53,42,6,-28,-46,51,74,12,-14,-77,58,-72,-5,51,13,-9,51,82,15,-9,-38,-21,46,94,10,45,-12,75,-43,-1,-55,-65,88,-1,-40,42,6,-27,70,50,63,-13,1,-28,126, 
  /* [7][0][][] */ 35,49,-14,-37,-62,8,61,-34,-45,4,-95,-96,-39,30,20,-9,-53,-73,-32,53,0,126,-23,53,-43,-6,51,8,26,30,65,-49,68,-1,-17,-9,12,-16,17,18,-65,8,34,-80,21,-76,63,-27,30,-110,-103,-44,-39,7,-7,-38,18,-12,-125,21,-34,103,1,-44,-32,5,-44,15,-70,-10,-127,78,13,83,-30,69,-47,53,21,-105,-27,-45,40,-106,26,-50,11,-2,-21,80,-88,18,53,-45,-22,-8, 
  /* [8][0][][] */ -6,85,-54,30,-36,-39,-80,38,-81,-15,2,20,-64,26,35,99,19,-45,22,9,26,9,-10,6,-35,58,-11,24,-8,-22,-50,-30,-16,-68,-18,-93,-52,12,39,9,-8,-31,52,1,-39,-19,24,-36,-8,-38,59,45,-10,-28,-63,112,-20,18,13,-42,-28,14,1,43,-31,-70,-6,-10,-34,-2,31,-1,-25,-44,-127,-19,-20,23,-56,-30,-24,-12,-55,-18,11,-10,30,53,-24,48,-80,-13,-85,-111,55,-51, 
  /* [9][0][][] */ 15,27,-73,48,-2,-45,48,30,16,62,-41,127,-25,-8,30,99,9,38,51,-4,14,5,53,-54,-6,-20,14,6,7,-11,44,19,-49,31,3,-101,23,-30,-37,-18,-12,25,46,-32,-20,2,-5,8,47,59,27,5,-61,-62,10,-11,11,-15,78,-26,-80,48,-68,-15,56,-16,-12,14,-88,38,56,2,-19,45,-16,-10,-31,21,-73,-22,45,-46,81,-12,45,8,-22,-28,-21,4,-18,7,80,39,-47,-9, 
  /* [10][0][][] */ 71,-25,-29,13,-62,-21,104,-37,43,-40,-44,-32,-127,-4,17,-18,-77,-51,13,9,36,10,-2,28,-70,74,51,-22,-82,-98,-52,-35,64,-69,57,-6,106,-98,87,125,32,-52,39,-11,-19,-118,-33,73,37,67,-85,-58,-24,26,3,35,19,-84,59,63,-36,33,-83,-26,-26,-88,32,50,-15,-19,-2,63,109,49,17,-70,29,-72,29,-38,-61,60,12,0,-50,-35,8,55,-50,-23,26,32,41,77,-21,-7, 
  /* [11][0][][] */ -63,-19,30,-101,27,-6,-54,-11,62,-7,2,53,-43,-9,1,48,-60,-4,58,31,-84,8,-98,-48,38,15,-50,51,31,-30,12,-53,34,-23,22,-44,-73,-15,-127,51,-103,69,-3,70,12,37,38,-58,58,-41,-41,-99,20,25,58,-36,20,-94,31,-89,-3,-28,-38,-127,7,-63,94,46,89,11,93,-12,-67,-13,39,-34,72,11,42,46,35,-45,-50,72,101,30,16,8,-107,-76,-45,64,31,40,75,66, 
  /* [12][0][][] */ 19,-32,14,-19,23,124,-13,66,23,38,15,41,40,36,37,-26,-76,44,-6,73,109,2,57,-82,14,13,-66,-43,-25,86,-5,34,21,-6,-14,-34,53,28,-46,-30,32,-48,15,38,-4,13,-4,6,-73,34,-19,42,-12,-12,-16,13,-57,69,-11,31,9,-111,-4,-72,-10,104,-12,-25,3,-16,39,30,-22,28,-1,43,5,51,-57,-5,-18,50,127,8,-28,65,-43,-73,74,2,-63,64,60,-14,-30,-98, 
  /* [13][0][][] */ -4,9,-1,-18,-53,-4,8,-63,29,-47,-61,-99,56,-88,-19,-60,-21,-41,-82,-22,-67,-40,-27,127,-45,-15,103,17,5,-43,30,17,0,-7,-99,115,-16,-51,27,-62,109,51,26,6,13,-100,44,-31,70,-31,-45,42,36,-1,-17,36,66,-64,-63,-5,23,26,-22,-93,-6,24,-34,50,-100,-9,-101,38,-63,11,-31,-62,-90,23,29,51,-22,81,34,-94,32,18,26,-28,-8,-21,-2,11,-53,2,-35,-11, 
  /* [14][0][][] */ 3,43,-83,-42,89,65,-91,27,26,-16,88,19,7,-36,-42,-43,-59,24,40,127,-1,-11,8,37,29,49,-27,74,19,13,-15,14,65,22,-32,23,-31,47,53,22,39,-3,27,9,-10,-25,77,-39,40,12,4,-26,32,12,-31,36,36,56,-65,-17,1,-50,-39,-87,25,-30,-42,-15,-42,39,-11,12,3,-38,-35,-44,27,-3,-41,-10,31,-11,15,3,0,58,-6,-17,-40,51,49,40,4,-7,-34,-47, 
  /* [15][0][][] */ -82,-74,67,-32,-17,5,-16,-127,9,-14,-42,38,22,-6,42,77,-110,-29,21,-72,26,-45,-29,-85,18,-21,78,-51,-92,-120,-80,21,-55,38,90,-102,7,-31,27,-41,-5,4,35,-39,8,-27,43,118,-70,-29,14,-27,-32,68,13,-77,-127,-28,81,20,-56,-14,-101,34,-75,0,9,37,29,-55,62,15,50,-35,-18,-27,27,35,62,-18,-16,108,38,7,-19,-30,-127,-3,5,-56,-77,-4,39,-56,-13,49, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0021020397543907166, 0.0022894181311130524, 0.0024368332233279943, 0.0024434339720755816, 0.0029833961743861437, 0.0025628528092056513, 0.002252484206110239, 0.0019267328316345811, 0.0034935337025672197, 0.0031024275813251734, 0.0016629673773422837, 0.0024129801895469427, 0.0019631346222013235, 0.0025824271142482758, 0.0032462847884744406, 0.0022592837922275066, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -4247, -1701, -4529, -3336, -2560, 4772, 678, -440, 2023, -749, 2347, -4180, -1257, 7566, 12084, -841, 13041, 1424, -5189, -475, 1070, -1621, 1220, -2038, 1057, -2725, 2104, -3463, -298, -10075, 2205, 699, 4379, 2250, -4520, -119, 1558, -857, -1168, 6083, -2039, 1415, -1763, -6955, 14272, 18643, 608, 14337, 860, 10748, 6897, -6569, -466, -4540, -1328, 7163, 833, -2150, 14557, 8637, 6700, 13227, 6817, -12569, 1577, 3678, -2904, 1685, 29, -1954, -419, 3654, 12035, -1453, 53, 6784, 2983, -2563, 10731, 1387, -2106, 10322, 1911, -466, 8701, 1553, -6675, -3080, -4152, -5902, 16569, 969, -2879, -127, -5269, -3485, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00020513880008365959, 0.00018540259043220431, 9.2623049567919225e-05, 0.00023389460693579167, 0.00031690072501078248, 0.00035231292713433504, 0.00029877864290028811, 0.0002428621519356966, 0.00021389083121903241, 0.000148303501191549, 0.0002073075738735497, 0.00021290002041496336, 0.00029473382164724171, 0.00012309954036027193, 0.00011712402192642912, 0.00018057101988233626, 0.00011658037692541257, 0.00031025605858303607, 0.00016553408931940794, 9.2303496785461903e-05, 0.00015590785187669098, 0.00025781636941246688, 0.00024059982388280332, 0.00019709816842805594, 0.00060059712268412113, 0.00020978102111257613, 0.00026802512002177536, 0.0001527278363937512, 0.00018261355580762029, 7.6990952948108315e-05, 0.00032475378247909248, 0.00019153291941620409, 0.00033796363277360797, 0.00020365259842947125, 0.00022067528334446251, 0.00032333564013242722, 0.00020061072427779436, 0.00042319766362197697, 0.00031491895788349211, 0.00014757641474716365, 0.00014761339116375893, 0.00024796853540465236, 0.00019729183986783028, 0.00012375089863780886, 8.857079956214875e-05, 8.5642568592447788e-05, 0.00020150483760517091, 0.00011852500756504014, 0.00019146229897160083, 9.6336072601843625e-05, 0.00019222995615564287, 0.00012576926383189857, 0.00025162991369143128, 0.00013707290054298937, 0.0002213531406596303, 0.00012102533946745098, 0.00018044021271634847, 0.00026130577316507697, 0.00013555663463193923, 0.00014467559230979532, 0.00016143231187015772, 0.00011939435353269801, 0.00017901422688737512, 8.233926200773567e-05, 0.00015202487702481449, 0.00032038957579061389, 0.00022964942036196589, 0.0001799023593775928, 0.00017799341003410518, 0.00022899097530171275, 0.00032187256147153676, 0.00019152971799485385, 0.00010929879499599338, 0.0001691281795501709, 0.00024301921075675637, 0.00014178194396663457, 0.00015152231208048761, 0.00018682614609133452, 0.00012041829177178442, 0.00016091579163912684, 0.00023344659712165594, 0.00015262245142366737, 0.00022085409727878869, 0.00022809871006757021, 0.00010804261546581984, 0.00019325500761624426, 0.00011757227912312374, 0.00025842807372100651, 0.00023479810624849051, 0.00017858919454738498, 7.530186849180609e-05, 0.00043595477472990751, 0.00020472597680054605, 0.00021982069301884621, 0.00010872888378798962, 0.00033415286452509463, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 60,127,32,-8,-3,16,26,20,5,-90,-30,57,9,-7,-16,-67,-120,-28,25,89,79,74,49,127,-3,-28,-68,-14,-28,104,-1,-51,2,-33,-11,127,-19,13,3,-11,59,-34,30,71,-44,-18,-4,-58,-20,-60,-15,22,-9,77,-27,40,-99,-33,-15,-127,-112,-22,-82,39,-55,21,38,17,4,63,19,18,-88,-16,18,18,-52,1,-51,-7,-25,-51,33,-8,-6,-65,3,52,-38,3,-127,34,73,4,127,-2, -7,-28,27,46,10,53,-33,-54,58,47,1,70,-4,-48,-127,127,-127,47,43,127,94,-9,23,92,1,22,-11,72,-3,117,-15,-127,58,65,23,23,51,49,-15,-88,127,20,118,25,-127,-35,127,-53,-3,-124,-91,3,-18,127,-10,-125,29,10,-127,-48,17,-127,-6,127,-6,63,127,-27,-26,127,127,-33,-127,57,-49,-25,-7,-34,-103,127,59,1,127,-40,-76,-76,98,44,35,124,-33,14,127,-39,120,23, 32,-94,57,-17,8,-2,4,58,-9,-2,-65,-7,17,90,-55,-95,-19,-15,27,36,29,64,81,92,-7,-50,-7,4,17,-1,-25,-73,-13,-99,-19,41,-30,-35,11,31,29,24,0,103,-31,-33,-10,17,30,-56,57,-5,-24,10,39,16,21,-34,10,-101,-127,40,-17,21,25,2,-47,27,-37,27,0,69,-79,-86,-19,35,-49,17,-118,-38,-21,-127,5,-11,5,-22,21,5,-34,33,-50,14,37,40,27,2, 
  /* [0][1][][] */ 127,-1,87,127,10,-52,127,69,-45,-127,-87,127,-23,-127,-45,-5,-42,-13,48,-29,-115,35,-78,-76,-2,22,-101,127,-82,127,127,29,-4,57,26,87,-111,36,-22,-46,78,-127,58,74,-112,-127,9,-127,-127,-118,-127,43,127,-28,79,38,-127,11,-58,-29,-58,-90,-54,92,-127,-42,113,-116,-80,1,-48,-127,-86,97,127,-16,78,83,-93,-93,127,-49,-29,84,-24,1,20,100,-1,35,-122,10,17,-88,114,-6, -120,6,-30,88,-30,-127,-116,-127,55,32,-11,69,-82,-117,-17,26,-99,-127,127,107,10,-127,-127,127,-127,127,20,73,-69,-54,-117,38,-127,57,127,-50,15,127,127,-86,-33,8,42,28,-36,-101,-71,-75,-9,-90,-55,127,40,83,32,-55,10,-7,52,-3,7,-83,-127,115,11,-127,77,127,12,50,-68,-83,-27,84,-74,-127,127,127,110,-65,-68,48,-127,44,-122,-119,127,127,127,127,-87,-127,-110,-65,44,127, 73,-3,127,48,13,-26,30,56,-79,100,-44,96,-13,37,-102,8,38,-9,1,-53,-127,36,-77,-32,-24,13,127,12,127,119,21,-101,6,-127,0,89,-127,-34,-21,-31,4,47,12,127,-101,-42,23,-89,118,-127,-3,25,71,-48,-127,79,83,27,-124,20,22,-19,-31,100,107,-45,-12,-47,-109,-20,-19,-67,-63,-127,7,8,-59,5,-127,-48,-97,-103,5,127,-127,48,21,4,-37,33,-9,20,24,127,34,-1, 
  /* [0][2][][] */ 44,-107,42,3,1,4,22,80,-30,-54,46,14,25,29,-49,50,39,44,-19,69,-9,21,17,-59,3,73,-8,-34,-29,72,-4,-17,26,-34,-6,15,53,-19,-8,-17,-7,-14,-8,-27,-17,-100,-24,-69,-37,23,31,20,28,16,-11,-25,-28,9,-23,9,-17,3,26,3,0,23,-42,-61,18,-6,18,43,-42,68,-5,-17,-89,-30,-14,13,36,-34,-28,-9,24,28,-15,-9,-32,-6,-17,8,3,-7,-10,0, -10,14,81,-22,127,48,-36,0,-127,12,41,-7,127,-28,-101,-15,26,54,30,-28,35,-19,59,22,34,-105,-35,-5,102,61,-29,19,-21,34,31,-19,51,66,11,-127,-27,-20,-127,4,32,-74,-57,12,-2,-43,3,62,41,-30,-2,-127,-5,127,-3,-5,56,-108,46,81,-47,19,-7,37,127,11,18,59,-81,8,-41,-77,-54,-55,-25,-76,9,-40,-54,-28,15,127,76,-12,113,36,-3,16,-43,11,-36,9, -13,88,15,-17,-16,-17,-40,14,-16,26,127,17,-11,-10,-74,16,-59,34,-28,56,-43,20,-14,-56,-1,86,-12,22,15,19,-34,-56,-9,-11,2,7,53,-37,5,-17,9,-15,-10,43,-48,-80,-23,-51,4,51,-38,38,1,14,14,-2,8,27,-16,43,-10,5,17,-25,43,13,-56,30,0,-14,19,40,80,10,-31,-28,-18,-41,-27,9,32,-21,-18,-3,7,43,4,-8,-22,11,37,-3,-19,2,-20,-1, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0091233914718031883, 0.0082456385716795921, 0.0041193393990397453, 0.010402283631265163, 0.014093917794525623, 0.015668848529458046, 0.013287951238453388, 0.010801108554005623, 0.0095126312226057053, 0.0065956851467490196, 0.0092198457568883896, 0.0094685656949877739, 0.013108061626553535, 0.005474757868796587, 0.0052090012468397617, 0.0080307582393288612, 0.0051848231814801693, 0.01379840075969696, 0.0073620020411908627, 0.0041051274165511131, 0.0069338828325271606, 0.011466185562312603, 0.01070049311965704, 0.0087657906115055084, 0.026711098849773407, 0.0093298507854342461, 0.011920212768018246, 0.006792453583329916, 0.0081215985119342804, 0.0034241138491779566, 0.014443176798522472, 0.0085182804614305496, 0.015030673705041409, 0.0090572936460375786, 0.0098143648356199265, 0.014380105771124363, 0.0089220087975263596, 0.018821392208337784, 0.014005779288709164, 0.0065633482299745083, 0.0065649929456412792, 0.011028210632503033, 0.0087744034826755524, 0.0055037266574800014, 0.0039391187019646168, 0.0038088876754045486, 0.0089617734774947166, 0.0052713090553879738, 0.0085151391103863716, 0.0042844731360673904, 0.0085492804646492004, 0.005593491718173027, 0.011191048659384251, 0.0060962126590311527, 0.0098445117473602295, 0.0053825094364583492, 0.0080249402672052383, 0.011621374636888504, 0.0060287779197096825, 0.0064343363046646118, 0.0071795787662267685, 0.0053099724464118481, 0.0079615209251642227, 0.0036619757302105427, 0.006761190015822649, 0.01424908172339201, 0.010213482193648815, 0.0080010201781988144, 0.0079161208122968674, 0.010184198617935181, 0.014315036125481129, 0.0085181379690766335, 0.004860980436205864, 0.0075218467973172665, 0.010808093473315239, 0.0063056438229978085, 0.0067388387396931648, 0.0083089498803019524, 0.0053555113263428211, 0.0071566067636013031, 0.01038235891610384, 0.0067877671681344509, 0.009822317399084568, 0.01014451589435339, 0.0048051127232611179, 0.0085948687046766281, 0.0052289371378719807, 0.011493390426039696, 0.010442466475069523, 0.0079426178708672523, 0.0033489929046481848, 0.019388755783438683, 0.0091050313785672188, 0.0097763575613498688, 0.0048356340266764164, 0.014861192554235458, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7300, 3531, 1393, -1164, 2469, 13518, 7088, 1931, 158, 23538, 485, -3080, 3434, 1612, 715, 250, 3854, 8086, 143, -51, 8283, 14085, 8877, -1901, -4330, -1085, 10227, -661, 1874, 2136, 10996, -1699, 6922, 2742, 6143, -3740, 1430, -5198, -191, 2387, 2828, 2139, 1410, -28, 769, 1731, 3561, 3964, 2764, 2875, 4823, 3669, -4227, 1142, 1448, 1964, 3201, 2718, 7493, 2451, -725, 8651, 3646, 5236, 5266, 12942, -4360, 3040, 8094, -1366, 5113, 1717, 2662, 1964, 4112, 1612, 335, 1726, 2973, 2802, 3175, 4870, 10531, 728, 1701, 6796, 1864, -1182, 10114, -1238, 929, -1507, 17318, 3756, 86, -2138, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.2571310233324766e-05, 9.8220261861570179e-05, 0.00012182282080175355, 0.00018293342145625502, 0.00022883329074829817, 6.4124826167244464e-05, 0.0001136280843638815, 0.00015543641347903758, 0.00013213274360168725, 3.922583709936589e-05, 0.00021572750119958073, 0.00012336808140389621, 0.00013218398089520633, 0.00020741771731991321, 0.00016335109830833972, 0.00011822507076431066, 0.00017318114987574518, 9.5454008260276169e-05, 0.00012705431436188519, 0.00017814112652558833, 8.4986328147351742e-05, 6.6723398049362004e-05, 9.0310953964944929e-05, 0.00015773266204632819, 0.0001295654074056074, 0.00015447058831341565, 7.6128817454446107e-05, 0.00015559561143163592, 0.00014117786486167461, 0.00011262480256846175, 7.6007236202713102e-05, 0.00016530002176295966, 0.00012769085878971964, 0.00018819907563738525, 0.00010596999345580116, 0.00013811225653626025, 0.00014355758321471512, 0.00012388452887535095, 0.00013930154091212898, 0.00013955931353848428, 0.00015498675929848105, 0.00013056884927209467, 0.00020619762653950602, 0.00019784228061325848, 0.00027144901105202734, 0.00020392354053910822, 0.00013949396088719368, 0.00015382867422886193, 0.00018897288828156888, 0.0001566888386150822, 0.00015829023323021829, 0.00013321673031896353, 8.8960041466634721e-05, 0.00025630553136579692, 0.00020351985585875809, 0.00017170539649669081, 0.00013889078400097787, 0.00013316071999724954, 0.00010090784780913964, 0.00013977511844132096, 0.00019648790475912392, 8.0184487160295248e-05, 0.00014422395906876773, 0.00012378761311993003, 0.00010429057874716818, 6.4036197727546096e-05, 0.00012114185665268451, 0.00015690842701587826, 8.7392945715691894e-05, 0.00014805089449509978, 0.00011617057316470891, 0.00013212826161179692, 0.00012281190720386803, 0.00017749713151715696, 0.00010669849143596366, 0.00011775396706070751, 0.00021027226466685534, 0.00015174011059571058, 0.00013861566549167037, 0.00019657540542539209, 0.00014717047451995313, 8.6814667156431824e-05, 8.218092261813581e-05, 0.00012196215539006516, 0.00014312534767668694, 0.00011309533147141337, 0.0001383075286867097, 0.00022566538245882839, 8.1488949945196509e-05, 0.00014024751726537943, 0.00017170414503198117, 0.00017850910080596805, 5.2409195632208139e-05, 0.0001157763836090453, 0.00015975921996869147, 9.1545793111436069e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 3,87,-61,-87,-67,-124,-56,-81,63,-82,71,-15,65,-127,48,-60, 
  /* [1][0][][] */ -60,55,-108,-35,-83,36,0,71,-41,12,85,-17,26,127,11,33, 
  /* [2][0][][] */ -33,-44,-59,-7,-27,-66,17,-28,-78,89,108,23,55,39,-54,127, 
  /* [3][0][][] */ -32,-52,18,-26,-66,22,-27,-127,-22,-6,43,-51,-43,-48,-86,-52, 
  /* [4][0][][] */ 63,8,9,13,-29,11,-127,24,-15,57,-26,24,-3,28,-45,-102, 
  /* [5][0][][] */ -84,49,-51,-64,64,-50,-30,-41,109,0,-25,-22,41,-49,-127,-84, 
  /* [6][0][][] */ 20,-56,-16,8,-98,46,71,-83,-16,-83,127,3,-24,-20,-108,-25, 
  /* [7][0][][] */ -35,127,99,-77,85,79,-65,-34,25,90,-122,-26,45,20,24,76, 
  /* [8][0][][] */ -73,44,13,-55,46,-17,97,127,-96,19,-109,-121,38,64,-85,-50, 
  /* [9][0][][] */ 44,50,104,65,-121,-88,-80,-85,63,48,95,-11,-70,-127,97,-57, 
  /* [10][0][][] */ 7,-83,38,-66,-93,56,38,-6,-29,-84,-25,29,-19,26,-127,-6, 
  /* [11][0][][] */ 69,-20,-3,63,-119,-41,28,-33,100,127,-7,55,46,-47,-11,93, 
  /* [12][0][][] */ -71,-82,127,18,61,3,14,27,57,-1,56,23,-34,3,-81,15, 
  /* [13][0][][] */ -21,-2,21,48,20,34,127,18,-75,21,6,13,-45,89,90,-76, 
  /* [14][0][][] */ 126,-82,127,14,86,81,121,20,69,83,55,32,113,-21,13,-45, 
  /* [15][0][][] */ -42,105,25,-83,79,99,-127,126,-39,19,-67,-49,-92,100,-28,-20, 
  /* [16][0][][] */ -47,72,86,-53,2,60,5,5,-28,25,-12,26,65,17,85,127, 
  /* [17][0][][] */ -13,98,85,-127,57,-38,-14,-37,-37,97,-57,20,-66,-8,81,-82, 
  /* [18][0][][] */ -103,-23,-106,-62,127,85,-50,-54,40,73,103,55,-19,100,-27,-16, 
  /* [19][0][][] */ 79,127,96,104,58,-16,4,-21,-8,111,25,126,78,49,-28,9, 
  /* [20][0][][] */ 69,28,-18,59,-127,-5,6,28,-50,-106,-88,-78,117,-72,40,38, 
  /* [21][0][][] */ -127,-45,-42,79,-41,47,-86,48,-7,-33,45,-18,-8,69,-107,-25, 
  /* [22][0][][] */ -20,-9,-22,-20,127,-17,-23,77,94,85,17,37,-28,-11,-5,13, 
  /* [23][0][][] */ -63,44,2,4,23,71,94,90,-43,127,7,-21,20,43,-51,-49, 
  /* [24][0][][] */ 38,-60,40,15,127,52,83,-45,45,2,35,3,-56,22,-9,-31, 
  /* [25][0][][] */ 98,-86,72,0,8,-35,-54,102,127,29,-45,11,77,-54,119,45, 
  /* [26][0][][] */ 19,28,66,127,125,-31,-124,-1,-7,115,39,117,20,-61,70,-41, 
  /* [27][0][][] */ -28,61,-50,43,-5,114,-4,-86,15,-38,67,5,40,-29,127,57, 
  /* [28][0][][] */ -13,16,-127,-111,8,-61,24,-48,-117,116,-19,7,-44,44,22,89, 
  /* [29][0][][] */ 86,127,-123,19,-9,65,-44,0,12,73,14,76,-94,48,-40,93, 
  /* [30][0][][] */ -8,127,-99,-99,100,-36,28,-19,-55,54,-75,13,-12,91,-21,115, 
  /* [31][0][][] */ 20,-100,81,71,63,-45,-41,50,-31,-32,41,-23,-34,74,31,127, 
  /* [32][0][][] */ -5,45,0,31,-62,42,48,12,29,-127,12,-50,0,8,16,5, 
  /* [33][0][][] */ -61,-16,60,127,-6,22,-37,12,-37,-57,5,4,9,-1,22,125, 
  /* [34][0][][] */ -39,-4,-97,-127,68,-39,-39,103,51,18,-30,-29,-88,-44,-55,125, 
  /* [35][0][][] */ 85,12,28,-53,-3,3,-122,-10,-54,-127,-61,1,-8,-14,68,-29, 
  /* [36][0][][] */ -39,4,-127,-12,17,106,-30,51,-22,21,20,-15,1,-3,-55,71, 
  /* [37][0][][] */ 86,24,93,-37,78,-127,38,-35,-93,45,-114,3,22,31,116,11, 
  /* [38][0][][] */ -31,127,42,-34,49,34,65,-111,8,-12,-86,51,-55,-89,-86,11, 
  /* [39][0][][] */ 71,1,-127,-110,-61,-48,21,-65,12,-27,25,-57,59,-10,-121,-39, 
  /* [40][0][][] */ -53,20,-92,-115,-5,-45,-11,-127,-39,-5,-2,-53,6,97,56,73, 
  /* [41][0][][] */ -29,-109,-25,112,-33,-57,-113,-32,-32,-63,100,-65,-127,-64,22,35, 
  /* [42][0][][] */ -43,58,-8,-127,25,14,-17,11,39,11,-58,17,46,-12,-40,-6, 
  /* [43][0][][] */ -15,71,-4,7,127,23,16,39,-1,49,17,-91,-91,-20,-11,10, 
  /* [44][0][][] */ 55,-17,41,72,6,25,-15,66,49,-5,13,4,127,14,-32,-47, 
  /* [45][0][][] */ 17,-54,-61,21,-51,-92,4,67,1,-18,7,19,-82,127,30,-42, 
  /* [46][0][][] */ -44,-74,58,19,44,-24,-127,71,22,-9,20,-27,-14,80,41,106, 
  /* [47][0][][] */ -32,-31,36,74,26,12,34,4,16,-38,-127,-16,35,-17,-47,-6, 
  /* [48][0][][] */ -33,78,-57,-18,-51,36,-44,-127,25,0,56,-41,81,-105,-25,19, 
  /* [49][0][][] */ -65,19,35,-64,18,-11,73,127,-33,0,0,38,-51,45,-52,29, 
  /* [50][0][][] */ 38,18,-65,9,39,-113,0,13,-58,6,-27,6,29,-54,-127,-38, 
  /* [51][0][][] */ -45,44,2,127,0,31,-85,-92,-84,-50,-17,-86,17,56,-23,124, 
  /* [52][0][][] */ -127,-9,38,5,45,63,27,20,-6,-85,-65,-34,-110,-38,-109,-25, 
  /* [53][0][][] */ -56,-37,-43,-127,-35,12,15,26,0,-25,-51,0,-38,12,46,100, 
  /* [54][0][][] */ -8,-57,-27,-9,-76,54,40,7,-16,-83,24,17,-31,-3,-127,45, 
  /* [55][0][][] */ 10,-53,-15,51,79,-5,52,68,-51,-75,-127,-25,94,-15,-8,31, 
  /* [56][0][][] */ 14,-29,-30,-22,-127,3,-82,18,-17,21,-4,-6,93,-34,20,22, 
  /* [57][0][][] */ -26,24,7,-51,68,36,64,11,-21,38,14,19,-17,88,-127,-10, 
  /* [58][0][][] */ 36,21,20,-5,61,12,-30,-79,69,-127,-88,19,-45,-22,-37,32, 
  /* [59][0][][] */ -55,-43,-22,9,0,15,-125,-7,75,127,-37,32,-1,28,-35,10, 
  /* [60][0][][] */ 13,-51,-1,0,-127,-17,53,-3,-13,6,6,46,15,-22,6,43, 
  /* [61][0][][] */ 7,40,-108,-3,-32,-7,-127,-44,-36,19,61,102,84,-37,107,85, 
  /* [62][0][][] */ 17,-24,35,-1,16,56,18,127,-29,111,0,96,-1,44,35,66, 
  /* [63][0][][] */ 25,-127,-8,-37,-85,-5,34,-30,-31,-26,20,-36,-34,122,117,48, 
  /* [64][0][][] */ 13,34,-127,4,54,72,71,-27,-16,-102,-1,-48,58,10,-71,92, 
  /* [65][0][][] */ -46,-6,103,27,127,-65,55,123,-36,35,-119,-54,1,83,-86,8, 
  /* [66][0][][] */ -42,-96,-2,-127,-81,-107,20,-7,-19,-23,25,72,-57,-29,-62,90, 
  /* [67][0][][] */ -32,-68,-78,-11,-71,127,0,-94,-55,-20,-62,-114,24,-5,-54,2, 
  /* [68][0][][] */ 100,45,19,-4,-83,40,-29,-74,-33,-127,-4,-50,70,-57,35,-39, 
  /* [69][0][][] */ 63,-7,74,8,-17,-39,-25,6,20,127,-14,36,16,3,94,-58, 
  /* [70][0][][] */ 32,21,5,52,-77,13,11,-121,85,127,41,53,46,-84,-32,38, 
  /* [71][0][][] */ 53,-55,32,80,-78,-29,43,-44,127,39,-10,15,57,-103,7,21, 
  /* [72][0][][] */ -15,-16,69,127,85,24,-122,65,106,21,28,20,-74,-82,-83,68, 
  /* [73][0][][] */ 72,75,57,-121,103,-44,-51,68,-30,127,-36,-22,18,-35,12,-50, 
  /* [74][0][][] */ 88,45,54,92,-127,-9,58,-47,-90,-67,5,-69,41,-101,27,10, 
  /* [75][0][][] */ 56,113,-127,30,52,67,-23,-12,17,-61,60,108,-107,70,35,70, 
  /* [76][0][][] */ -54,-18,17,-20,-26,10,90,-27,-46,30,98,41,-41,-127,13,80, 
  /* [77][0][][] */ -18,90,-22,25,-70,-68,28,127,53,-42,-29,121,-41,95,11,52, 
  /* [78][0][][] */ 67,57,-76,40,-69,52,-127,11,-23,26,-79,-6,69,-58,37,55, 
  /* [79][0][][] */ -49,-19,127,25,-31,-67,-19,-51,-43,39,-4,-1,-13,103,-33,50, 
  /* [80][0][][] */ 5,118,13,-127,-7,33,102,-65,27,33,-72,7,70,-96,5,1, 
  /* [81][0][][] */ 49,-26,45,-94,125,72,21,94,127,18,-42,-76,20,27,-103,-96, 
  /* [82][0][][] */ 36,41,58,-42,127,-116,42,54,-24,121,-41,0,-30,-55,-4,-56, 
  /* [83][0][][] */ -8,70,3,48,101,56,126,62,9,31,-70,-40,-122,65,-26,-127, 
  /* [84][0][][] */ -34,-127,-14,68,-7,-118,-126,46,-82,84,-20,28,-89,115,-11,-13, 
  /* [85][0][][] */ -62,46,-37,-21,-12,-8,-49,-63,24,61,-11,-54,-127,-61,-85,-1, 
  /* [86][0][][] */ -12,47,61,127,46,-10,74,31,6,0,-19,-69,52,95,-104,-52, 
  /* [87][0][][] */ -29,31,127,-56,-73,-45,13,37,54,-14,2,45,-51,31,-40,-9, 
  /* [88][0][][] */ -53,-53,-54,-4,36,68,-53,35,-23,-42,-112,-127,96,22,16,10, 
  /* [89][0][][] */ 43,3,34,-83,27,-34,-41,24,127,-19,1,-67,14,-53,50,-91, 
  /* [90][0][][] */ 8,66,14,-7,-54,18,51,103,7,-60,-17,127,38,2,-39,81, 
  /* [91][0][][] */ -38,9,-53,55,38,47,5,-121,-33,7,7,12,-56,-127,-52,-4, 
  /* [92][0][][] */ -48,73,-16,-47,-127,-5,-68,49,-76,59,85,48,-47,-27,74,41, 
  /* [93][0][][] */ 127,65,76,54,-107,-84,22,29,-7,-44,-26,-83,-1,-52,24,0, 
  /* [94][0][][] */ -55,-127,30,-119,4,23,-41,20,89,-8,-5,48,-8,38,-57,37, 
  /* [95][0][][] */ -48,-71,-24,-67,98,87,-43,44,104,55,-56,65,-26,127,-117,34, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.001336448360234499, 0.0014180020662024617, 0.0017587513430044055, 0.0026410026475787163, 0.0033036572858691216, 0.00092576764291152358, 0.001640444272197783, 0.0022440294269472361, 0.0019075952004641294, 0.0005663018673658371, 0.0031144495587795973, 0.0017810601275414228, 0.0019083350198343396, 0.0029944814741611481, 0.0023582933936268091, 0.0017068107845261693, 0.002500209491699934, 0.0013780657900497317, 0.0018342782277613878, 0.0025718165561556816, 0.0012269442668184638, 0.00096328312065452337, 0.0013038157485425472, 0.0022771803196519613, 0.0018705307738855481, 0.0022300858981907368, 0.0010990687878802419, 0.0022463276982307434, 0.0020381794311106205, 0.0016259598778560758, 0.0010973134776577353, 0.0023864300455898046, 0.0018434679368510842, 0.0027170227840542793, 0.001529884641058743, 0.0019939213525503874, 0.0020725352223962545, 0.0017885161796584725, 0.0020110909827053547, 0.0020148123148828745, 0.0022375378757715225, 0.0018850174965336919, 0.0029768671374768019, 0.0028562413062900305, 0.0039188987575471401, 0.002944036154076457, 0.002013868885114789, 0.0022208185400813818, 0.0027281942311674356, 0.0022621105890721083, 0.0022852299734950066, 0.0019232446793466806, 0.0012843126896768808, 0.0037002728786319494, 0.002938208170235157, 0.002478904090821743, 0.0020051607862114906, 0.0019224361749365926, 0.00145680271089077, 0.0020179280545562506, 0.0028366881888359785, 0.001157620339654386, 0.0020821557845920324, 0.0017871168674901128, 0.0015056390548124909, 0.00092448806390166283, 0.0017489203019067645, 0.0022652808111160994, 0.0012616885360330343, 0.0021374050993472338, 0.0016771500231698155, 0.0019075304735451937, 0.0017730307299643755, 0.0025625191628932953, 0.0015404019504785538, 0.0017000094521790743, 0.003035692498087883, 0.0021906660404056311, 0.0020011889282613993, 0.0028379515279084444, 0.0021246944088488817, 0.0012533399276435375, 0.001186442794278264, 0.0017607628833502531, 0.0020662951283156872, 0.0016327529447153211, 0.0019967404659837484, 0.0032579223625361919, 0.0011764528462663293, 0.0020247478969395161, 0.0024788861628621817, 0.002577129052951932, 0.00075662950985133648, 0.0016714591765776277, 0.0023064375855028629, 0.0013216430088505149, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -25926, -13456, 2060, -11703, 9372, -16104, 18525, -3603, 14808, -6827, 15062, 13330, -6310, -23929, -528, 6137, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.1887945523485541e-05, 4.9364018195774406e-05, 6.1455684772226959e-05, 7.6821001130156219e-05, 7.5731004471890628e-05, 0.00013141911767888814, 5.6365566706517711e-05, 9.1462854470591992e-05, 9.7654825367499143e-05, 8.9241555542685091e-05, 9.0429733972996473e-05, 7.0449692429974675e-05, 7.6070151408202946e-05, 0.00011601862206589431, 7.9963276220951229e-05, 6.1386570450849831e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 22,14,21,5,-18,-61,-19,-9,-5,-47,10,9,52,-76,35,20,-95,4,21,25,58,52,-47,21,10,41,127,46,-5,75,63,-23,19,18,11,-47,30,23,8,-23,127,18,63,-38,-8,2,17,-30,8,-43,112,16,-74,-11,25,23,0,-37,-6,-1,19,57,-28,7,28,13,39,31,-12,10,10,13,-6,49,12,49,61,-46,29,22,-12,51,36,35,-48,12,-11,75,-5,-4,-58,-3,1,18,77,48, 
  /* [1][0][][] */ 43,17,-54,-16,-11,-18,98,-59,-60,-23,-53,-17,-2,-36,-13,-58,-17,-15,-36,-27,-11,-63,113,-1,0,6,11,55,-18,17,-24,0,-28,28,8,22,-27,54,-52,67,48,34,15,-40,71,-71,17,44,-66,26,25,-109,-11,55,67,52,14,44,-58,17,-72,24,-1,-16,40,18,127,6,-56,-122,-8,26,24,64,-11,39,-45,-26,127,0,44,1,32,-45,-17,-66,-6,41,-33,-33,30,1,52,-48,-36,58, 
  /* [2][0][][] */ 36,-1,45,-21,56,40,-50,24,-36,54,10,-4,41,-14,5,27,26,-14,-127,9,-30,-20,-2,14,15,-21,-38,-10,-60,-12,-15,65,-2,-27,0,15,-46,9,-8,-22,88,15,29,21,10,52,10,15,-81,-14,-1,18,-29,50,11,-61,46,9,40,19,7,-1,-9,69,59,17,-43,-15,3,30,-23,-55,23,53,21,85,-43,-13,-44,-32,11,31,61,-13,-7,-60,-29,-43,-41,-45,2,83,1,-18,66,-21, 
  /* [3][0][][] */ 54,-42,-2,-103,-9,-15,83,-14,36,127,-64,9,13,-23,-29,48,46,45,-22,30,-48,53,32,16,-17,47,49,-23,-57,-3,-33,65,8,-2,21,-42,4,-49,3,41,21,12,21,13,51,-27,19,45,34,-33,40,-29,63,33,16,4,-18,-36,-21,-47,-3,52,75,23,-5,-11,70,-40,-45,5,-51,1,13,-41,7,-37,22,-49,79,12,-21,-41,-27,-28,-21,-52,45,61,-51,29,-42,26,-1,-50,-31,52, 
  /* [4][0][][] */ -16,101,51,-1,-22,-7,-32,-23,30,-14,20,-6,30,51,-20,33,-25,-21,-8,-38,11,-11,-56,18,-18,-34,-4,1,-57,127,-42,1,16,-38,-3,-36,82,17,-34,8,19,3,28,-54,-33,-7,41,8,32,-20,-51,6,-83,30,76,24,21,43,-30,9,-5,-53,-4,25,70,48,-48,-24,-18,33,-1,-90,-24,63,42,68,-26,23,-65,35,0,48,17,-75,36,-61,-26,-47,-48,-60,-22,-19,11,1,25,-27, 
  /* [5][0][][] */ -7,-6,39,-28,-11,-20,-21,18,48,20,-24,15,-11,-22,14,-16,-14,-2,-47,-20,-25,31,-12,17,30,-48,76,-28,-5,45,13,64,-1,-76,21,34,-39,-31,-21,-2,-38,12,-15,11,2,28,-52,37,-22,4,43,-21,25,-59,-10,18,-30,-46,-3,-38,54,32,31,57,-24,20,91,-30,-16,-9,6,10,-5,26,36,25,-1,-22,127,45,-23,-7,-43,33,36,42,12,103,-13,-21,-9,35,19,8,-36,29, 
  /* [6][0][][] */ 46,-56,71,-5,-27,127,-58,-79,3,-45,-84,98,24,9,-49,87,-6,25,25,-26,-93,-22,-46,-26,22,-65,5,48,-109,61,8,-40,53,85,-7,-23,-2,-45,27,-17,-33,47,34,-7,16,49,-65,6,28,13,-74,-120,62,22,-61,-27,-2,-21,2,-14,0,-20,56,24,72,-58,-86,-72,-68,27,-30,-86,-28,-73,10,-63,93,-7,-77,54,-40,88,23,-61,49,-59,-11,14,-88,67,-62,101,23,-25,43,-56, 
  /* [7][0][][] */ -31,-9,-67,73,-26,1,36,3,-103,-26,74,23,-12,-58,13,-15,6,-5,10,-36,-22,-52,-21,-51,42,40,-13,71,21,16,-1,3,-47,-116,21,100,-20,17,-60,18,-18,-12,-29,-63,16,29,38,49,-4,48,-31,0,35,-26,30,-49,1,35,-40,0,13,-18,-16,-59,38,-52,127,-8,-43,-50,63,17,2,-40,-64,-47,14,-18,88,-27,19,-8,-63,-37,34,26,-37,23,1,20,-6,1,48,-28,73,-36, 
  /* [8][0][][] */ -5,-30,27,8,-21,-15,27,-3,-26,-8,52,36,14,23,-44,0,82,5,17,-9,13,-59,-33,-33,-26,-23,55,-7,-25,45,-8,-35,-16,-18,-24,13,-35,-29,4,-22,-24,48,17,-57,5,-4,31,2,30,-19,29,10,4,16,-48,5,5,91,-33,-4,-11,-54,-52,-2,-79,-22,-32,12,-27,13,29,-18,-25,-127,31,-116,12,22,-41,14,-26,-19,-12,46,68,-66,-44,53,-38,90,18,-9,-54,3,-14,-77, 
  /* [9][0][][] */ -7,-42,-19,22,10,28,16,21,-22,10,43,52,-29,42,12,-54,-16,36,-30,-17,3,49,-15,14,-27,29,9,16,12,-18,25,10,-23,-1,9,29,-26,-15,35,-6,-7,-21,35,-11,16,41,9,40,-24,1,6,40,101,4,-5,-6,15,-26,23,-3,-5,12,88,8,13,2,43,15,35,15,-20,4,-2,-117,-32,-127,-38,-24,21,-12,-24,24,11,-51,35,0,-57,-13,-12,104,28,26,35,31,-2,42, 
  /* [10][0][][] */ 14,34,3,8,-14,17,-24,-32,46,6,-19,6,4,10,8,-55,-25,-2,8,-22,31,-11,-31,-38,0,-7,-97,47,-26,38,-13,5,8,8,-29,-16,12,7,17,12,26,-23,54,-54,-26,8,6,16,29,-12,0,-6,-23,-20,-8,26,4,25,-5,6,-30,-49,-17,0,-13,-25,-74,-14,-38,-31,55,-15,-12,19,25,3,35,-2,-94,2,-28,27,16,-18,-3,17,-56,-127,-9,19,3,12,34,-42,26,14, 
  /* [11][0][][] */ 21,-28,24,11,-55,39,35,26,46,8,4,-44,9,-8,25,-23,-41,88,4,-84,29,56,-8,-33,32,29,71,1,20,-68,-47,23,12,118,-126,-5,4,-15,74,6,-62,39,15,-26,-37,14,-4,4,63,-39,-29,4,-7,-3,-107,99,-11,0,26,-39,23,3,9,-84,-18,-47,-127,-67,-23,-19,-95,35,66,2,-13,-19,25,73,-118,-52,-29,3,7,-24,-13,-23,55,68,0,-43,9,33,-53,30,83,8, 
  /* [12][0][][] */ 36,9,-46,-18,1,-7,20,41,38,-13,35,-1,-5,5,10,-4,17,-46,-38,-8,12,55,-2,61,-52,-32,-127,0,77,-37,38,15,-31,-58,58,-17,25,-15,-4,5,7,-49,37,38,39,-12,36,-25,-58,18,-36,85,85,-26,29,-73,-8,17,-39,-16,-2,51,89,2,-23,-28,26,18,114,9,20,36,10,-26,-24,-15,-48,-45,56,-57,11,-39,33,-28,-12,-1,-6,-103,-10,48,-47,31,0,81,24,55, 
  /* [13][0][][] */ -3,10,-58,31,20,18,6,9,9,42,-13,28,-44,-12,55,-43,24,38,39,-26,-6,-39,-15,-9,20,41,-26,27,21,23,14,-5,-20,50,-11,36,7,-38,-37,-18,-1,-14,5,-3,56,50,-39,28,-23,33,-14,8,-5,-39,55,28,18,-24,-2,3,0,-3,0,-31,2,57,127,43,19,-19,-26,-5,29,28,-72,25,4,-39,107,-38,-28,-21,37,-7,14,45,-13,-24,-4,-22,-2,30,36,-7,54,29, 
  /* [14][0][][] */ 12,58,23,22,-66,-40,20,35,-69,-3,76,38,-83,-4,58,-23,-51,47,-60,51,-35,58,-86,10,-39,-15,-36,-125,-9,-6,45,98,-53,36,18,-24,-11,-86,-5,-41,46,-31,63,-51,-29,47,-62,42,-9,-77,90,38,9,29,-54,23,-68,25,-7,51,70,93,14,58,33,-33,-26,-79,36,90,66,18,-78,22,10,36,32,-12,19,26,-71,112,2,-127,81,-21,-3,7,-125,1,-26,22,-26,22,32,40, 
  /* [15][0][][] */ 42,-25,-2,46,28,5,1,0,2,4,-38,-29,48,69,10,-25,5,1,-76,25,18,-50,-2,24,41,-18,70,43,60,-41,-52,52,45,42,-8,-50,53,73,36,56,67,27,-51,11,-28,-127,19,-52,-20,2,-22,-12,9,-46,-15,44,-3,22,6,36,-24,-67,-36,7,17,25,-45,46,1,-54,7,16,11,-127,-44,-117,-33,35,-95,18,78,-31,37,19,-53,24,-9,-34,52,98,-1,-71,-21,-44,50,-54, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0030552376993000507, 0.0020979708060622215, 0.0026118664536625147, 0.0032648926135152578, 0.0032185676973313093, 0.0055853123776614666, 0.0023955365177243948, 0.003887171158567071, 0.00415033008903265, 0.0037927660159766674, 0.0038432634901255369, 0.0029941117390990257, 0.0032329813111573458, 0.0049307914450764656, 0.0033984391484409571, 0.0026089292950928211, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7192, -1077, -4028, 12924, -4719, -1638, 2077, -603, 2094, -2767, 2908, -1684, 9947, -2601, -127, -4373, 735, -416, -8475, -2316, -2581, -1679, -1949, -2056, 11, 6802, -14217, -7710, -27, -2154, -1391, 1334, 18572, -810, 1798, 171, 894, 8217, 2417, 6323, -1054, 5617, 407, 3124, 2848, 5086, 9406, 4065, -4817, 684, -4675, 559, -1502, -4376, 839, 5091, 1319, 666, 500, 2876, 766, -2504, 1578, 5297, 12405, -4172, 14470, 17513, -1945, 1970, 9235, 550, 1076, 1302, -3397, 2767, 19020, 13449, 8945, 13829, 9405, -1269, 9453, 4825, 439, 2272, 8998, -7492, 9110, -517, -10105, -3740, -959, -1059, 17928, -2602, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00011391276348149404, 0.00030140444869175553, 0.00018575544527266175, 0.00012749152665492147, 0.00014855954213999212, 0.00042972428491339087, 0.00010135256161447614, 0.00017833254241850227, 0.0003022369637619704, 0.00033297587651759386, 0.0002207816723966971, 0.00019078099285252392, 8.8935477833729237e-05, 0.00018079858273267746, 0.00016768429486546665, 0.0002438045630697161, 0.00033117970451712608, 0.00029839263879694045, 0.00016598089132457972, 0.00031832561944611371, 0.00023627595510333776, 0.00032115390058606863, 0.00024401985865551978, 0.00015170210099313408, 0.0036783148534595966, 0.00014537233801092952, 0.00016414487618021667, 9.8167518444824964e-05, 0.00040408727363683283, 0.00022433986305259168, 0.00018580685718916357, 0.00023412611335515976, 5.4461739637190476e-05, 0.00034457480069249868, 0.00014635366096626967, 0.00018033184460364282, 0.00030426459852606058, 0.00012951799726579338, 0.000192722596693784, 0.00013929695705883205, 0.0005615121335722506, 0.00014834848116151989, 0.00026519497623667121, 0.00023560940462630242, 0.00014714221470057964, 0.00019813026301562786, 0.0001277322880923748, 0.00022989544959273189, 0.00021006495808251202, 0.00024705211399123073, 0.00026856892509385943, 0.00016410995158366859, 0.00015944884216878563, 0.00022849174274597317, 0.00024478547857142985, 0.00018802755221258849, 0.00018253053713124245, 0.00044723856262862682, 0.00025917048333212733, 0.00026982493000105023, 0.00025792140513658524, 0.00029424947570078075, 0.00018003702280111611, 0.00015968421939760447, 0.00020231172675266862, 0.00035016730544157326, 0.00011265333159826696, 9.3544273113366216e-05, 0.00022044178331270814, 0.00032571586780250072, 0.00013192959886509925, 0.00039750439464114606, 0.00044935056939721107, 0.00019123431411571801, 0.00013970585132483393, 0.00022911105770617723, 6.5381165768485516e-05, 0.00012271135346964002, 0.00013241289707366377, 0.00013382510223891586, 0.00013294820382725447, 0.00026522451662458479, 0.00011846850975416601, 0.00039548904169350863, 0.00010395790013717487, 0.00031272979686036706, 0.00016144209075719118, 0.00020141096320003271, 0.00014915529754944146, 0.00023716181749477983, 0.00010502060467842966, 0.00024009194748941809, 0.00025757559342309833, 0.00015003964654169977, 0.00011336166789988056, 0.00029157332028262317, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -28,-20,34,-54,127,-15,26,-43,-6,-4,-22,-64,-74,-1,-37,-21,-15,3,-31,-8,1,62,-22,32,-14,5,-20,51,7,-1,38,-7,29,10,-24,-33,-6,-36,-43,10,11,-10,21,8,-36,31,-127,-30,-39,-18,-11,62,-63,31,38,-23,2,-7,13,-36,-19,-23,-30,-32,-43,-4,-56,-87,12,17,-11,-4,17,18,10,-18,-18,34,127,-32,-106,4,-127,2,-6,-29,41,33,-45,-1,76,-38,10,52,-13,36, -41,20,57,-88,-15,23,127,-66,-5,-13,-56,5,-74,33,-127,22,-18,70,64,-34,-4,127,7,127,18,11,81,127,127,29,127,-44,-12,-11,-81,-37,-5,-20,127,-24,-23,-94,-11,-48,73,-64,-83,-26,50,4,27,112,-52,58,-63,-29,-59,-3,5,18,-12,-101,-127,84,-60,17,-14,-127,3,2,-54,86,-127,-22,55,-41,-127,-114,8,-127,8,16,9,-58,127,55,-34,50,-127,7,58,-33,23,127,-77,-114, -17,0,7,-78,76,5,40,-24,-23,17,-11,20,-9,-24,-32,-31,-9,-10,-25,-14,-32,-5,-36,63,-14,-22,29,0,-16,5,8,19,-25,8,-38,96,-18,-107,-29,-6,-1,81,48,35,-30,-65,-114,-47,-35,-10,5,62,22,-10,-5,-42,46,-25,16,-60,-17,-14,-66,21,-46,-20,127,-48,35,22,-64,-15,-9,-1,18,-5,-89,90,-41,-65,-56,-4,-64,12,-24,-50,8,-38,-15,-17,31,75,7,57,-58,48, 
  /* [0][1][][] */ -74,9,52,-68,62,108,-33,-17,-8,-22,-38,-20,-117,16,33,48,-22,38,74,27,18,-13,127,-23,23,10,104,39,-12,-13,-6,-19,-110,-8,46,0,-25,-107,-71,-127,-17,-11,91,-43,-80,127,-63,-83,25,65,32,-40,-111,110,75,-67,1,-17,14,-7,-10,-8,107,-127,-27,29,-18,-64,0,-14,-122,19,34,127,-8,-98,-93,-127,-42,-58,-82,-13,-9,-79,13,11,-78,88,-106,127,76,-71,127,1,-91,27, 37,127,127,123,-119,-127,56,-69,127,127,-95,-81,-120,127,-65,127,127,-127,127,127,127,-35,39,-100,-127,-127,127,120,-115,127,-7,127,-127,127,108,-111,127,98,17,28,127,-82,-127,-93,127,-53,116,127,127,-127,127,-127,93,127,-127,127,-127,127,-127,127,-113,127,80,-104,127,127,-16,116,-127,-127,14,-127,9,79,127,73,-27,-112,81,-119,118,127,78,127,79,43,-127,127,-38,31,-11,-1,-96,-24,-127,-49, -127,-26,15,-127,34,84,-57,9,-46,-33,-12,127,-83,30,54,22,-40,49,63,9,8,-18,26,-44,21,8,63,25,5,2,15,-26,-77,-26,67,127,-6,-42,-80,-124,-31,-74,72,-7,-76,-85,-6,-113,12,95,3,-60,127,-6,94,-81,55,-12,30,-63,5,-27,-110,-21,-77,4,-37,-69,-20,-24,-127,13,33,-100,25,127,-120,-86,-57,-28,-127,-16,-83,-97,-21,24,-64,42,-18,-55,127,127,-47,-36,-42,22, 
  /* [0][2][][] */ -1,-19,-8,-68,62,9,-20,9,-9,-12,30,-5,70,0,-6,-34,10,14,-17,-7,0,-10,-29,-10,-7,2,46,19,-6,-27,-4,-21,-51,9,-20,-16,-14,-28,-31,21,-23,81,25,2,1,-11,-13,-1,-18,0,3,-20,22,-3,17,7,3,-17,13,-18,-5,53,-27,28,-40,-4,95,-11,13,10,13,4,-34,14,-36,-35,10,-23,-17,2,-53,4,-92,9,-26,2,9,-3,-3,17,-6,2,-38,-21,-18,10, 15,-49,-37,-96,-21,1,30,127,-49,50,127,-14,-127,-3,110,69,-11,-36,93,-27,-8,-12,14,40,11,15,88,8,8,-12,-71,-63,-111,-16,-127,-40,-109,-127,63,-31,-26,-127,-48,127,1,-54,-74,18,40,-42,-12,2,53,33,-81,-37,-44,-47,46,-77,127,47,82,20,-99,-25,-34,-85,127,20,-63,-3,-20,-17,-15,-43,-26,-44,7,37,-83,-2,-94,-49,36,-127,-31,16,-66,9,32,24,32,-100,-43,127, -27,17,-66,-4,47,-8,1,8,-19,-10,3,26,101,13,-18,-22,-6,26,-18,-31,-5,-6,-44,20,-10,0,-42,1,-4,-20,-21,-11,-90,13,-29,-41,2,-22,-14,17,-31,-58,-2,29,14,-31,-22,-3,-4,-31,-8,-56,-15,-30,3,-15,46,-4,6,-27,-4,17,-8,1,-48,-7,-18,-11,0,8,-22,-17,-84,-44,-21,-24,7,-6,68,70,-62,-2,-81,14,-38,-13,18,10,-22,15,8,31,0,-15,7,-6, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0048412922769784927, 0.012809689156711102, 0.0078946063295006752, 0.0054183895699679852, 0.0063137803226709366, 0.018263282254338264, 0.0043074837885797024, 0.0075791329145431519, 0.012845070101320744, 0.014151474460959435, 0.0093832211568951607, 0.0081081921234726906, 0.0037797577679157257, 0.007683939766138792, 0.007126582320779562, 0.010361693799495697, 0.014075137674808502, 0.012681686319410801, 0.007054187823086977, 0.013528838753700256, 0.010041727684438229, 0.013649039901793003, 0.010370844043791294, 0.0064473389647901058, 0.15632838010787964, 0.0061783241108059883, 0.0069761569611728191, 0.0041721193119883537, 0.017173709347844124, 0.0095344437286257744, 0.0078967912122607231, 0.0099503593519330025, 0.002314623910933733, 0.014644429087638855, 0.0062200305983424187, 0.0076641030609607697, 0.012931245379149914, 0.0055045150220394135, 0.0081907100975513458, 0.0059201205149292946, 0.023864265531301498, 0.0063048102892935276, 0.011270786635577679, 0.01001339964568615, 0.0062535437755286694, 0.0084205362945795059, 0.0054286220110952854, 0.009770556353032589, 0.0089277606457471848, 0.010499714873731136, 0.011414178647100925, 0.0069746728986501694, 0.0067765754647552967, 0.0097108986228704453, 0.01040338259190321, 0.0079911705106496811, 0.007757547777146101, 0.019007638096809387, 0.011014745570719242, 0.011467559263110161, 0.010961659252643585, 0.012505603022873402, 0.007651573047041893, 0.0067865792661905289, 0.0085982484742999077, 0.014882110059261322, 0.0047877663746476173, 0.0039756316691637039, 0.0093687754124403, 0.013842923566699028, 0.0056070080026984215, 0.016893936321139336, 0.019097398966550827, 0.008127458393573761, 0.0059374985285103321, 0.0097372196614742279, 0.0027786993887275457, 0.0052152322605252266, 0.0056275478564202785, 0.0056875669397413731, 0.0056502986699342728, 0.01127204205840826, 0.0050349114462733269, 0.016808284446597099, 0.0044182105921208858, 0.013291016221046448, 0.0068612890318036079, 0.0085599655285477638, 0.0063390997238457203, 0.010079377330839634, 0.0044633755460381508, 0.010203907266259193, 0.010946962982416153, 0.0063766846433281898, 0.0048178709112107754, 0.012391866184771061, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1617, 6885, 746, 3864, 6934, 14378, -96, 2520, 14250, -852, 24309, 2746, 1730, 785, 6328, 60, 3839, 3858, -550, 8360, 1349, 9660, -1281, 1023, -15238, 807, 2761, 1479, 8272, 935, 3653, 3427, 1663, 9689, 6601, 4909, 4326, 2263, 5777, 1416, 23502, 1240, 3399, 3522, 3821, 8291, 6253, 9821, 1632, -685, 1623, 4845, 4232, -5744, 12515, 416, 2826, 20207, 888, 2394, 2991, 11666, 6177, 50, 15216, 10614, 1753, 4799, 8406, 3352, 3695, 2655, -2471, 5004, 2677, 3770, -33, 16424, 3494, 7206, 2929, 1314, 4123, 10301, 219, 7649, 8426, 1728, -709, 2444, 2367, 9356, 5003, 1467, 5025, 10156, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015711113519500941, 0.00010387961083324626, 0.000219681256567128, 0.0001257956464542076, 0.00010290036152582616, 5.7872384786605835e-05, 0.0001821014448069036, 0.00012899038847535849, 6.0269976529525593e-05, 0.00017072641639970243, 3.9978567656362429e-05, 0.00016236904775723815, 0.00017759963520802557, 0.00024543458130210638, 0.00010741476580733433, 0.00014730542898178101, 0.00014150667993817478, 0.00016787672939244658, 0.000137422262923792, 9.9426993983797729e-05, 0.00019505969248712063, 6.9331261329352856e-05, 0.00022334598179440945, 0.00014693476259708405, 5.4488264140672982e-05, 0.00012797347153536975, 0.00018919882131740451, 0.00019690519548021257, 9.5661809609737247e-05, 0.00023462633544113487, 0.00013971648877486587, 0.00014833036402706057, 0.00021139568707440048, 8.3255064964760095e-05, 8.3222388639114797e-05, 0.00011847935820696875, 0.00013342843158170581, 0.00016128709830809385, 9.6314157417509705e-05, 0.00020149964257143438, 4.0716404328122735e-05, 0.00016941841749940068, 0.00012293522013351321, 0.00010152580944122747, 0.00010121567902388051, 0.00010358804138377309, 0.00011055330833187327, 7.8534532804042101e-05, 0.00021410634508356452, 0.00022872681438457221, 0.00016761325241532177, 0.00012746159336529672, 0.00012967622024007142, 7.3460272687952965e-05, 6.2277555116452277e-05, 0.00024089447106234729, 0.00013138404756318778, 4.5220946049084887e-05, 0.00019103691738564521, 0.00011642518802545965, 0.00016227137530222535, 7.5588039180729538e-05, 0.00011815664038294926, 0.00023498987138736993, 6.5385473135393113e-05, 7.8389952250290662e-05, 0.00021745303820353001, 0.00011300619371468201, 9.2369256890378892e-05, 0.0001386468211421743, 0.00013445850345306098, 0.00011834166798507795, 0.00021323170221876353, 0.00014000142982695252, 0.00016983840032480657, 0.00018109951633960009, 0.00020287997904233634, 5.1678776799235493e-05, 0.00016545412654522806, 0.00012280962255317718, 0.00012152529961895198, 0.00012707187852356583, 0.00012345740105956793, 7.9049699706956744e-05, 0.00012827150931116194, 0.00010787872452056035, 9.3036149337422103e-05, 0.00020911170577164739, 0.00023052658070810139, 0.00020161041175015271, 0.00011930931941606104, 8.2535174442455173e-05, 0.00010187202133238316, 0.00019437432638369501, 0.00010731897782534361, 7.7861244790256023e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 86,45,31,86,-127,-9,106,21,106,121,-44,72,41,-7,59,65, 
  /* [1][0][][] */ -47,-2,-73,31,127,89,-20,34,-41,30,-63,35,-18,115,-24,-22, 
  /* [2][0][][] */ -74,45,67,-11,79,117,-16,76,32,1,41,-28,43,-127,-9,26, 
  /* [3][0][][] */ 127,-18,15,-49,106,73,13,-26,57,63,-103,-49,-44,65,-102,98, 
  /* [4][0][][] */ -45,-5,-20,104,-120,-24,-123,-20,-21,27,-34,-71,-62,30,7,127, 
  /* [5][0][][] */ -92,-13,68,31,127,-10,-29,31,-36,74,-31,24,-51,60,-64,-33, 
  /* [6][0][][] */ -127,23,-46,51,3,-64,91,43,25,-66,-26,65,29,24,-44,40, 
  /* [7][0][][] */ -30,80,50,-110,59,56,127,10,41,-12,11,45,72,23,-26,10, 
  /* [8][0][][] */ -52,-56,-80,77,-25,117,-90,-86,74,-59,125,98,126,59,-127,2, 
  /* [9][0][][] */ -63,-127,-14,52,-24,-74,-13,82,46,62,-14,41,-83,16,-35,-38, 
  /* [10][0][][] */ -34,-79,-100,60,-72,88,17,-61,4,-91,91,-21,0,127,-39,104, 
  /* [11][0][][] */ -16,-114,6,58,17,41,-3,6,43,51,-6,-127,-24,44,-88,32, 
  /* [12][0][][] */ -24,-99,-101,106,-117,-125,58,61,91,62,-1,127,-7,-77,-71,-16, 
  /* [13][0][][] */ -91,-47,-57,-21,-34,12,23,31,-36,127,-1,-34,32,35,14,7, 
  /* [14][0][][] */ -127,-6,-68,-69,7,55,-29,-106,102,-16,69,29,50,-23,-98,-71, 
  /* [15][0][][] */ 10,-127,101,-43,-43,-16,2,61,24,-37,-91,-22,91,-12,-14,-40, 
  /* [16][0][][] */ -31,-56,32,-50,52,39,-4,-26,68,-127,60,-16,8,-4,-106,-120, 
  /* [17][0][][] */ 18,36,55,-21,-22,-25,-21,-15,71,-80,64,74,127,-45,7,-105, 
  /* [18][0][][] */ 101,4,4,-52,36,-18,127,-74,27,29,-33,23,13,44,-37,-110, 
  /* [19][0][][] */ 8,-76,-51,-88,-127,14,-38,36,38,-14,24,-101,-9,14,21,-27, 
  /* [20][0][][] */ 21,49,85,-73,77,-37,-78,105,-85,-120,18,-81,-28,127,-5,-24, 
  /* [21][0][][] */ 26,-96,-110,-53,61,41,92,109,-62,-127,19,44,72,-55,-39,88, 
  /* [22][0][][] */ 40,-35,40,1,-4,-1,21,37,17,127,40,38,2,16,84,-12, 
  /* [23][0][][] */ -100,-127,-12,66,72,6,-6,52,31,-3,-38,-81,15,90,83,108, 
  /* [24][0][][] */ 6,-1,12,60,-8,-102,15,-66,6,94,-127,42,-47,-91,94,-101, 
  /* [25][0][][] */ 111,-70,89,127,57,-6,-28,-13,-96,96,31,-86,-24,-7,47,-42, 
  /* [26][0][][] */ -32,49,5,33,-45,127,-20,39,-52,-38,-81,34,-2,28,23,-104, 
  /* [27][0][][] */ 11,-32,4,-68,-54,-6,-112,18,-110,-13,-74,-38,-94,57,-11,127, 
  /* [28][0][][] */ -95,64,48,-29,43,-2,-116,-30,-28,-9,-17,-18,-3,-47,-127,-10, 
  /* [29][0][][] */ -41,-108,-17,113,-24,4,118,4,84,58,-127,49,16,-40,-31,79, 
  /* [30][0][][] */ 57,-58,-35,-3,-127,21,99,-28,11,-37,-21,-26,12,34,-13,75, 
  /* [31][0][][] */ -127,-35,14,87,-24,-31,-88,16,-4,-18,-7,-28,-62,-46,-1,59, 
  /* [32][0][][] */ -127,-23,-98,-22,-101,-35,20,20,68,25,-19,-37,24,53,52,12, 
  /* [33][0][][] */ -23,-12,-84,15,-115,-127,15,16,-100,33,-73,-35,-66,92,89,61, 
  /* [34][0][][] */ 87,127,-15,43,-101,-41,81,-23,9,-125,7,16,-58,-28,9,84, 
  /* [35][0][][] */ 70,-5,-120,-11,-127,46,89,-48,51,36,-38,-16,27,64,37,65, 
  /* [36][0][][] */ -37,-24,-86,41,127,-26,31,85,-92,28,-85,-51,23,18,20,72, 
  /* [37][0][][] */ -89,85,20,-49,65,-58,-14,-62,15,-16,-18,61,65,-50,-7,-127, 
  /* [38][0][][] */ 25,104,30,-57,-94,-40,-121,-69,-43,-39,25,74,-72,-110,127,-45, 
  /* [39][0][][] */ 28,-41,28,77,37,87,127,-68,13,27,15,-22,33,97,36,90, 
  /* [40][0][][] */ 113,76,91,84,-72,-55,12,-10,-71,36,-10,-49,4,-28,127,17, 
  /* [41][0][][] */ -23,-23,-14,68,-124,109,-15,25,-76,8,-106,-2,7,24,52,-127, 
  /* [42][0][][] */ 29,-83,27,-2,127,25,55,-27,1,-84,-125,-82,-14,-24,-13,10, 
  /* [43][0][][] */ -69,-50,-55,-50,67,27,-19,65,-83,-33,-127,-108,97,-24,-88,48, 
  /* [44][0][][] */ -23,-63,-89,-67,5,59,86,25,-40,-127,-23,43,-4,4,31,116, 
  /* [45][0][][] */ 4,-48,-57,24,-127,21,-37,-78,46,-22,43,-52,22,14,5,47, 
  /* [46][0][][] */ 35,-54,11,12,91,-91,-13,75,15,7,23,94,-60,-33,57,-127, 
  /* [47][0][][] */ -63,-24,8,80,-47,-3,52,41,-37,127,104,117,-23,52,26,98, 
  /* [48][0][][] */ 52,-5,-68,-77,40,-47,11,57,51,-64,-9,37,-43,8,-54,-127, 
  /* [49][0][][] */ 24,17,-12,34,-23,-43,11,67,-52,127,-31,41,-48,-2,52,64, 
  /* [50][0][][] */ 16,13,23,22,-127,-28,-3,-69,72,22,12,46,-11,-77,29,-6, 
  /* [51][0][][] */ 28,10,14,-124,-50,77,69,-42,-24,22,14,-47,127,70,-52,-24, 
  /* [52][0][][] */ 51,3,19,-104,88,-108,14,-68,19,8,127,-99,74,-27,-50,119, 
  /* [53][0][][] */ -46,-107,70,-34,-25,-127,40,-127,34,109,-93,117,-11,-18,31,-116, 
  /* [54][0][][] */ 85,127,9,-10,-125,-80,-111,-117,-33,25,35,118,-125,-39,44,-4, 
  /* [55][0][][] */ 14,10,-40,63,-24,19,11,-3,17,127,-2,72,-23,21,15,54, 
  /* [56][0][][] */ 14,-86,-127,104,-46,70,10,82,106,11,20,44,-72,-67,48,103, 
  /* [57][0][][] */ 14,18,120,-94,127,-18,-39,-43,125,1,-32,99,50,-11,57,-96, 
  /* [58][0][][] */ 127,-19,51,-70,53,24,31,96,90,75,9,80,87,-5,122,-23, 
  /* [59][0][][] */ -42,51,79,-32,33,-60,18,-11,9,31,-127,-83,-58,-31,29,-16, 
  /* [60][0][][] */ 26,-16,10,-30,-13,-10,26,-65,27,127,8,49,-13,-18,-39,-30, 
  /* [61][0][][] */ 42,73,6,-33,-94,-127,-2,-79,-76,-3,-31,-17,-34,-66,42,91, 
  /* [62][0][][] */ -49,89,-37,54,-61,127,-46,20,-103,43,-72,5,-18,5,76,-119, 
  /* [63][0][][] */ 27,-20,-40,-127,-29,-45,56,18,-20,-92,-31,33,-45,75,59,-19, 
  /* [64][0][][] */ -32,21,-4,-37,36,-57,34,57,-127,-16,-62,-46,-10,62,68,56, 
  /* [65][0][][] */ -93,-49,-5,-8,105,10,-54,-84,-85,-19,-16,-10,-79,127,-67,35, 
  /* [66][0][][] */ -20,55,7,49,-26,127,-39,26,-45,20,-56,52,-19,66,63,-91, 
  /* [67][0][][] */ 24,-8,-8,-21,47,-74,61,-108,29,55,-1,127,-48,-39,-17,-120, 
  /* [68][0][][] */ -18,-127,-14,89,34,-43,-14,49,106,94,43,0,-106,43,-46,-51, 
  /* [69][0][][] */ 70,88,96,-36,51,-26,4,65,37,72,3,64,100,-92,58,-127, 
  /* [70][0][][] */ 50,37,46,-33,127,24,-88,-41,-123,-118,-2,55,-21,101,-101,14, 
  /* [71][0][][] */ -56,-20,-12,-87,55,48,52,-20,-127,104,-123,-67,-29,98,-74,103, 
  /* [72][0][][] */ 16,11,62,-10,-63,-61,-108,-68,5,52,-23,40,35,112,-127,1, 
  /* [73][0][][] */ 7,-41,-28,-9,43,-127,12,-47,84,85,90,-13,22,-26,-46,115, 
  /* [74][0][][] */ 9,6,-29,71,-47,-5,83,13,77,47,12,95,127,20,-42,17, 
  /* [75][0][][] */ -28,38,-29,29,-52,127,-18,22,-48,22,-40,35,-11,41,12,-61, 
  /* [76][0][][] */ -69,89,-88,91,-107,20,3,10,36,33,-16,-51,69,-30,-127,59, 
  /* [77][0][][] */ 82,88,-127,109,42,17,70,56,18,-11,106,-57,55,13,83,41, 
  /* [78][0][][] */ 23,-39,4,-40,55,-127,26,-28,40,38,114,-3,21,-13,-34,98, 
  /* [79][0][][] */ -42,52,-8,12,-18,-41,-18,7,-127,-26,11,-15,73,17,-50,-20, 
  /* [80][0][][] */ -46,37,101,14,105,20,8,-127,-39,88,-78,-9,32,-56,6,26, 
  /* [81][0][][] */ 115,109,-35,22,37,-37,92,127,-97,113,-63,-22,-22,34,109,126, 
  /* [82][0][][] */ 67,78,-18,-34,-15,-24,97,-78,13,5,-41,85,127,26,46,-27, 
  /* [83][0][][] */ 13,3,32,28,28,23,-17,-127,67,-7,71,15,18,-41,-58,-124, 
  /* [84][0][][] */ -127,-51,-40,-15,22,119,98,-8,120,83,83,119,57,63,-91,-2, 
  /* [85][0][][] */ 59,6,62,-79,36,-44,-28,62,-13,127,-36,5,-50,70,107,25, 
  /* [86][0][][] */ -94,55,-55,-24,11,86,13,34,69,8,127,-36,-36,72,-26,2, 
  /* [87][0][][] */ 15,-46,28,-49,54,-127,36,-38,52,-5,75,-28,43,-32,-37,87, 
  /* [88][0][][] */ -57,63,45,17,122,-23,18,23,-29,-48,67,-55,72,96,87,-127, 
  /* [89][0][][] */ -30,19,-13,7,-46,127,-21,60,-62,19,-33,40,-11,70,14,-93, 
  /* [90][0][][] */ 61,-97,21,33,123,-17,61,14,6,-104,-127,-45,-5,-40,-45,13, 
  /* [91][0][][] */ -50,71,0,-63,45,-24,-91,36,-71,42,-105,-86,-127,-39,-18,52, 
  /* [92][0][][] */ 108,78,69,56,-127,-115,-9,14,-30,53,-22,-14,-5,-54,45,-8, 
  /* [93][0][][] */ -11,-120,-56,26,-27,-46,-22,127,78,61,-16,37,-32,48,-5,-25, 
  /* [94][0][][] */ 119,-18,127,-10,38,-43,6,14,44,85,-15,35,26,-10,125,-26, 
  /* [95][0][][] */ -87,-18,-70,-48,127,-29,10,57,-55,35,-87,-95,-10,27,-91,0, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0030659046024084091, 0.002027131849899888, 0.004286913201212883, 0.0024548065848648548, 0.0020080225076526403, 0.0011293357238173485, 0.0035535716451704502, 0.0025171497836709023, 0.0011761229252442718, 0.0033315964974462986, 0.00078015145845711231, 0.0031685088761150837, 0.0034657223150134087, 0.0047894697636365891, 0.0020961177069693804, 0.002874553669244051, 0.0027613956481218338, 0.0032759872265160084, 0.0026816911995410919, 0.0019402424804866314, 0.0038064420223236084, 0.0013529470888897777, 0.0043584275990724564, 0.0028673205524682999, 0.0010632971534505486, 0.0024973053950816393, 0.0036920716520398855, 0.003842455567792058, 0.0018667677650228143, 0.0045785550028085709, 0.0027264612726867199, 0.0028945545200258493, 0.0041252267546951771, 0.0016246595187112689, 0.001624021795578301, 0.002312034834176302, 0.0026037546340376139, 0.0031473955605179071, 0.0018794977804645896, 0.0039321128278970718, 0.00079454976366832852, 0.0033060719724744558, 0.0023989875335246325, 0.0019811992533504963, 0.0019751472864300013, 0.0020214421674609184, 0.0021573640406131744, 0.0015325419371947646, 0.0041781230829656124, 0.0044634304940700531, 0.0032708456274122, 0.002487316494807601, 0.0025305331218987703, 0.0014335215091705322, 0.0012152992421761155, 0.0047008730471134186, 0.0025638600345700979, 0.00088245247025042772, 0.0037279406096786261, 0.0022719493135809898, 0.0031666029244661331, 0.0014750433620065451, 0.0023057372309267521, 0.0045856493525207043, 0.0012759480159729719, 0.001529720495454967, 0.0042434311471879482, 0.0022052302956581116, 0.0018025160534307361, 0.0027055877726525068, 0.002623855834826827, 0.0023093479685485363, 0.0041610551998019218, 0.0027320217341184616, 0.003314267611131072, 0.0035340196918696165, 0.003959049005061388, 0.0010084721725434065, 0.0032287118956446648, 0.0023965367581695318, 0.0023714741691946983, 0.002479711314663291, 0.0024091775994747877, 0.0015425949823111296, 0.0025031212717294693, 0.0021051715593785048, 0.0018155298894271255, 0.0040806564502418041, 0.0044985515996813774, 0.0039342744275927544, 0.0023282309994101524, 0.001610611448995769, 0.0019879553001374006, 0.0037930675316601992, 0.0020942485425621271, 0.0015194031875580549, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5884, 10534, -18943, -128, 9070, -11301, -45032, -7409, -8509, 11932, -13716, -12259, 5030, -5583, -1947, 1153, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00016622351540718228, 0.00016449604299850762, 0.00012628865079022944, 0.00015975556743796915, 0.00012358989624772221, 0.00011615180119406432, 9.6578340162523091e-05, 0.00014195758558344096, 9.1003115812782198e-05, 8.6562824435532093e-05, 0.00016987042909022421, 0.00016440589388366789, 0.00011588240158744156, 6.7839835537597537e-05, 0.00010760247823782265, 0.00012867820623796433, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 15,40,16,-36,81,70,-47,52,-19,111,4,56,-30,27,-30,48,45,89,41,-70,-66,74,-21,34,58,57,71,62,-52,-38,-5,107,-24,-3,-80,59,46,-127,-30,-6,7,-51,62,-3,-6,-51,-68,-1, 
  /* [1][0][][] */ -55,-7,-80,-33,11,100,-50,14,-20,-40,-36,28,52,-17,-35,-23,-17,-24,1,15,-56,35,-100,-29,-51,-37,50,59,-22,-35,41,-32,11,-43,-28,40,6,-62,127,-35,-16,32,-44,-20,35,58,21,13, 
  /* [2][0][][] */ 8,3,68,-29,-5,-81,21,2,109,74,-77,15,120,-69,127,96,-72,-27,-26,27,73,-73,-51,-108,14,-34,58,-69,35,47,-54,23,51,-51,41,57,-63,13,0,-35,40,35,65,-6,23,-78,82,-50, 
  /* [3][0][][] */ 32,6,-22,-25,36,107,5,-20,51,-44,17,-24,-61,9,-1,42,-40,-65,36,-120,-7,1,-32,5,-35,95,127,67,-22,-28,22,40,59,-30,95,42,-45,-59,8,35,28,16,-17,-1,28,22,-10,-6, 
  /* [4][0][][] */ 96,7,2,-46,104,95,65,1,70,-21,-113,18,50,-32,19,-18,-91,-121,-16,-100,-15,29,-41,-46,-71,124,-101,127,-64,-58,21,81,52,-53,22,-25,-7,20,-16,32,-40,0,-13,54,-22,119,-42,-44, 
  /* [5][0][][] */ 25,-19,-64,14,-25,67,15,-24,66,45,46,80,44,-17,33,-10,-50,127,-15,40,16,-7,-63,-1,33,-14,-88,-58,-17,37,26,-24,-47,15,47,2,-53,9,-103,-6,94,-21,18,46,-14,4,-39,23, 
  /* [6][0][][] */ 68,19,26,70,21,-30,110,-76,24,79,115,119,42,42,-52,78,37,-51,-59,80,48,-48,-55,92,-72,114,102,1,105,41,-44,17,116,-79,-127,2,115,22,20,19,27,51,54,-18,73,126,29,20, 
  /* [7][0][][] */ -96,-5,-33,37,-76,-64,25,71,70,111,-43,-73,-97,22,-16,-29,-83,105,-13,124,-46,29,43,33,-36,-105,-55,-86,32,45,9,0,-35,20,17,-38,3,-51,127,-3,-4,42,19,-15,54,72,-22,-15, 
  /* [8][0][][] */ -1,-80,69,-69,77,-58,75,-50,-11,-101,20,30,-23,-11,33,34,-4,5,-45,81,10,47,-41,21,73,4,-65,-28,-125,-11,-67,-97,12,-86,-11,94,-1,42,120,26,13,7,72,127,-1,-50,-49,75, 
  /* [9][0][][] */ -1,-26,11,-55,28,64,-46,56,24,-54,-42,-32,4,-35,89,-17,8,-127,51,56,-84,37,64,-27,-25,-82,-10,66,55,60,-40,-37,-47,36,2,115,-28,-52,-64,-27,-35,-14,33,94,44,65,-62,29, 
  /* [10][0][][] */ -20,27,-23,3,20,19,-73,-32,46,33,67,-7,-52,-2,36,-55,-56,127,-2,52,10,-17,25,33,-50,39,8,90,36,1,-29,-10,65,8,-4,22,-16,-41,-30,19,-93,-9,32,-30,5,41,27,21, 
  /* [11][0][][] */ -36,51,-15,47,32,55,-5,20,13,13,-127,-58,61,18,-13,-43,-10,25,-58,-39,-2,-9,92,7,43,13,-14,34,-23,37,-10,53,22,-19,-62,-5,41,81,105,12,34,-26,50,-7,-57,-17,87,18, 
  /* [12][0][][] */ -71,12,28,33,-49,-55,-13,-15,-40,-36,-110,31,61,-95,-2,27,59,110,95,-127,-17,31,-52,-56,-8,-7,38,-22,9,16,-3,83,57,80,47,-40,-63,-19,44,-6,-39,7,45,-15,53,-9,-29,-19, 
  /* [13][0][][] */ -63,-109,-61,-74,-11,5,49,29,-127,13,120,-74,30,59,104,-6,94,27,-19,-81,88,-87,126,13,-88,-9,-51,5,-42,-80,-91,13,27,-15,-53,38,14,-42,80,-84,-20,48,52,27,39,-32,96,-86, 
  /* [14][0][][] */ 52,30,-56,15,-40,30,-91,-26,-24,46,50,34,-30,-62,5,-40,53,-112,15,20,77,-61,28,14,-7,123,-67,2,-65,-40,-93,-3,127,48,96,-20,-84,-3,-23,60,-6,-55,103,-38,-59,-60,-52,76, 
  /* [15][0][][] */ -61,17,30,19,76,-11,-8,43,11,59,-5,41,44,-2,-39,-27,14,32,-5,-24,29,-42,-30,-41,35,-69,-46,66,-27,-8,25,-4,-60,11,127,-13,-81,18,42,-23,-58,-31,9,-9,-42,-42,0,1, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0070644994266331196, 0.0069910818710923195, 0.0053672674112021923, 0.0067896111868321896, 0.005252570379525423, 0.0049364515580236912, 0.0041045793332159519, 0.0060331970453262329, 0.0038676324766129255, 0.003678919980302453, 0.0072194929234683514, 0.0069872504100203514, 0.0049250018782913685, 0.0028831928502768278, 0.0045731053687632084, 0.0054688239470124245, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 9579, 350, 16859, -461, 14459, -2082, 30268, 367, 12934, 27930, 4671, 20894, 3169, 11192, 29428, 23107, 337, -1313, -4231, 43479, 79, 15120, -240, 13351, 15129, 33920, -4101, -390, -738, 11304, 21354, -462, -1450, -4695, -1022, 12908, 10785, 19050, 2453, 17935, 20105, -2749, 1025, 12021, 93, 2997, 37830, 31622, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.809048060560599e-05, 8.7906242697499692e-05, 8.0070494732353836e-05, 0.00011571868526516482, 0.00011397802154533565, 0.0001006721067824401, 7.3541174060665071e-05, 0.0003408349584788084, 0.00010184534039581195, 7.4969037086702883e-05, 5.8330097090220079e-05, 0.00013273110380396247, 6.402653525583446e-05, 0.00013266116729937494, 5.0346181524218991e-05, 9.6906558610498905e-05, 9.8248892754781991e-05, 7.2708258812781423e-05, 0.00016039644833654165, 4.7351317334687337e-05, 8.2830410974565893e-05, 6.6229957155883312e-05, 0.00021125486819073558, 0.00013486591342370957, 6.5518419432919472e-05, 7.9938865383155644e-05, 8.8563399913255125e-05, 5.5679647630313411e-05, 0.00021975807612761855, 0.00013292278163135052, 8.4055653132963926e-05, 0.00026749781682156026, 0.00014192696835380048, 0.00016096096078399569, 0.00011013480252586305, 8.3636725321412086e-05, 0.00010567491699475795, 9.0901128714904189e-05, 9.8155520390719175e-05, 0.00012012114166282117, 8.1862817751243711e-05, 0.00022768779308535159, 0.00034473009873181581, 9.404549200553447e-05, 0.00014822128287050873, 5.3370014938991517e-05, 4.713254384114407e-05, 4.1351664549438283e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -55,79,-127,100,-127,83,-63,8,-111,-70,61,-33,43,-109,-13,-20,45,77,86,-94,112,-127,42,-57,-86,-61,97,127,-84,-76,-51,34,105,-79,78,-127,-34,-65,64,-68,29,-70,66,-103,77,60,-58,-57, -65,81,-34,117,-64,80,-17,85,-120,-79,85,-85,80,-127,-31,-58,64,97,127,-127,127,-84,52,-95,-86,-101,105,96,45,-72,-55,84,127,-127,94,-95,-78,-127,93,-59,-77,70,127,-29,-50,78,-72,-105, -20,42,-40,13,-58,55,-18,-9,-71,-15,26,-4,42,-49,-12,-38,15,41,75,-61,30,-22,7,-28,-47,-47,25,37,64,-34,-54,86,48,-87,40,12,-37,-44,27,-29,-127,-6,62,-21,-57,55,-49,-95, 
  /* [0][1][][] */ -55,127,-13,127,-48,96,-127,120,-108,-60,121,-127,58,-52,-88,-91,85,91,-25,-108,101,-120,127,-64,-126,-105,110,113,-127,-70,-113,23,78,56,89,-107,-118,-61,69,-54,-90,-56,95,-97,127,82,-127,-127, -127,109,-73,114,-95,127,-97,127,-127,-127,127,-110,127,-87,-127,-127,127,127,-8,-91,120,-106,119,-127,-115,-127,127,71,3,-127,-127,74,91,73,127,-110,-127,-62,127,-127,-62,127,77,-127,-19,127,-96,-107, -87,61,-67,16,-28,50,-33,63,-66,-55,58,-35,68,-17,-55,-28,73,65,2,-35,23,-12,61,-44,-127,-55,47,18,122,-87,-44,127,19,43,43,-7,-47,10,50,-61,-28,-39,-18,-82,-42,45,-48,-98, 
  /* [0][2][][] */ -38,65,-28,51,-27,51,-74,87,-30,-22,28,-64,60,-72,1,-51,16,51,-50,16,-7,-34,56,-16,-51,-26,33,30,-92,-44,-107,26,50,84,36,-76,-30,-17,38,-28,-114,-19,52,-68,40,64,-71,-115, -52,73,-99,37,-111,65,-73,60,-47,-31,53,-29,58,-118,-13,-72,36,68,-52,0,4,-48,1,-44,-14,-61,22,48,-23,-91,-108,54,47,62,63,-63,-72,-37,35,-78,-33,40,76,-25,-43,62,-57,-102, -10,60,-56,-9,-6,9,-30,49,-27,7,26,-20,45,-2,-28,-9,23,40,-37,24,15,-16,10,-13,-51,-26,32,-15,48,-37,-27,40,-17,68,52,38,-35,34,25,-52,-25,3,-32,-10,-49,28,-6,-45, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.004168845247477293, 0.0037360151764005423, 0.003402995876967907, 0.0049180439673364162, 0.0048440657556056976, 0.0042785643599927425, 0.0031254997011274099, 0.014485484920442104, 0.004328426904976368, 0.0031861839815974236, 0.0024790291208773851, 0.0056410715915262699, 0.0027211278211325407, 0.0056380997411906719, 0.0021397126838564873, 0.0041185286827385426, 0.0041755777783691883, 0.0030901008285582066, 0.0068168486468493938, 0.0020124309230595827, 0.0035202924627810717, 0.002814773004502058, 0.0089783314615488052, 0.0057318010367453098, 0.0027845327276736498, 0.0033974016550928354, 0.0037639443762600422, 0.0023663849569857121, 0.0093397181481122971, 0.0056492183357477188, 0.0035723652690649033, 0.011368656530976295, 0.0060318959876894951, 0.0068408409133553505, 0.0046807290054857731, 0.0035545607097446918, 0.0044911839067935944, 0.0038632978685200214, 0.0041716094128787518, 0.0051051485352218151, 0.0034791696816682816, 0.0096767311915755272, 0.014651029370725155, 0.0039969333447515965, 0.0062994044274091721, 0.0022682256530970335, 0.0020031330641359091, 0.0017574457451701164, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2033, -1654, 1174, -1872, 4568, -1208, 6198, -5746, 1741, 1252, 1811, 5196, 185, -641, 662, 5846, -1166, 3609, 5300, 607, -1223, 2680, -1720, 4733, 2463, 2215, 1268, -1217, 8858, -510, 2931, -2116, -668, 5182, -578, 2027, 1840, 1196, 765, 5049, 1768, 6984, -4675, 1200, 5922, 282, 2312, 2349, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00017401562945451587, 0.00019961387442890555, 0.00024714152095839381, 0.00022520755010191351, 0.00016999710351228714, 0.00018634664593264461, 0.00012530162348411977, 9.929114457918331e-05, 0.00022780470317229629, 0.00020497164223343134, 0.00020643182506319135, 0.00015456130495294929, 0.00032754015410318971, 0.00028351315995678306, 0.00026569227338768542, 0.00014520561671815813, 0.0002744786033872515, 0.00018985051428899169, 0.00014988903421908617, 0.00025060918414965272, 0.00026151363272219896, 0.00020752445561811328, 0.00017197555280290544, 0.00018374432693235576, 0.00015833623183425516, 0.00016439738101325929, 0.00023420054640155286, 0.00023885387054178864, 0.00010628408927004784, 0.00026099389651790261, 0.00017251192184630781, 0.00015905796317383647, 0.00015964674821589142, 0.00015563693887088448, 0.00031397357815876603, 0.00023839237110223621, 0.00026114695356227458, 0.00018683884991332889, 0.00016316614346578717, 0.00015805853763595223, 0.00027981694438494742, 0.00011727020319085568, 0.00012468951172195375, 0.00026544055435806513, 0.00012284252443350852, 0.00019355582480784506, 0.00021249183919280767, 0.00021490453218575567, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 53,40,127,-28,60,86,-84,-40, 
  /* [1][0][][] */ 15,-101,-127,-11,79,15,38,-11, 
  /* [2][0][][] */ -127,8,-25,-18,66,21,-63,-33, 
  /* [3][0][][] */ 37,74,127,-71,-3,-92,-5,-37, 
  /* [4][0][][] */ -127,29,-61,-26,48,22,-41,-85, 
  /* [5][0][][] */ -99,19,-47,2,8,47,-81,-127, 
  /* [6][0][][] */ -46,-127,-99,38,124,11,43,40, 
  /* [7][0][][] */ -85,-127,-124,-77,-116,-62,20,106, 
  /* [8][0][][] */ 105,29,-23,-20,78,-87,-127,5, 
  /* [9][0][][] */ -23,40,-45,75,-62,-49,127,-40, 
  /* [10][0][][] */ -21,114,49,52,127,-10,5,50, 
  /* [11][0][][] */ -64,-24,-20,-20,-100,96,127,-4, 
  /* [12][0][][] */ 67,47,-127,53,-16,-51,-83,-10, 
  /* [13][0][][] */ 51,-34,-56,11,12,-127,-5,-31, 
  /* [14][0][][] */ 33,-66,53,2,127,-98,-60,1, 
  /* [15][0][][] */ -44,-36,5,127,50,77,-65,42, 
  /* [16][0][][] */ 119,30,-37,22,94,-127,-97,-21, 
  /* [17][0][][] */ 47,127,57,72,49,51,23,-68, 
  /* [18][0][][] */ 52,-5,19,-24,127,17,41,-41, 
  /* [19][0][][] */ 5,127,45,18,-112,18,23,-30, 
  /* [20][0][][] */ -30,3,73,-127,20,30,-23,87, 
  /* [21][0][][] */ -34,64,37,-102,30,65,-2,127, 
  /* [22][0][][] */ -74,-81,-114,18,-95,127,85,-14, 
  /* [23][0][][] */ 83,41,-127,24,14,-48,-64,-18, 
  /* [24][0][][] */ -67,64,16,16,-2,105,-127,95, 
  /* [25][0][][] */ -100,-51,-127,22,-65,-62,59,112, 
  /* [26][0][][] */ 56,-19,-32,-31,105,-12,127,-32, 
  /* [27][0][][] */ 127,-74,41,83,21,43,-26,82, 
  /* [28][0][][] */ 10,47,47,-11,127,-72,42,-48, 
  /* [29][0][][] */ -24,-8,-8,-49,-52,17,127,-23, 
  /* [30][0][][] */ 30,-127,-48,-74,-65,3,28,-60, 
  /* [31][0][][] */ 22,48,2,-13,-127,2,-49,-16, 
  /* [32][0][][] */ 25,-72,-52,62,-6,-88,127,-112, 
  /* [33][0][][] */ 60,127,30,46,76,-36,7,-25, 
  /* [34][0][][] */ -127,-35,97,13,-27,70,112,18, 
  /* [35][0][][] */ -17,70,127,-26,-58,-51,-44,15, 
  /* [36][0][][] */ -125,14,87,-10,-5,127,96,36, 
  /* [37][0][][] */ -37,-71,3,-127,-35,-94,84,65, 
  /* [38][0][][] */ 38,-9,97,-55,55,46,-127,21, 
  /* [39][0][][] */ -31,113,-127,-56,-40,6,14,83, 
  /* [40][0][][] */ 55,-39,30,38,1,7,15,127, 
  /* [41][0][][] */ -24,59,127,-11,21,67,-48,8, 
  /* [42][0][][] */ 65,-113,-92,-15,-127,-9,35,-86, 
  /* [43][0][][] */ 8,-57,13,-77,127,-43,24,12, 
  /* [44][0][][] */ 15,127,103,47,-14,29,-52,16, 
  /* [45][0][][] */ -60,40,32,83,-111,79,-127,26, 
  /* [46][0][][] */ -38,-40,57,38,-127,-87,-8,-11, 
  /* [47][0][][] */ -3,71,28,-77,-127,24,-34,58, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0020576503593474627, 0.0023603371810168028, 0.0029223286546766758, 0.0026629699859768152, 0.0020101333502680063, 0.0022034586872905493, 0.001481630839407444, 0.0011740695917978883, 0.002693680115044117, 0.0024236901663243771, 0.0024409561883658171, 0.0018276124028488994, 0.003873003413900733, 0.0033524057362228632, 0.0031416823621839285, 0.0017169860657304525, 0.0032455765176564455, 0.0022448902018368244, 0.0017723651835694909, 0.0029633319936692715, 0.0030922719743102789, 0.0024538759607821703, 0.0020335274748504162, 0.0021726875565946102, 0.0018722490640357137, 0.0019439192255958915, 0.0027693079318851233, 0.0028243311680853367, 0.0012567577650770545, 0.0030861261766403913, 0.0020398697815835476, 0.0018807832384482026, 0.0018877453403547406, 0.0018403313588351011, 0.0037125854287296534, 0.0028188740834593773, 0.0030879362020641565, 0.0022092787548899651, 0.0019293604418635368, 0.001868965569883585, 0.0033086996991187334, 0.0013866632943972945, 0.001474392949603498, 0.0031387058552354574, 0.0014525533188134432, 0.0022887038066983223, 0.0025126128457486629, 0.0025411418173462152, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2070, 1806, 20370, -3278, 2670, -14544, 6272, -13868, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.6061009420081973e-05, 0.000106898216472473, 0.00015225930837914348, 0.00011354756861692294, 0.00011542333959368989, 0.00011306919623166323, 7.7334101661108434e-05, 7.564585393993184e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -30,-50,-16,-105,-8,-24,87,73,-104,-113,-23,8,-51,1,-70,34,-109,17,5,127,68,-12,-1,123,98,95,59,-2,-116,-52,-87,-55,-48,103,63,-38,29,-38,101,3,56,-10,13,-100,47,-55,-40,-71, 
  /* [1][0][][] */ -11,52,-11,-38,-86,48,-24,-67,-34,67,-4,-3,47,41,-55,-22,-8,-115,83,-47,127,-9,-46,42,67,-20,-84,41,43,-12,55,34,-21,-19,8,-18,4,103,-21,-37,51,29,-11,-3,110,0,-43,62, 
  /* [2][0][][] */ -28,-34,101,-1,68,-38,-12,13,-29,-1,-3,32,7,-42,-43,-127,-32,-101,-4,16,-82,16,-27,-22,-40,2,-9,-56,-38,10,-34,-11,6,-13,35,-10,23,-32,-45,-1,44,-40,17,-40,-34,-47,-56,-45, 
  /* [3][0][][] */ 56,17,55,5,32,-53,41,62,-48,-27,46,-43,-63,41,-22,47,57,29,-23,30,-111,-65,127,18,7,0,-60,-49,-46,62,106,-75,0,-109,-34,31,-20,-62,-17,57,-94,-51,60,-17,-99,-71,54,-8, 
  /* [4][0][][] */ 21,-19,69,-36,-1,-12,-2,-11,-51,-11,-17,-9,47,-68,25,-98,46,31,13,-30,15,39,31,14,1,-13,69,-20,29,26,-127,-14,-22,-29,5,11,40,5,42,-7,-27,-13,-81,30,-18,-100,5,25, 
  /* [5][0][][] */ 11,-33,49,38,18,19,21,-10,-56,6,-34,18,29,-6,7,-43,82,68,4,-23,74,-41,127,-85,-24,42,-7,28,12,18,-35,-52,-10,-32,-25,-4,33,29,38,9,-58,14,21,11,53,-7,74,-10, 
  /* [6][0][][] */ -34,46,-127,74,66,-2,30,35,-29,-3,70,-66,-101,-12,-33,25,-125,19,2,91,20,40,-98,-90,18,2,52,89,-46,-38,-41,0,23,68,-54,-1,-21,14,70,9,55,65,-108,-33,-41,126,-51,-24, 
  /* [7][0][][] */ 10,58,-69,34,20,69,82,79,31,77,-89,-10,-58,3,-47,-44,42,37,127,94,67,-3,120,8,75,91,-63,86,-51,11,4,-61,6,-44,-19,15,2,79,-56,56,-59,50,-5,-73,61,-6,50,-51, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0028098917100578547, 0.0045468942262232304, 0.0064763189293444157, 0.004829722922295332, 0.0049095083959400654, 0.004809375386685133, 0.0032893905881792307, 0.0032175811938941479, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -179, 7163, -1006, 365, 1405, -837, 3645, -6558, -3240, -199, -5032, -375, 1617, -616, -317, 2725, 12180, 2355, -342, -5051, -6455, 2053, 19600, -7070, -804, 600, 6775, -4944, -1544, 265, -10456, 10074, 7851, -290, 7826, 474, 4, -321, 8185, -1514, 4968, -2142, 4626, 4764, -1544, 8168, 598, 2818, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027739512734115124, 0.00013906737149227411, 0.00045986776240170002, 0.00020667260105255991, 0.00022091610298957676, 0.00022956317116040736, 0.00017568243492860347, 0.00031002718606032431, 0.00010220989497611299, 0.00020710153330583125, 0.00025463316706009209, 0.0016094276215881109, 0.00034404106554575264, 0.00058241112856194377, 0.00049979804316535592, 0.0008677420555613935, 0.00012837212125305086, 6.5739586716517806e-05, 0.0002470608742441982, 0.00027232564752921462, 0.00026870379224419594, 0.00022223893029149622, 8.8706161477603018e-05, 0.00041173378122039139, 0.00018263106176164001, 0.00034420978045091033, 0.0005704052746295929, 0.00020600375137291849, 0.00025678696692921221, 0.00024602338089607656, 0.00011834980978164822, 0.00013798929285258055, 0.00011467383592389524, 0.00021508395730052143, 9.4965595053508878e-05, 0.00030264671659097075, 0.0023222521413117647, 0.00030294008320197463, 0.00016565172700211406, 0.00017762923380360007, 0.00017122467397712171, 0.00011269304377492517, 0.00024292706802953035, 0.00018571445252746344, 0.00030789963784627616, 9.5044233603402972e-05, 7.441395428031683e-05, 0.00016622281691525131, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 17,-50,14,17,-39,-119,-49,74,-31,0,9,14,60,-11,-18,4,85,-2,57,2,9,-37,-78,26,-5,-26,-16,-47,-48,97,-44,-127,24,-5,-85,-60,-9,-32,-4,41,-31,85,-16,-2,-19,53,127,-13, -127,-127,-16,127,-82,125,-93,127,45,38,48,9,64,19,-14,-42,-44,48,27,18,-9,127,11,127,127,-40,-61,40,56,-109,-44,-85,35,-2,-75,-104,26,-1,-36,-51,-127,25,-127,-127,29,45,63,127, -1,-29,14,28,-23,-3,37,72,15,-18,-7,13,-13,-12,-22,0,-80,67,-59,-14,-15,-32,127,30,-58,5,8,-9,5,64,10,-22,-29,-20,-56,62,9,4,29,79,27,-53,10,-44,-12,55,-5,-26, 
  /* [0][1][][] */ -13,-1,-21,2,32,-127,97,-58,-41,-5,7,30,127,11,-2,-22,-52,-67,23,48,69,-86,39,19,-78,127,-83,-41,127,-111,81,-59,-50,9,-98,-2,-1,-77,-42,21,121,127,3,-117,-53,-54,-7,60, 94,-97,127,-3,127,58,-84,-12,19,127,127,-127,-122,127,127,127,127,109,127,127,127,113,8,13,118,-111,-127,127,39,127,127,-4,-127,127,114,127,-127,127,-127,-127,45,59,-126,-29,127,-127,-18,79, 16,60,-35,-9,-59,98,-127,79,119,-68,16,73,-51,-14,-3,-56,1,20,-112,20,3,-119,-54,10,34,-21,-4,91,-73,-63,62,-56,-45,23,127,-37,38,-13,20,-36,122,-19,25,61,-49,111,84,-111, 
  /* [0][2][][] */ -11,50,11,-40,7,-68,-39,3,-13,-14,-8,13,-33,-21,-8,8,-105,-21,0,-18,4,-35,84,-4,-113,8,20,-40,31,-17,9,55,-13,-8,-90,19,-4,-20,14,26,-25,-46,14,15,-9,-6,-13,-15, 33,3,-30,-37,36,-5,106,-55,127,-20,-25,21,-88,-26,-30,-65,-22,127,21,23,26,24,-29,-19,-42,66,53,10,-70,-7,-36,-11,-33,-16,-68,3,50,-4,-7,66,-115,-10,-3,79,40,39,8,-126, -15,51,7,-32,4,-23,-7,-23,-25,-21,-29,19,16,-17,-28,8,45,62,-3,-13,-7,-26,-63,-8,11,-28,15,-18,-10,-16,-11,-13,7,-12,-18,-55,-10,-1,46,39,-11,-23,18,26,-15,9,41,-79, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011789293028414249, 0.0059103630483150482, 0.019544379785656929, 0.0087835853919386864, 0.009388933889567852, 0.0097564347088336945, 0.007466503418982029, 0.013176155276596546, 0.0043439203873276711, 0.0088018151000142097, 0.01082190964370966, 0.068400673568248749, 0.014621744863688946, 0.024752473458647728, 0.021241417154669762, 0.036879036575555801, 0.0054558147676289082, 0.0027939323335886002, 0.010500086471438408, 0.01157383993268013, 0.011419910937547684, 0.00944515410810709, 0.003770011942833662, 0.017498685047030449, 0.0077618202194571495, 0.01462891511619091, 0.024242224171757698, 0.0087551595643162727, 0.010913445614278316, 0.010455993935465813, 0.0050298669375479221, 0.0058645447716116905, 0.0048736380413174629, 0.0091410679742693901, 0.0040360377170145512, 0.012862484902143478, 0.098695717751979828, 0.01287495344877243, 0.0070401984266936779, 0.0075492421165108681, 0.0072770486585795879, 0.0047894543968141079, 0.010324399918317795, 0.0078928638249635696, 0.013085734099149704, 0.0040393797680735588, 0.0031625928822904825, 0.0070644696243107319, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3971, 3813, 9504, 865, 2066, -939, 5680, 11132, 4746, -123, 5202, -3039, 12895, -1993, 2683, 26488, -640, 3042, -121, 2851, 4064, 5724, 208, 17717, 5640, 4453, 21134, 1910, 6112, 4628, 644, 1511, 952, 2427, -104, -156, -4064, -442, 2954, 2977, 8935, 3203, 5008, 6149, 3968, 3371, 2469, 8293, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0001762369938660413, 0.00021389480389188975, 9.2851048975717276e-05, 0.00026029307628050447, 0.00024992271210066974, 0.00030719902133569121, 0.00013254236546345055, 8.5082436271477491e-05, 0.0001300502335652709, 0.00026708730729296803, 0.00016547385894227773, 0.0001775644050212577, 7.4689480243250728e-05, 0.00021826384181622416, 0.00018902639567386359, 4.2895480873994529e-05, 0.00025059445761144161, 0.00015254704339895397, 0.00022767447808291763, 0.00021821071277372539, 0.0001765876222634688, 0.0001435864542145282, 0.00036510967765934765, 5.8697605709312484e-05, 0.00015100323071237653, 0.00014170478971209377, 5.0300899602007121e-05, 0.00021446336177177727, 0.00013097506598569453, 0.00014287307567428797, 0.00043260245001874864, 0.00032921697129495442, 0.00021972278773318976, 0.00016466027591377497, 0.00027611883706413209, 0.00030051788780838251, 0.00013764988398179412, 0.00027659023180603981, 0.0001930811267811805, 0.00017140022828243673, 0.00010424506035633385, 0.00019487368990667164, 0.00016345844778697938, 0.0001323692558798939, 0.00017079258395824581, 0.00021736392227467149, 0.00028346353792585433, 0.00010792114335345104, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 79,127,-51,-97,7,111,36,81, 
  /* [1][0][][] */ 45,-87,42,-127,-34,78,-60,-34, 
  /* [2][0][][] */ -32,127,103,44,111,-12,69,16, 
  /* [3][0][][] */ 81,51,-67,59,-3,-87,-127,2, 
  /* [4][0][][] */ -51,6,-12,-36,-45,82,127,55, 
  /* [5][0][][] */ 19,69,-127,-53,47,31,9,-16, 
  /* [6][0][][] */ -16,127,78,53,60,32,24,-88, 
  /* [7][0][][] */ 127,5,1,38,26,-15,61,32, 
  /* [8][0][][] */ 40,127,75,77,80,84,63,-93, 
  /* [9][0][][] */ 60,115,-127,-64,26,101,-14,100, 
  /* [10][0][][] */ -72,-77,25,-61,0,-46,-47,127, 
  /* [11][0][][] */ 15,-93,-127,-17,1,13,41,-23, 
  /* [12][0][][] */ -21,-84,-54,-13,-127,41,-49,28, 
  /* [13][0][][] */ 2,23,-87,127,-111,-32,-1,-39, 
  /* [14][0][][] */ -73,-38,-127,0,46,3,-18,-68, 
  /* [15][0][][] */ -5,-86,-127,-7,-73,-15,-20,-19, 
  /* [16][0][][] */ 127,-79,-5,72,-78,14,11,105, 
  /* [17][0][][] */ 6,112,127,-12,-43,-17,-40,-26, 
  /* [18][0][][] */ 35,-127,48,103,-3,-88,56,-90, 
  /* [19][0][][] */ 127,-34,-46,43,-91,2,30,87, 
  /* [20][0][][] */ -30,-127,83,83,-12,-103,-8,-70, 
  /* [21][0][][] */ 9,-60,-3,-48,127,-4,57,36, 
  /* [22][0][][] */ -127,17,-82,46,46,38,-96,-80, 
  /* [23][0][][] */ -103,-46,61,4,-115,127,125,-29, 
  /* [24][0][][] */ -59,62,13,-27,-19,127,107,-3, 
  /* [25][0][][] */ -59,-127,-116,-24,-27,-9,-37,-49, 
  /* [26][0][][] */ -25,71,-33,127,-124,42,-57,3, 
  /* [27][0][][] */ 24,-113,32,95,18,-62,-6,-127, 
  /* [28][0][][] */ 20,127,45,21,108,-15,9,-32, 
  /* [29][0][][] */ 124,26,-19,-25,87,-127,-122,85, 
  /* [30][0][][] */ 33,-16,35,-127,4,-10,30,-27, 
  /* [31][0][][] */ 40,-31,9,65,-9,29,5,127, 
  /* [32][0][][] */ -115,-64,29,-68,-34,116,88,127, 
  /* [33][0][][] */ -43,32,51,-51,43,127,-113,71, 
  /* [34][0][][] */ 42,127,-64,-37,24,23,-56,78, 
  /* [35][0][][] */ 26,-127,16,47,-25,-61,8,-49, 
  /* [36][0][][] */ -46,-71,-91,-3,-127,-75,-10,36, 
  /* [37][0][][] */ -62,-127,79,92,-41,-78,-38,-50, 
  /* [38][0][][] */ -54,30,48,-73,-127,-67,-59,60, 
  /* [39][0][][] */ 84,-113,127,83,-11,-58,4,-82, 
  /* [40][0][][] */ -19,58,33,64,-127,0,-50,43, 
  /* [41][0][][] */ 115,127,-83,-94,72,3,-23,39, 
  /* [42][0][][] */ -19,-45,-16,2,127,15,55,22, 
  /* [43][0][][] */ 127,13,97,-2,-104,-7,92,112, 
  /* [44][0][][] */ 61,60,-21,18,55,-112,-127,35, 
  /* [45][0][][] */ 52,28,44,38,53,-127,-11,-45, 
  /* [46][0][][] */ 60,-17,-5,127,35,41,2,55, 
  /* [47][0][][] */ -64,-105,73,82,-41,15,127,-57, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028103452641516924, 0.0034108518157154322, 0.0014806397957727313, 0.004150737076997757, 0.0039853672496974468, 0.0048987180925905704, 0.0021135734859853983, 0.0013567584101110697, 0.0020738327875733376, 0.0042590806260704994, 0.0026387120597064495, 0.0028315128292888403, 0.0011910282773897052, 0.0034805221948772669, 0.003014290239661932, 0.00068402843317016959, 0.0039960793219506741, 0.0024325759150087833, 0.0036305880639702082, 0.0034796749241650105, 0.0028159366920590401, 0.0022896868176758289, 0.0058221844956278801, 0.00093601539265364408, 0.0024079577997326851, 0.0022596810013055801, 0.00080211821477860212, 0.0034199182409793139, 0.0020885805133730173, 0.0022783109452575445, 0.0068984511308372021, 0.0052498248405754566, 0.0035037870984524488, 0.0026257385034114122, 0.0044031012803316116, 0.0047921780496835709, 0.0021950199734419584, 0.0044106179848313332, 0.0030789487063884735, 0.0027332163881510496, 0.0016623332630842924, 0.0031075335573405027, 0.0026065735146403313, 0.0021108128130435944, 0.0027235266752541065, 0.0034661716781556606, 0.004520222544670105, 0.0017209536163136363, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 6566, 14485, -5709, 6754, -1823, 2411, -10838, -18502, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00019861753389704973, 0.00011749744589906186, 0.00013417011359706521, 0.00013879085599910468, 0.0002258056920254603, 0.00012683273234870285, 0.00016728130867704749, 0.00010061278590001166, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -51,-5,27,18,-38,-10,4,9,-47,-2,-66,-51,-20,-66,0,-28,47,-45,42,46,-20,29,-41,26,-6,-34,60,-16,-5,-20,29,8,80,29,41,-127,18,12,-25,-38,2,-7,52,52,40,0,32,5, 
  /* [1][0][][] */ 9,41,59,-21,-22,62,-43,-32,-1,28,-21,-83,29,106,-28,67,-24,19,-32,-52,3,-83,-36,28,-89,-13,-11,-123,-28,-29,43,-60,52,85,-46,15,123,-25,4,52,-34,50,-82,-24,127,-33,-29,-21, 
  /* [2][0][][] */ -1,-21,-61,13,-13,45,27,-6,-6,44,-7,31,73,-87,10,-52,26,-79,15,37,-29,51,-5,24,-22,50,-23,-62,16,-3,26,-71,-31,-80,30,-21,94,30,-19,-55,-7,31,77,36,127,12,27,23, 
  /* [3][0][][] */ -12,19,-75,33,5,-28,-65,-95,17,-13,-25,5,9,25,30,79,-11,8,-28,19,18,-101,36,-52,-79,-17,127,-17,-42,8,-54,10,-3,-62,18,-10,-27,-40,-28,91,-44,-33,8,17,39,8,-36,36, 
  /* [4][0][][] */ -22,-48,-7,13,21,-21,-13,-8,21,-26,54,-69,7,27,0,20,-17,-27,4,-12,-2,-41,2,-28,11,-12,38,52,30,12,-7,25,-11,0,1,0,-71,87,34,-18,28,-25,-16,-19,-74,6,127,3, 
  /* [5][0][][] */ 39,-24,-8,25,35,-40,35,-127,29,-36,-2,112,-75,74,22,-58,3,-90,18,-8,-26,57,-28,-43,-65,71,-20,-5,-9,44,-32,-40,34,46,27,6,-38,4,-32,-54,23,-28,-40,4,-35,51,98,29, 
  /* [6][0][][] */ 50,-18,23,-13,-38,-18,-37,20,-43,3,-40,127,-43,-38,-5,51,6,47,5,36,33,-71,-20,11,24,33,-64,13,8,-47,18,40,8,16,-23,-4,4,0,-4,-1,-12,-18,38,53,-6,-33,66,-14, 
  /* [7][0][][] */ -29,6,-10,57,29,47,16,33,24,11,73,-5,127,113,81,45,45,54,-8,0,31,-17,-88,-20,16,-7,-30,72,36,-32,-29,-17,47,9,43,-106,-78,29,34,63,-41,30,97,126,-63,-28,-117,75, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0084412451833486557, 0.0049936412833631039, 0.0057022296823561192, 0.0058986111544072628, 0.009596741758286953, 0.0053903907537460327, 0.0071094557642936707, 0.0042760432697832584, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 10153, 4823, 2919, 1787, -4595, -1403, 284, 25589, 2227, 3349, 10333, 47381, 587, 4232, -935, 9424, -2990, 14641, 1876, 7933, 10968, 966, 4663, -10142, 10353, 2846, 526, 15534, 1190, 802, -9606, 9370, 2948, -785, -1144, 5120, -8903, 7982, 2596, 14013, -2425, -1890, 4118, 2740, 69, 1705, 1991, -573, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00011175114195793867, 0.00011499758693389595, 0.00020514409698080271, 0.00011295251169940457, 0.00062230677576735616, 0.00014789628039579839, 0.00015645979146938771, 0.00012970932584721595, 0.00016425414651166648, 8.1772712292149663e-05, 5.4019023082219064e-05, 6.5211082983296365e-05, 9.9779965239576995e-05, 6.7106993810739368e-05, 0.00026888371212407947, 0.00019685192091856152, 9.9879907793365419e-05, 0.00023502903059124947, 0.00012319916277192533, 0.00012427708134055138, 0.00010632639168761671, 0.00039098045090213418, 0.00011534294753801078, 0.00026582254213280976, 0.00014246586943045259, 7.7983204391784966e-05, 5.6785636843414977e-05, 7.8325778304133564e-05, 0.00013326322368811816, 0.0007413902785629034, 0.00026947550941258669, 9.0850109700113535e-05, 0.000109628148493357, 0.00015979028830770403, 0.00015531080134678632, 6.6215550759807229e-05, 7.4380499427206814e-05, 4.500502473092638e-05, 9.4314840680453926e-05, 8.3108308899682015e-05, 0.00011962441931245849, 0.00013610461610369384, 8.8426524598617107e-05, 9.0486806584522128e-05, 8.5054583905730397e-05, 0.00030046692700125277, 7.8293851402122527e-05, 0.00017163387383334339, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -21,-100,-1,-63,127,-57,70,-58,-80,-82,-6,-32,94,53,107,-106,83,-34,5,-60,-45,79,1,32,-27,67,81,-75,111,-82,13,-33,-75,-77,69,61,13,103,86,-41,-118,-22,36,62,41,-127,75,64, -29,-127,-47,23,-58,127,35,-67,-66,30,112,-105,127,92,125,-53,-72,-108,31,-44,-17,11,-70,103,-113,123,95,-118,116,-64,14,-127,-29,-76,84,114,127,122,102,-40,-127,-63,59,66,90,92,83,58, -20,-50,-47,80,-24,-35,35,-23,65,18,43,-73,15,36,-10,-36,-72,-16,30,-15,-4,44,-67,-2,-88,34,33,-127,38,45,127,-77,32,27,-7,36,107,112,47,18,-19,83,45,12,57,21,13,-124, 
  /* [0][1][][] */ -66,-72,-14,-90,-53,-95,104,-71,-127,-127,127,-90,72,46,-82,-59,127,-127,-66,-98,-127,114,-82,27,-13,72,127,-49,-113,-90,14,-50,-86,-127,-127,55,52,125,-28,-93,90,-32,47,117,65,97,114,-127, -127,-111,-127,-127,-14,121,127,-127,50,49,127,-127,98,127,63,-127,66,-119,-127,-127,-121,127,-127,127,-127,127,106,-127,-127,127,-22,-100,-127,-107,49,127,124,127,-53,-127,113,-104,127,127,127,-13,127,99, -63,-55,-122,103,66,-41,44,-26,44,42,8,-58,30,44,104,-47,-22,6,-17,-42,-72,6,-89,-10,-70,68,45,-90,-70,29,114,-70,-53,10,60,74,105,60,-29,-19,57,127,78,3,75,-56,6,-5, 
  /* [0][2][][] */ -62,-37,36,41,-14,-37,26,-29,8,-45,37,-8,-23,32,-15,4,-89,-33,81,-53,-44,52,-70,10,-11,24,75,-25,26,55,15,4,-23,-64,-38,14,-5,15,-99,-49,34,-20,23,29,33,36,15,-46, -52,-79,-11,-85,104,43,44,-24,71,7,-30,-32,3,54,-127,-41,19,13,41,-80,-49,-37,-74,30,-36,7,68,-52,24,5,-16,-35,-66,-3,-72,51,61,10,-127,-36,26,-28,43,51,27,-116,20,1, -30,-66,-20,-27,3,5,0,-36,-47,9,-43,-3,9,14,49,-23,49,58,-13,-42,-49,-11,-15,-19,-56,-38,42,-11,-14,-69,17,14,-51,17,22,46,46,37,-82,-4,-7,53,30,16,16,-14,-13,37, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0047494233585894108, 0.004887397401034832, 0.0087186237797141075, 0.0048004817217588425, 0.026448037475347519, 0.0062855919823050499, 0.0066495407372713089, 0.0055126459337770939, 0.0069808010011911392, 0.0034753403160721064, 0.0022958084009587765, 0.0027714709285646677, 0.0042406483553349972, 0.0028520470950752497, 0.011427558027207851, 0.0083662066608667374, 0.0042448961175978184, 0.0099887335672974586, 0.0052359644323587418, 0.0052817757241427898, 0.0045188716612756252, 0.016616668552160263, 0.0049020750448107719, 0.011297457851469517, 0.0060547995381057262, 0.0033142862375825644, 0.0024133895058184862, 0.0033288453705608845, 0.0056636868976056576, 0.031509086489677429, 0.011452709324657917, 0.003861129516735673, 0.0046591963618993759, 0.0067910868674516678, 0.0066007087007164955, 0.002814160892739892, 0.003161171218380332, 0.0019127135165035725, 0.0040083806961774826, 0.0035321030300110579, 0.0050840377807617188, 0.0057844463735818863, 0.0037581273354589939, 0.0038456891197711229, 0.0036148198414593935, 0.012769844383001328, 0.0033274886664003134, 0.0072944397106766701, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1425, -909, -459, 1192, 12134, 2918, -600, 3653, 1910, 1479, 355, 3655, 1515, 341, -926, 388, 3194, 7838, 4256, -1241, 1084, -1502, 20, 3073, -341, -542, 1531, -13, 3043, 14879, 3715, -121, 588, -665, 2917, -199, 277, -271, 1168, 967, 1451, 2279, 96, -403, 588, 2081, 767, -463, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00038997875526547432, 0.00034865271300077438, 0.00027997643337585032, 0.00030951897497288883, 8.1101876276079565e-05, 0.00025336680118925869, 0.00046490842942148447, 0.00023129192413762212, 0.00028067108360119164, 0.00045673950808122754, 0.00029708497459068894, 0.00025276537053287029, 0.00017376613686792552, 0.0003626806428655982, 0.0003272540052421391, 0.00032082523102872074, 0.00024341983953490853, 0.00010822770855156705, 0.0001932175800902769, 0.00025940476916730404, 0.00037655679625459015, 0.00019579076615627855, 0.00038605983718298376, 0.00024279745412059128, 0.00033390746102668345, 0.00087942852405831218, 0.00031902693444862962, 0.00073009595507755876, 0.00026268936926499009, 6.5684464061632752e-05, 0.00021379529789555818, 0.0006616282626055181, 0.00035573419881984591, 0.00024303233658429235, 0.00024604910868220031, 0.00029672900564037263, 0.00038344305357895792, 0.00049117294838652015, 0.00036351790186017752, 0.00053192058112472296, 0.00035515514900907874, 0.00028971867868676782, 0.00030471678473986685, 0.00037807298940606415, 0.00040702894330024719, 0.00025321714929305017, 0.00031258369563147426, 0.00026984669966623187, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -31,35,15,-25,-72,-47,-127,12, 
  /* [1][0][][] */ 71,-67,-53,-62,127,-77,82,18, 
  /* [2][0][][] */ -105,106,-58,-127,42,-18,-15,58, 
  /* [3][0][][] */ 27,10,62,21,81,127,116,-17, 
  /* [4][0][][] */ -65,-127,47,6,-45,-127,-3,-16, 
  /* [5][0][][] */ 127,-35,52,58,-70,-3,5,-27, 
  /* [6][0][][] */ 38,34,127,-30,56,-41,-41,31, 
  /* [7][0][][] */ 18,-6,-127,-42,-42,101,78,-61, 
  /* [8][0][][] */ 2,127,-25,6,69,79,27,34, 
  /* [9][0][][] */ 1,120,-35,87,-5,-127,27,88, 
  /* [10][0][][] */ 20,-127,7,-11,-71,-109,-40,-83, 
  /* [11][0][][] */ -127,-87,104,63,-15,-56,103,74, 
  /* [12][0][][] */ -24,44,-127,77,41,-59,-78,100, 
  /* [13][0][][] */ 90,-127,84,65,11,14,36,-54, 
  /* [14][0][][] */ -12,85,-33,-127,-4,-92,-27,-50, 
  /* [15][0][][] */ 47,110,50,-1,19,-56,125,-127, 
  /* [16][0][][] */ -96,-127,-53,51,-26,8,-25,67, 
  /* [17][0][][] */ -14,-127,-115,85,-67,100,-52,75, 
  /* [18][0][][] */ -90,-69,-47,107,7,94,15,127, 
  /* [19][0][][] */ 71,-127,110,-106,-6,-66,38,-33, 
  /* [20][0][][] */ 3,54,19,21,22,127,81,-16, 
  /* [21][0][][] */ 29,97,46,-32,29,-54,88,-127, 
  /* [22][0][][] */ 34,19,109,15,-5,127,40,-46, 
  /* [23][0][][] */ -63,-52,55,-40,108,120,-32,-127, 
  /* [24][0][][] */ -99,-120,36,-96,101,124,-58,-127, 
  /* [25][0][][] */ 127,12,-59,-16,21,45,-53,4, 
  /* [26][0][][] */ -115,-35,-127,-28,-44,-23,8,5, 
  /* [27][0][][] */ 96,39,1,-53,-127,-17,97,101, 
  /* [28][0][][] */ -127,-72,-1,62,-73,-77,18,10, 
  /* [29][0][][] */ 105,89,72,-127,30,19,-66,-65, 
  /* [30][0][][] */ -95,-52,57,-76,101,112,-52,-127, 
  /* [31][0][][] */ 49,38,-6,127,3,-55,-4,22, 
  /* [32][0][][] */ -28,127,-8,30,26,73,-11,44, 
  /* [33][0][][] */ -52,127,-108,44,6,-47,-22,18, 
  /* [34][0][][] */ -117,-93,-44,127,-20,-8,19,117, 
  /* [35][0][][] */ -49,127,-30,7,70,119,69,75, 
  /* [36][0][][] */ 75,41,-7,-49,-109,-18,127,122, 
  /* [37][0][][] */ -60,127,34,13,-118,105,-27,-110, 
  /* [38][0][][] */ 45,14,12,27,127,74,125,49, 
  /* [39][0][][] */ -13,-73,43,-13,13,50,-90,127, 
  /* [40][0][][] */ -58,-40,-42,127,-41,2,14,48, 
  /* [41][0][][] */ 119,10,51,127,-53,-26,-5,-10, 
  /* [42][0][][] */ -44,12,-72,-127,56,-111,6,79, 
  /* [43][0][][] */ 21,-7,88,-6,35,127,94,4, 
  /* [44][0][][] */ -33,-15,-58,127,58,19,-42,-26, 
  /* [45][0][][] */ 47,110,63,-127,53,-63,33,-84, 
  /* [46][0][][] */ -31,-127,-31,30,-2,42,-70,124, 
  /* [47][0][][] */ 49,20,127,18,48,113,108,-44, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004351301584392786, 0.0038901939988136292, 0.0031239185482263565, 0.0034535480663180351, 0.00090491777518764138, 0.0028270138427615166, 0.005187351256608963, 0.002580706961452961, 0.0031316694803535938, 0.0050962041132152081, 0.0033148119691759348, 0.0028203031979501247, 0.0019388461951166391, 0.0040467148646712303, 0.0036514319945126772, 0.0035797008313238621, 0.0027160276658833027, 0.0012075821869075298, 0.0021558813750743866, 0.0028943840879946947, 0.0042015421204268932, 0.0021845924202352762, 0.0043075750581920147, 0.0027090832591056824, 0.0037256698124110699, 0.0098124798387289047, 0.0035596359521150589, 0.008146258071064949, 0.0029310332611203194, 0.00073289353167638183, 0.002385483356192708, 0.0073823099955916405, 0.0039692078717052937, 0.0027117040008306503, 0.0027453645598143339, 0.0033108401112258434, 0.0042783776298165321, 0.0054804054088890553, 0.0040560569614171982, 0.0059350584633648396, 0.0039627468213438988, 0.0032326204236596823, 0.0033999662846326828, 0.0042184595949947834, 0.0045415437780320644, 0.0028253442142158747, 0.0034877436701208353, 0.003010893240571022, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7461, -3467, 11081, -9782, 23498, 8149, -10701, 11173, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0001621324336156249, 0.00024007250613067299, 0.00015454240201506764, 0.00023325800430029631, 0.00017497834051027894, 0.00016950852295849472, 0.00017286250658798963, 0.00031541488715447485, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -15,-11,-20,-75,-35,-48,21,-24,37,-2,-36,4,116,127,-24,-94, 
  /* [1][0][][] */ 127,-61,-42,16,-52,59,-66,-42,-39,73,-34,-39,-6,4,-66,-12, 
  /* [2][0][][] */ -40,-104,35,47,54,-63,-73,-20,45,-95,26,-127,59,-17,-84,35, 
  /* [3][0][][] */ 37,8,21,19,-11,83,-61,-20,127,58,15,21,-8,-14,10,25, 
  /* [4][0][][] */ -91,-45,-20,-127,-9,40,69,-123,36,-28,-56,-42,-123,35,-34,-21, 
  /* [5][0][][] */ 91,49,68,-28,46,-47,-117,-127,-20,-81,63,40,-64,46,57,-48, 
  /* [6][0][][] */ 115,52,-127,-71,36,-82,-10,-92,-39,21,-112,108,102,-95,22,73, 
  /* [7][0][][] */ -127,4,82,-28,-57,8,3,-55,-47,62,74,-24,51,-24,24,25, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0068906284868717194, 0.010203081183135509, 0.0065680518746376038, 0.0099134650081396103, 0.007436579093337059, 0.0072041121311485767, 0.0073466561734676361, 0.013405132107436657, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 17181, 134, 536, 3423, -225, 448, 10889, 1130, -701, 606, -1305, 3640, 963, 478, 14, -1525, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00013808233779855072, 0.0002428156731184572, 0.00013244924775790423, 0.00016191467875614762, 0.00096889014821499586, 0.00072318583261221647, 0.00014689155796077102, 0.00073165842331945896, 0.0003318103845231235, 0.0010255294619128108, 0.00023292940750252455, 0.00018915437976829708, 9.3326212663669139e-05, 0.00025266202283091843, 0.00021534129336941987, 0.00041217822581529617, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-10,-3,2,-21,8,-1,17,-10,-12,-1,-16,8,-12,10,0, 5,-20,-8,-1,11,-2,8,-24,-11,7,-7,74,-20,16,-9,1, 3,-12,-5,-2,2,-12,2,12,10,1,-10,-15,7,-9,-3,-1, 
  /* [0][1][][] */ 12,-21,7,7,127,-24,-127,-19,127,127,-3,-10,125,-28,-7,-19, -127,127,127,8,-92,-90,-15,-98,12,-108,127,127,127,127,127,127, 20,-25,-3,9,-11,127,8,-9,4,-14,-1,-7,11,-7,-23,-7, 
  /* [0][2][][] */ 4,-16,2,-19,-23,15,55,8,-10,-9,-15,0,5,-2,-16,-12, 26,-35,-7,-127,2,-16,-12,127,-10,2,-8,-19,5,-63,-16,-35, 7,-13,-7,-4,-2,-4,1,-2,-4,1,-12,-11,5,-10,-17,-10, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0058684991672635078, 0.010319666005671024, 0.0056290929205715656, 0.0068813739344477654, 0.041177831590175629, 0.030735397711396217, 0.0062428913079202175, 0.031095482409000397, 0.014101941138505936, 0.043585002422332764, 0.0098994998261332512, 0.0080390609800815582, 0.0039663640782237053, 0.010738136246800423, 0.0091520044952630997, 0.0175175741314888, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 4637, 2240, -7, 3799, 39795, 39852, 1948, 9883, 6161, 1657, 863, 856, 4749, -5172, 409, 33924, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00018880695279221982, 0.0006180488271638751, 0.00020552697242237628, 0.00014712028496433049, 4.2264684452675283e-05, 4.0165850805351511e-05, 0.00013285805471241474, 2.9591294151032344e-05, 0.00013809236406814307, 4.1625666199252009e-05, 0.00034850375959649682, 0.00045092057553119957, 0.00030642145429737866, 1.7928656234289519e-05, 0.00051516201347112656, 5.1391558372415602e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -91, -115, -35, 
  /* [0][1][][] */ 65, -40, 14, 
  /* [0][2][][] */ 29, 127, 16, 
  /* [1][0][][] */ 103, -96, -12, 
  /* [1][1][][] */ -127, 101, 21, 
  /* [1][2][][] */ 12, -5, -16, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 114, 119, 54, 
  /* [3][1][][] */ -1, -24, -16, 
  /* [3][2][][] */ -102, -127, -45, 
  /* [4][0][][] */ 19, -58, 1, 
  /* [4][1][][] */ 33, -127, 1, 
  /* [4][2][][] */ 25, -92, -21, 
  /* [5][0][][] */ -56, 32, 10, 
  /* [5][1][][] */ -127, 33, 17, 
  /* [5][2][][] */ -87, 17, 8, 
  /* [6][0][][] */ -14, 80, 127, 
  /* [6][1][][] */ -49, 56, -14, 
  /* [6][2][][] */ -34, -49, -85, 
  /* [7][0][][] */ 34, 22, -22, 
  /* [7][1][][] */ 127, 44, -23, 
  /* [7][2][][] */ 34, 9, -17, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -62, 96, 
  /* [9][0][][] */ -6, 58, -13, 
  /* [9][1][][] */ -9, 127, -17, 
  /* [9][2][][] */ -6, 73, -9, 
  /* [10][0][][] */ 27, 90, 13, 
  /* [10][1][][] */ -35, -127, -29, 
  /* [10][2][][] */ 14, 42, 18, 
  /* [11][0][][] */ 9, -18, 12, 
  /* [11][1][][] */ 66, -97, 36, 
  /* [11][2][][] */ -90, 127, -50, 
  /* [12][0][][] */ -40, 49, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 6, 
  /* [13][0][][] */ 59, 9, -27, 
  /* [13][1][][] */ 127, 105, 0, 
  /* [13][2][][] */ 89, 114, 48, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 45, 98, -127, 
  /* [14][2][][] */ -15, -69, 81, 
  /* [15][0][][] */ -94, -29, 22, 
  /* [15][1][][] */ -127, -111, 16, 
  /* [15][2][][] */ 9, -50, -2, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.055413901805877686, 0.18139426410198212, 0.060321144759654999, 0.043179072439670563, 0.01240447536110878, 0.011788478121161461, 0.038993179798126221, 0.0086848977953195572, 0.040529422461986542, 0.012216926552355289, 0.10228412598371506, 0.13234294950962067, 0.08993317186832428, 0.005261971615254879, 0.15119749307632446, 0.01508316770195961, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.089623473584651947, } };
const TfArray<1, int> quant46_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.062710084021091461, } };
const TfArray<1, int> quant50_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.0235101617872715, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.047495882958173752, } };
const TfArray<1, int> quant53_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.084570065140724182, } };
const TfArray<1, int> quant54_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.051244623959064484, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.046640153974294662, } };
const TfArray<1, int> quant61_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069266654551029205, } };
const TfArray<1, int> quant62_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.022484928369522095, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.044363599270582199, } };
const TfArray<1, int> quant65_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.0833168625831604, } };
const TfArray<1, int> quant66_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.057198423892259598, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.14834529161453247, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
